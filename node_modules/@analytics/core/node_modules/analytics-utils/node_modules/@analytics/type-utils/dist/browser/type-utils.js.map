{"version":3,"file":"type-utils.js","sources":["../../src/index.js"],"sourcesContent":["\n/*\n  Constants for reuse\n*/\n\nexport const FUNCTION = 'function'\nexport const STRING = 'string'\nexport const UNDEFINED = 'undefined'\nexport const BOOLEAN = 'boolean'\nexport const OBJECT = 'object'\nexport const ARRAY = 'array'\nexport const NUMBER = 'number'\nexport const SYMBOL = 'symbol'\nexport const NULL = 'null'\nexport const ERROR = 'error'\nexport const TYPE_ERROR = 'typeError'\nexport const SYNTAX_ERROR = 'syntaxError'\nexport const ASYNC_FUNCTION = 'asyncFunction'\nexport const GENERATOR_FUNCTION = 'generatorFunction'\nexport const ASYNC_GENERATOR_FUNCTION = 'asyncGeneratorFunction'\n\nexport const noOp = () => {}\nexport const ANY = 'any'\nexport const ALL = '*'\nexport const NONE = 'none'\nexport const HIDDEN = 'hidden'\nexport const PREFIX = '__'\n\n/* DOM Constants */\nexport const FORM = 'form'\nexport const INPUT = 'input'\nexport const BUTTON = 'button'\nexport const SELECT = 'select'\nexport const CHANGE = 'change'\nexport const SUBMIT = 'submit'\n\n/* Regex patterns */\nexport const REGEX_ISO = /^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)$/\nexport const REGEX_EMAIL = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\nexport const REGEX_JSON = /^\\{[\\s\\S]*\\}$|^\\[[\\s\\S]*\\]$/\n\n/* ────────────────────\nEnvironment checks\n─────────────────────── */\n/** @type {Object} */\nconst PROCESS = typeof process !== UNDEFINED ? process : {}\n\n/** @type {String} */\nexport const ENV = (PROCESS.env && PROCESS.env.NODE_ENV) || ''\n\n/** @type {Boolean} */\nexport const isProd = ENV === 'production'\n\n/** @type {Boolean} */\nexport const isStaging = ENV === 'staging'\n\n/** @type {Boolean} */\nexport const isDev = ENV === 'development'\n\n/** @type {Boolean} */\nexport const isBrowser = typeof window !== UNDEFINED\n/** @type {Boolean} */\nexport const isLocalHost = isBrowser && window.location.hostname === 'localhost'\n\n/** @type {Boolean} */\nexport const isNode = PROCESS.versions != null && PROCESS.versions.node != null\n\n/** @type {Boolean} */\nexport const isDeno = typeof Deno !== UNDEFINED && typeof Deno.core !== UNDEFINED;\n\n/** @type {Boolean} */\nexport const isWebWorker = typeof self === OBJECT && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope'\n\n/** @type {Boolean} */\nexport const isJsDom = (isBrowser && window.name === 'nodejs') || (typeof navigator !== UNDEFINED && (navigator.userAgent.includes('Node.js') || navigator.userAgent.includes('jsdom')))\n\n/* ────────────────────\nType checks\n─────────────────────── */\n\nfunction text(method, s) {\n  return s.charAt(0)[method]() + s.slice(1)\n}\n\nconst upper = text.bind(null, 'toUpperCase')\nconst lower = text.bind(null, 'toLowerCase')\n\n/**\n * Returns the object type of the given payload\n * @param {*} val\n * @returns {string}\n */\nexport function getTypeName(val) {\n  if (isNull(val)) return upper(NULL)\n  return (typeof val === OBJECT) ? ctorName(val) : Object.prototype.toString.call(val).slice(8, -1)\n}\n\n/**\n * Returns the object type of the given payload\n * @param {*} val\n * @returns {string}\n */\nexport function getType(val, toLowerCase = true) {\n  const type = getTypeName(val)\n  // console.log('type', type)\n  return (toLowerCase) ? lower(type) : type\n}\n\n// export function getType(val) {\n//   if (isNull(val)) return NULL\n//   const type = typeof val\n//   if (type === OBJECT) return ctorName(val).toLowerCase()\n//   return type\n// }\n\nfunction typeOf(kind, val) {\n  return typeof val === kind\n}\n\n/** \n * Check if value is function.\n * @param x\n * @return {x is Function}\n */\nexport const isFunction = typeOf.bind(null, FUNCTION)\n\n/** \n * Check if value is string.\n * @param x\n * @return {x is string}\n */\nexport const isString = typeOf.bind(null, STRING)\n\n/** \n * Check if value is undefined.\n * @param x\n * @return {x is undefined}\n */\nexport const isUndefined = typeOf.bind(null, UNDEFINED)\n\n/** \n * Check if value is not undefined.\n * @param x\n * @return {x is undefined}\n */\nexport function isDefined(x) {\n  return !isUndefined(x)\n}\n\n/** \n * @param x\n * @return {x is boolean}\n */\nexport const isBoolean = typeOf.bind(null, BOOLEAN)\n\n/** \n * @param x\n * @return {x is symobl}\n */\nexport const isSymbol = typeOf.bind(null, SYMBOL)\n\n/** \n * @param x\n * @return {x is boolean}\n * @example\n * isNull(null)\n * // true\n */\nexport function isNull(x) {\n  return x === null\n}\n\n/** \n * Check if value is number.\n * @param n\n * @return {boolean}\n * @example\n * > isNumber(0)\n * true\n * > isNumber(1)\n * true\n * > isNumber(1.1)\n * true\n * > isNumber(0xff)\n * true\n * > isNumber(0644)\n * true\n * > isNumber(6.2e5)\n * true\n * > isNumber(NaN)\n * false\n * > isNumber(Infinity)\n * true\n */\nexport function isNumber(n) {\n  return getType(n) === NUMBER && !isNaN(n)\n}\n\nexport function isNumberLike(n) {\n  return !isNaN(parseFloat(n))\n}\n\n/** \n * Check if value is ES2015 `class`.\n * @param x\n * @return {x is Class}\n */\nexport function isClass(x) {\n  if (isFunction(x)) {\n    return /^class /.test(Function.prototype.toString.call(x))\n  }\n  return false\n}\n\n/** \n * @template T\n * @param x\n * @return {x is Array<T>}\n */\nexport function isArray(x) {\n  return getType(x) === ARRAY\n}\n\n/** \n * @param obj\n * @return {obj is Object}\n */\nexport function isObject(obj) {\n  if (!isObjectLike(obj)) return false\n\n  let proto = obj\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto)\n  }\n\n  return Object.getPrototypeOf(obj) === proto\n}\n\nexport function isObjectLike(obj) {\n  return obj && (typeof obj === OBJECT || obj !== null)\n}\n\n/**\n* Tests if a value is a parseable JSON string.\n* @param {*} x - value to test\n* @returns {boolean} boolean indicating if a value is a parseable JSON string\n* @example\n* isJson('{\"a\":5}') // returns true\n* isJson('[]') // returns true\n* isJson('{a\":5}') // returns false\n*/\nexport function isJson(x) {\n  if (!isString(x) || !REGEX_JSON.test(x)) return false\n  try {\n    JSON.parse(x)\n  } catch (e) { \n    return false\n  }\n  return true\n}\n\n/**\n * Is primative scalar value\n * @param x\n * @return {boolean}\n * @example\n   isPrimitive(true) =>  true\n   isPrimitive({}) => false\n   isPrimitive(0) =>  true\n   isPrimitive('1') =>  true\n   isPrimitive(1.1) =>  true\n   isPrimitive(NaN) =>  true\n   isPrimitive(Infinity) =>  true\n   isPrimitive(function() {}) => false\n   isPrimitive(Date), => false\n   isPrimitive(null) =>  true\n   isPrimitive(undefined) =>  true\n */\nexport function isPrimitive(x) {\n  if (isNull(x)) return true\n  // if (isNaN(x)) return false\n  switch (typeof x) {\n    case STRING:\n    case NUMBER:\n    case SYMBOL:\n    case UNDEFINED:\n    case BOOLEAN:\n      return true\n    default:\n      return false\n  }\n}\n\n/**\n* Tests if an object has a specified method name.\n* @param {*} value - value to test\n* @param {*} property - property to test\n* @returns {boolean} boolean indicating if an object has a specified method name\n* @example\n* const obj = {\n*   key: myFunc,\n*   keyTwo: 'foobar'\n* }\n* isMethod(obj, 'key' ) // returns true\n* isMethod(obj, 'keyTwo' ) // returns false\n* isMethod(obj, 'otherThing' ) // returns false\n*/\nexport function isMethod(value, prop) {\n  return isObject(value) && isFunction(value[prop])\n}\n\n/**\n * Returns true if the input is a Promise.\n * @param {*} x - The input to test\n * @returns {boolean}\n */\nexport function isPromise(x) {\n  if (!x) return false\n  return !!(!isUndefined(Promise) && x instanceof Promise || x.then && isFunction(x.then))\n}\n\n/**\n * Returns true if the input is a generator.\n * @param {*} x - The input to test\n * @returns {boolean}\n */\nexport function isGenerator(x) {\n  return isObjectLike(x) && isFunction(x.throw) && isFunction(x.return) && isFunction(x.next)\n}\n\n/** \n * Is generator function\n * @param x\n * @return {boolean}\n * @example\n   isGeneratorFunction(() => {}) =>  false\n   isGeneratorFunction(function* () => {}) =>  true\n   isGeneratorFunction(function * () {\n     yield 'my-val'\n   }))\n */\nexport function isGeneratorFunction(x) {\n  return getType(x) === GENERATOR_FUNCTION\n}\n\n/** \n * Is async function\n * @param x\n * @return {boolean}\n * @example\n   isAsyncFunction(() => {}) =>  false\n   isAsyncFunction(async () => {}) =>  true\n */\nexport function isAsyncFunction(x) {\n  return getType(x) === ASYNC_FUNCTION\n}\n\n\nexport function ctorName(x) {\n  return isFunction(x.constructor) ? x.constructor.name : null\n}\n\n/**\n * Returns true if the input is a Set.\n * @param {*} x - The input to test\n * @returns {boolean}\n */\nexport function isSet(value) {\n  return value instanceof Set\n}\n\n/**\n * Returns true if the input is a Map.\n * @param {*} x - The input to test\n * @returns {boolean}\n */\nexport function isMap(value) {\n  return value instanceof Map\n}\n\n/**\n * Check if value is regexp\n * @param {*} value - Value to check\n * @return {boolean} \n */\nexport function isRegex(value) {\n  return value instanceof RegExp\n}\n\n/**\n * Check if value is Buffer\n * @param {*} value - Value to check\n * @return {boolean} \n */\nexport function isBuffer(val) {\n  if (val.constructor && isFunction(val.constructor.isBuffer)) {\n    return val.constructor.isBuffer(val)\n  }\n  return false\n}\n\n/**\n * Check if value is Error\n * @param x - Object to check\n * @return {Boolean} If value is error\n * @example\n * isError(new Error()) // True\n */\nexport function isError(x) {\n  return x instanceof Error || (isString(x.message) && x.constructor && isNumber(x.constructor.stackTraceLimit))\n}\n\n/**\n * Check if value error like (i.e has the name and message properties, both of which are strings)\n * @param obj - Object to check\n * @return {Boolean} If object is error-like\n * via https://github.com/Luke-zhang-04/utils/blob/master/src/typeGuards.ts#L62\n * @example\n *\n * ```js\n * isErrorLike(new Error()) // True\n * isErrorLike({name: \"Error!\", message: \"This is an error\", other: 0}) // True\n * isErrorLike({}) // False\n * isErrorLike({name: \"Error\", message: null}) // False\n *\n * // Works as a typguard\n * const something = {name: \"Error\", message: \"This is an error\"} as unknown\n *\n * if (isErrorLike(something)) {\n *   console.log(something.name) // No Typescript error\n * }\n * ```\n */\nexport function isErrorLike(obj) {\n  return isObjectLike(obj) && isString(obj.message) && isString(obj.name)\n}\n\nfunction errorType(ErrKind, value) {\n  if (typeof value !== 'object' || isNull(value)) return false\n  // Check for `TypeError` objects from the same realm (same Node.js `vm` or same `Window` object)...\n  if (value instanceof ErrKind) return true\n  const typeName = getType(new ErrKind(''))\n  // All `TypeError` objects are `Error` objects...\n  if (isError(value)) {\n    while (value) {\n      if (getType(value) === typeName) {\n        return true\n      }\n        value = Object.getPrototypeOf(value)\n    }\n  }\n  return false\n}\n\nexport const isTypeError = errorType.bind(null, TypeError)\n\nexport const isSyntaxError = errorType.bind(null, SyntaxError)\n\n/** \n * @param func - function to check if noOp\n * @return {Boolean} - is noOp\n * @examples\n   function foo() {}\n   isNoOp(foo) // true\n   isNoOp(() => { }) // true\n   isNoOp(() => { console.log('hi') }) // false\n */\nexport function isNoOp(func) {\n  if (!isFunction(func)) return false\n  const emptyFunc = /{(\\r|\\n|\\s)*}/gm\n  const noOpStr = noOp + ''\n  const funcString = (func.toString().match(emptyFunc) || [''])[0].replace(emptyFunc, noOpStr)\n  return noOpStr === funcString\n}\n\n/**\n * Check if value is function arguments\n * @param {*} val \n * @returns \n */\nexport function isArguments(val) {\n  try {\n    if (isNumber(val.length) && isFunction(val.callee)) return true\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) return true\n  }\n  return false\n}\n\n/**\n * Check if value is truthy\n * @param {*} value \n * @return {Boolean} - is truthy value\n */\nexport function isTruthy(v) {\n  if (isString(v) && v.toLowerCase() === 'false') return false\n  return !!v\n}\n\n/**\n * Check if value is falsy\n * @param {*} x \n * @return {Boolean} - is falsy value\n * @example\n * isFalsy(false) // returns true\n * isFalsy(null) // returns true\n * isFalsy('') // returns true\n * isFalsy(0) // returns true\n * isFalsy(void 0) // returns true\n * isFalsy(NaN) // returns true\n * isFalsy([]) // returns false\n */\nexport function isFalsy(x) {\n  return x ? false : true\n}\n\n// ^ future updates https://github.com/thenativeweb/boolean\n\n/**\n * Check if value is true\n * @param {*} x \n * @return {Boolean} - is true\n */\nexport function isTrue(x) {\n  return x === true\n}\n\n/**\n * Check if value is true\n * @param {*} x \n * @return {Boolean} - is true\n */\nexport function isFalse(x) {\n  return x === false\n}\n\n/**\n * Check if value is email\n * @param {*} x \n * @return {Boolean} - is email like value\n */\nexport function isEmail(x) {\n  if (x.length > 320) return false\n  return REGEX_EMAIL.test(x)\n}\n\n/**\n * Check if valie is date\n * @param {*} val \n * @returns {Boolean}\n */\nexport function isDate(x) {\n  if (x instanceof Date) return true\n  return isFunction(x.toDateString) && isFunction(x.getDate) && isFunction(x.setDate)\n}\n\n/**\n * Check if value is ISO date e.g. '2022-01-02T06:45:28.547Z'\n * @param {*} x\n * @return {Boolean} - is email like value\n */\nexport function isIsoDate(x) {\n  return REGEX_ISO.test(x)\n}\n\n/**\n * Is value empty\n * @param {*} x \n * @returns {Boolean}\n * @example\n * isEmpty(null)\n *\n * isEmpty([1, 2, 3])\n * // => false\n *\n * isEmpty('abc')\n * // => false\n *\n * isEmpty({ 'a': 1 })\n * // => false\n */\nexport function isEmpty(x) {\n  if (isNull(x)) return true\n  if (isArray(x)) return !x.length\n  if (isSet(x) || isMap(x)) return !x.size\n  if (isObject(x)) return !Object.keys(x).length\n  return true\n}\n\n/* ────────────────────\nHTML Element checks\n─────────────────────── */\n\n/** \n * @param obj\n * @return {obj is NodeList}\n */\nexport function isNodeList(obj) {\n  return NodeList.prototype.isPrototypeOf(obj)\n}\n\n/**\n * Check if input is DOM element\n * @param {HTMLElement|*} element\n * @return {boolean} \n */\nexport function isElement(element, type) {\n  const isEl = element instanceof Element || element instanceof HTMLDocument\n  if (!isEl || !type) return isEl\n  return isNodeType(element, type)\n}\n\n/**\n * Check if element is specific DOMNode type\n * @param {HTMLElement|*} element\n * @param {String} type\n * @return {boolean}\n */\nexport function isNodeType(element, type = '') {\n  return element && element.nodeName === type.toUpperCase()\n}\n\nfunction bindArgs(fn, ...boundArgs) {\n  return function(...args) {\n    return fn(...args, ...boundArgs)\n  }\n}\n\n/**\n * Check if element is form element\n * @param {HTMLElement} element\n * @return {boolean} \n */\nexport const isForm = bindArgs(isElement, FORM)\n\n/**\n * Check if element is button element\n * @param {HTMLElement} element\n * @return {boolean} \n */\nexport const isButton = bindArgs(isElement, BUTTON)\n\n/**\n * Check if element is input element\n * @param {HTMLElement} element\n * @return {boolean} \n */\nexport const isInput = bindArgs(isElement, INPUT)\n\n/**\n * Check if element is select element\n * @param {HTMLElement} element\n * @return {boolean} \n */\nexport const isSelect = bindArgs(isElement, SELECT)\n\n/**\n * Check if DOM element is hidden\n * @param {HTMLElement|null|undefined} element\n * @param {HTMLElement|null|undefined} until\n * @return {boolean}\n */\nexport function isHidden(element, until) {\n  if (!element || getComputedStyle(element).visibility === HIDDEN) return true\n\n  while (element) {\n    if (until != null && element === until) return false\n    if (getComputedStyle(element).display === NONE) return true\n    element = element.parentElement\n  }\n\n  return false\n}\n\n/* ────────────────────\nEnsure Values\n─────────────────────── */\n\n/**\n * Ensure value returned is Array\n * @param {*} singleOrArray \n * @returns [*]\n */\nexport function ensureArray(singleOrArray) {\n  if (!singleOrArray) return []\n  if (isArray(singleOrArray)) return singleOrArray\n  return [singleOrArray]\n}"],"names":["FUNCTION","STRING","UNDEFINED","BOOLEAN","OBJECT","ARRAY","NUMBER","SYMBOL","NULL","ASYNC_FUNCTION","GENERATOR_FUNCTION","noOp","NONE","HIDDEN","FORM","INPUT","BUTTON","SELECT","REGEX_ISO","REGEX_EMAIL","REGEX_JSON","PROCESS","process","ENV","env","NODE_ENV","isProd","isStaging","isDev","isBrowser","window","isLocalHost","location","hostname","isNode","versions","node","isDeno","Deno","core","isWebWorker","self","constructor","name","isJsDom","navigator","userAgent","includes","text","method","s","charAt","slice","upper","bind","lower","getTypeName","val","isNull","ctorName","Object","prototype","toString","call","getType","toLowerCase","type","typeOf","kind","isFunction","isString","isUndefined","isBoolean","isSymbol","x","isNumber","n","isNaN","isArray","isObject","obj","isObjectLike","proto","getPrototypeOf","isSet","value","Set","isMap","Map","isError","Error","message","stackTraceLimit","errorType","ErrKind","typeName","isTypeError","TypeError","isSyntaxError","SyntaxError","isElement","element","isEl","Element","HTMLDocument","isNodeType","nodeName","toUpperCase","bindArgs","fn","boundArgs","isForm","isButton","isInput","isSelect","singleOrArray","length","callee","err","indexOf","isBuffer","test","Function","Date","toDateString","getDate","setDate","size","keys","next","until","getComputedStyle","visibility","display","parentElement","JSON","parse","e","prop","func","emptyFunc","noOpStr","match","replace","NodeList","isPrototypeOf","parseFloat","Promise","then","RegExp","v"],"mappings":"8BAKaA,EAAW,WACXC,EAAS,SACTC,EAAY,YACZC,EAAU,UACVC,EAAS,SACTC,EAAQ,QACRC,EAAS,SACTC,EAAS,SACTC,EAAO,OAIPC,EAAiB,gBACjBC,EAAqB,oBAGrBC,EAAO,aAGPC,EAAO,OACPC,EAAS,SAITC,EAAO,OACPC,EAAQ,QACRC,EAAS,SACTC,EAAS,SAKTC,EAAY,6EACZC,EAAc,wIACdC,EAAa,8BAMpBC,SAAiBC,UAAYpB,EAAYoB,QAAU,GAG5CC,EAAOF,EAAQG,KAAOH,EAAQG,IAAIC,UAAa,GAG/CC,EAAiB,eAARH,EAGTI,EAAoB,YAARJ,EAGZK,EAAgB,gBAARL,EAGRM,SAAmBC,SAAW5B,EAE9B6B,EAAcF,GAA0C,cAA7BC,OAAOE,SAASC,SAG3CC,EAA6B,MAApBb,EAAQc,UAA6C,MAAzBd,EAAQc,SAASC,KAGtDC,SAAgBC,OAASpC,UAAoBoC,KAAKC,OAASrC,EAG3DsC,SAAqBC,OAASrC,GAAUqC,KAAKC,aAAyC,+BAA1BD,KAAKC,YAAYC,KAG7EC,EAAWf,GAA6B,WAAhBC,OAAOa,aAA8BE,YAAc3C,IAAc2C,UAAUC,UAAUC,SAAS,YAAcF,UAAUC,UAAUC,SAAS,UAM9K,SAASC,EAAKC,EAAQC,GACpB,OAAOA,EAAEC,OAAO,GAAGF,KAAYC,EAAEE,MAAM,GAGzC,IAAMC,EAAQL,EAAKM,KAAK,KAAM,eACxBC,EAAQP,EAAKM,KAAK,KAAM,wBAOdE,EAAYC,GAC1B,OAAIC,EAAOD,GAAaJ,EAAM7C,UACfiD,IAAQrD,EAAUuD,EAASF,GAAOG,OAAOC,UAAUC,SAASC,KAAKN,GAAKL,MAAM,GAAI,YAQjFY,EAAQP,EAAKQ,YAAAA,IAAAA,GAAc,GACzC,IAAMC,EAAOV,EAAYC,GAEzB,OAAQQ,EAAeV,EAAMW,GAAQA,EAUvC,SAASC,EAAOC,EAAMX,GACpB,cAAcA,IAAQW,EAQXC,IAAAA,EAAaF,EAAOb,KAAK,KAAMtD,GAO/BsE,EAAWH,EAAOb,KAAK,KAAMrD,GAO7BsE,EAAcJ,EAAOb,KAAK,KAAMpD,GAehCsE,EAAYL,EAAOb,KAAK,KAAMnD,GAM9BsE,EAAWN,EAAOb,KAAK,KAAM/C,YAS1BmD,EAAOgB,GACrB,OAAa,OAANA,WAyBOC,EAASC,GACvB,OAAOZ,EAAQY,KAAOtE,IAAWuE,MAAMD,YAwBzBE,EAAQJ,GACtB,OAAOV,EAAQU,KAAOrE,WAOR0E,EAASC,GACvB,IAAKC,EAAaD,GAAM,SAGxB,IADA,IAAIE,EAAQF,EAC4B,OAAjCpB,OAAOuB,eAAeD,IAC3BA,EAAQtB,OAAOuB,eAAeD,GAGhC,OAAOtB,OAAOuB,eAAeH,KAASE,WAGxBD,EAAaD,GAC3B,OAAOA,WAAeA,IAAQ5E,GAAkB,OAAR4E,YAuH1BrB,EAASe,GACvB,OAAOL,EAAWK,EAAEhC,aAAegC,EAAEhC,YAAYC,KAAO,cAQ1CyC,EAAMC,GACpB,OAAOA,aAAiBC,aAQVC,EAAMF,GACpB,OAAOA,aAAiBG,aA+BVC,EAAQf,GACtB,OAAOA,aAAagB,OAAUpB,EAASI,EAAEiB,UAAYjB,EAAEhC,aAAeiC,EAASD,EAAEhC,YAAYkD,iBA4B/F,SAASC,EAAUC,EAAST,GAC1B,GAAqB,iBAAVA,GAAsB3B,EAAO2B,GAAQ,SAEhD,GAAIA,aAAiBS,EAAS,SAC9B,IAAMC,EAAW/B,EAAQ,IAAI8B,EAAQ,KAErC,GAAIL,EAAQJ,GACV,KAAOA,GAAO,CACZ,GAAIrB,EAAQqB,KAAWU,EACrB,SAEAV,EAAQzB,OAAOuB,eAAeE,GAGpC,SAGWW,IAAAA,GAAcH,EAAUvC,KAAK,KAAM2C,WAEnCC,GAAgBL,EAAUvC,KAAK,KAAM6C,sBAsJlCC,GAAUC,EAASnC,GACjC,IAAMoC,EAAOD,aAAmBE,SAAWF,aAAmBG,aAC9D,OAAKF,GAASpC,EACPuC,GAAWJ,EAASnC,GADAoC,WAUbG,GAAWJ,EAASnC,GAClC,gBADkCA,IAAAA,EAAO,IAClCmC,GAAWA,EAAQK,WAAaxC,EAAKyC,cAG9C,SAASC,GAASC,OAAOC,6BACvB,kBACE,OAAOD,+CAAeC,KASbC,IAAAA,GAASH,GAASR,GAAWtF,GAO7BkG,GAAWJ,GAASR,GAAWpF,GAO/BiG,GAAUL,GAASR,GAAWrF,GAO9BmG,GAAWN,GAASR,GAAWnF,gBAvnBzB,UADA,8DAHqB,yDAclB,yBAnBD,2HAYC,iFAQA,mCAlBM,2BADF,8DA4pBEkG,GAC1B,OAAKA,EACDrC,EAAQqC,GAAuBA,EAC5B,CAACA,GAFmB,uDA5MD1D,GAC1B,IACE,GAAIkB,EAASlB,EAAI2D,SAAW/C,EAAWZ,EAAI4D,QAAS,SACpD,MAAOC,GACP,IAAuC,IAAnCA,EAAI3B,QAAQ4B,QAAQ,UAAkB,SAE5C,iDArI8B7C,GAC9B,OAAOV,EAAQU,KAAOjE,mDAwCCgD,GACvB,SAAIA,EAAIf,cAAe2B,EAAWZ,EAAIf,YAAY8E,YACzC/D,EAAIf,YAAY8E,SAAS/D,qCA7LZiB,GACtB,QAAIL,EAAWK,cACI+C,KAAKC,SAAS7D,UAAUC,SAASC,KAAKW,uBAsVpCA,GACrB,OAAIA,aAAaiD,MACVtD,EAAWK,EAAEkD,eAAiBvD,EAAWK,EAAEmD,UAAYxD,EAAWK,EAAEoD,+BAxZnDpD,GACxB,OAAQH,EAAYG,2DA2YEA,GACtB,QAAIA,EAAE0C,OAAS,MACRjG,EAAYsG,KAAK/C,uBAsCFA,GACtB,SAAIhB,EAAOgB,KACPI,EAAQJ,GAAYA,EAAE0C,OACtBhC,EAAMV,IAAMa,EAAMb,GAAYA,EAAEqD,KAChChD,EAASL,IAAYd,OAAOoE,KAAKtD,GAAG0C,6CAxJdpC,GAC1B,OAAOC,EAAaD,IAAQV,EAASU,EAAIW,UAAYrB,EAASU,EAAIrC,0BAkG5C+B,GACtB,OAAa,IAANA,sBArBeA,GACtB,OAAOA,qDA3LmBA,GAC1B,OAAOO,EAAaP,IAAML,EAAWK,UAAYL,EAAWK,WAAaL,EAAWK,EAAEuD,sCAcpDvD,GAClC,OAAOV,EAAQU,KAAOhE,uBAgUC2F,EAAS6B,GAChC,IAAK7B,GAAW8B,iBAAiB9B,GAAS+B,aAAevH,EAAQ,SAEjE,KAAOwF,GAAS,CACd,GAAa,MAAT6B,GAAiB7B,IAAY6B,EAAO,SACxC,GAAIC,iBAAiB9B,GAASgC,UAAYzH,EAAM,SAChDyF,EAAUA,EAAQiC,cAGpB,4CA9GwB5D,GACxB,OAAOxD,EAAUuG,KAAK/C,kCAvTDA,GACrB,IAAKJ,EAASI,KAAOtD,EAAWqG,KAAK/C,GAAI,SACzC,IACE6D,KAAKC,MAAM9D,GACX,MAAO+D,GACP,SAEF,wDAiDuBpD,EAAOqD,GAC9B,OAAO3D,EAASM,IAAUhB,EAAWgB,EAAMqD,uBA+JtBC,GACrB,IAAKtE,EAAWsE,GAAO,SACvB,IAAMC,EAAY,kBACZC,EAAUlI,EAAO,GAEvB,OAAOkI,KADaF,EAAK7E,WAAWgF,MAAMF,IAAc,CAAC,KAAK,GAAGG,QAAQH,EAAWC,qCA8H3D7D,GACzB,OAAOgE,SAASnF,UAAUoF,cAAcjE,oEAhZbJ,GAC3B,OAAQC,MAAMqE,WAAWtE,0DA+ECF,GAC1B,GAAIhB,EAAOgB,GAAI,SAEf,cAAeA,GACb,KAAKzE,EACL,KAAKK,EACL,KAAKC,EACL,KAAKL,EACL,KAAKC,EACH,SACF,QACE,2CA2BoBuE,GACxB,QAAKA,OACMH,EAAY4E,UAAYzE,aAAayE,SAAWzE,EAAE0E,MAAQ/E,EAAWK,EAAE0E,2BAmE5D/D,GACtB,OAAOA,aAAiBgE,6GAyIH3E,GACrB,OAAa,IAANA,uBA9BgB4E,GACvB,QAAIhF,EAASgF,IAA0B,UAApBA,EAAErF,gBACZqF"}