import 'deepmerge';
import 'analytics-utils';
import 'aws4fetch';
import 'analytics-plugin-tab-events';

function awsPinpointNode(pluginConfig) {
  return {
    name: 'aws-pinpoint',
    initialize: function initialize(_ref) {
      var config = _ref.config;
      console.log('AWS pinpoint has no server implementation');
    }
  };
}

function browserClientInfo() {
  if (typeof window === 'undefined') {
    return {};
  }

  if (!window.navigator) {
    return {};
  }

  var _window$navigator = window.navigator,
      platform = _window$navigator.platform,
      product = _window$navigator.product,
      vendor = _window$navigator.vendor,
      userAgent = _window$navigator.userAgent;
  var type = browserType(userAgent);
  return {
    platform: platform,
    make: product || vendor,
    model: type.type,
    version: type.version,
    appVersion: [type.type, type.version].join('/'),
    language: getLanguage(),
    timezone: browserTimezone()
  };
}

function getLanguage() {
  var _window$navigator2 = window.navigator,
      language = _window$navigator2.language,
      browserLanguage = _window$navigator2.browserLanguage,
      languages = _window$navigator2.languages;
  return (language || browserLanguage || (languages || ['en_US'])[0]).toLowerCase().replace('-', '_');
}

function browserTimezone() {
  var tzMatch = /\(([A-Za-z\s].*)\)/.exec(new Date().toString());
  return tzMatch ? tzMatch[1] || '' : '';
}

function browserType(userAgent) {
  var operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9\.]+).*/i.exec(userAgent);

  if (operaMatch) {
    return {
      type: operaMatch[1],
      version: operaMatch[2]
    };
  }

  var ieMatch = /.+(Trident|Edge)\/([0-9\.]+).*/i.exec(userAgent);

  if (ieMatch) {
    return {
      type: ieMatch[1],
      version: ieMatch[2]
    };
  }

  var cfMatch = /.+(Chrome|Firefox|FxiOS)\/([0-9\.]+).*/i.exec(userAgent);

  if (cfMatch) {
    return {
      type: cfMatch[1],
      version: cfMatch[2]
    };
  }

  var sMatch = /.+(Safari)\/([0-9\.]+).*/i.exec(userAgent);

  if (sMatch) {
    return {
      type: sMatch[1],
      version: sMatch[2]
    };
  }

  var awkMatch = /.+(AppleWebKit)\/([0-9\.]+).*/i.exec(userAgent);

  if (awkMatch) {
    return {
      type: awkMatch[1],
      version: awkMatch[2]
    };
  }

  var anyMatch = /.*([A-Z]+)\/([0-9\.]+).*/i.exec(userAgent);

  if (anyMatch) {
    return {
      type: anyMatch[1],
      version: anyMatch[2]
    };
  }

  return {
    type: '',
    version: ''
  };
}

var ALLOWED_CHANNELS = ['PUSH', 'GCM', 'APNS', 'APNS_SANDBOX', 'APNS_VOIP', 'APNS_VOIP_SANDBOX', 'ADM', 'SMS', 'VOICE', 'EMAIL', 'BAIDU', 'CUSTOM'];
var CHANNEL_TYPES = ALLOWED_CHANNELS.reduce(function (acc, curr) {
  acc[curr] = curr;
  return acc;
}, {});

/* The endpoint began a new session. */
var SESSION_START = '_session.start';
/* The endpoint ended a session. */

var SESSION_STOP = '_session.stop';
/* The endpoint paused a session. Paused sessions can be resumed so that you can continue to collect metrics without starting an entirely new session. */

var SESSION_PAUSE = '_session.pause';
/* The endpoint resumed a session. */

var SESSION_RESUME = '_session.resume';
/* The endpoint logged in to your app. */

var AUTH_SIGN_IN = '_userauth.sign_in';
/* A new endpoint completed the registration process in your app. */

var AUTH_SIGN_UP = '_userauth.sign_up';
/* The endpoint attempted to sign in to your app, but wasn't able to complete the process. */

var AUTH_FAIL = '_userauth.auth_fail';
/* The endpoint made a purchase in your app. */

var ECOM_PURCHASE = '_monetization.purchase';
/* The pageview event */

var PAGE_VIEW = 'pageView';

var events = /*#__PURE__*/Object.freeze({
  SESSION_START: SESSION_START,
  SESSION_STOP: SESSION_STOP,
  SESSION_PAUSE: SESSION_PAUSE,
  SESSION_RESUME: SESSION_RESUME,
  AUTH_SIGN_IN: AUTH_SIGN_IN,
  AUTH_SIGN_UP: AUTH_SIGN_UP,
  AUTH_FAIL: AUTH_FAIL,
  ECOM_PURCHASE: ECOM_PURCHASE,
  PAGE_VIEW: PAGE_VIEW
});

// import 'navigator.sendbeacon'

var BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function';
var clientInfo = browserClientInfo(); // TODO localize queue

/* This module will shake out unused code + work in browser and node ðŸŽ‰ */

var index = awsPinpointNode;

export default index;
export { events as PINPOINT_EVENTS };
