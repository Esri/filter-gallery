{"version":3,"file":"focus-trap.esm.min.js","sources":["../index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying the first and last tabbable nodes in all containers/groups in\n    //  the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  const containersContain = function (element) {\n    return !!(\n      element &&\n      state.containers.some((container) => container.contains(element))\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (containersContain(doc.activeElement)) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.tabbableGroups = state.containers\n      .map((container) => {\n        const tabbableNodes = tabbable(container);\n\n        // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n        //  are a superset of tabbable nodes\n        const focusableNodes = focusable(container);\n\n        if (tabbableNodes.length > 0) {\n          return {\n            container,\n            firstTabbableNode: tabbableNodes[0],\n            lastTabbableNode: tabbableNodes[tabbableNodes.length - 1],\n\n            /**\n             * Finds the __tabbable__ node that follows the given node in the specified direction,\n             *  in this container, if any.\n             * @param {HTMLElement} node\n             * @param {boolean} [forward] True if going in forward tab order; false if going\n             *  in reverse.\n             * @returns {HTMLElement|undefined} The next tabbable node, if any.\n             */\n            nextTabbableNode(node, forward = true) {\n              // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n              //  from the DOM order), this __will not work__ because the list of focusableNodes,\n              //  while it contains tabbable nodes, does not sort its nodes in any order other\n              //  than DOM order, because it can't: Where would you place focusable (but not\n              //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n              // Support for positive tabindex is already broken and hard to manage (possibly\n              //  not supportable, TBD), so this isn't going to make things worse than they\n              //  already are, and at least makes things better for the majority of cases where\n              //  tabindex is either 0/unset or negative.\n              // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n              const nodeIdx = focusableNodes.findIndex((n) => n === node);\n              if (forward) {\n                return focusableNodes\n                  .slice(nodeIdx + 1)\n                  .find((n) => isTabbable(n));\n              }\n              return focusableNodes\n                .slice(0, nodeIdx)\n                .reverse()\n                .find((n) => isTabbable(n));\n            },\n          };\n        }\n\n        return undefined;\n      })\n      .filter((group) => !!group); // remove groups with no tabbable nodes\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = containersContain(target);\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findIndex(state.tabbableGroups, ({ container }) =>\n        container.contains(target)\n      );\n      const containerGroup =\n        containerIndex >= 0 ? state.tabbableGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target) &&\n              !isTabbable(target) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target) &&\n              !isTabbable(target) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    const target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(deactivateOptions, 'onDeactivate');\n      const onPostDeactivate = getOption(deactivateOptions, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(\n        deactivateOptions,\n        'checkCanReturnFocus'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const returnFocus = getOption(\n        deactivateOptions,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"names":["trapQueue","activeFocusTraps","activateTrap","trap","length","activeTrap","pause","trapIndex","indexOf","splice","push","deactivateTrap","unpause","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","params","getActualTarget","event","target","shadowRoot","composedPath","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","containersContain","element","some","container","contains","getNodeForOption","optionValue","Error","node","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbableNodes","tabbable","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","find","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","tagName","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","checkPointerDown","e","clickOutsideDeactivates","deactivate","returnFocus","isFocusable","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKey","key","keyCode","isEscapeEvent","isTabEvent","destinationNode","containerIndex","containerGroup","shiftKey","startOfGroupIndex","destinationGroupIndex","lastOfGroupIndex","checkTab","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","concat","then","deactivateOptions","clearTimeout","onDeactivate","onPostDeactivate","checkCanReturnFocus","finishDeactivation","updateContainerElements","containerElements","elementsAsArray","Boolean"],"mappings":"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"}