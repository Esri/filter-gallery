{"version":3,"file":"focus-trap.js","sources":["../index.js"],"sourcesContent":["import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying the first and last tabbable nodes in all containers/groups in\n    //  the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  const containersContain = function (element) {\n    return !!(\n      element &&\n      state.containers.some((container) => container.contains(element))\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (containersContain(doc.activeElement)) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.tabbableGroups = state.containers\n      .map((container) => {\n        const tabbableNodes = tabbable(container);\n\n        // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n        //  are a superset of tabbable nodes\n        const focusableNodes = focusable(container);\n\n        if (tabbableNodes.length > 0) {\n          return {\n            container,\n            firstTabbableNode: tabbableNodes[0],\n            lastTabbableNode: tabbableNodes[tabbableNodes.length - 1],\n\n            /**\n             * Finds the __tabbable__ node that follows the given node in the specified direction,\n             *  in this container, if any.\n             * @param {HTMLElement} node\n             * @param {boolean} [forward] True if going in forward tab order; false if going\n             *  in reverse.\n             * @returns {HTMLElement|undefined} The next tabbable node, if any.\n             */\n            nextTabbableNode(node, forward = true) {\n              // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n              //  from the DOM order), this __will not work__ because the list of focusableNodes,\n              //  while it contains tabbable nodes, does not sort its nodes in any order other\n              //  than DOM order, because it can't: Where would you place focusable (but not\n              //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n              // Support for positive tabindex is already broken and hard to manage (possibly\n              //  not supportable, TBD), so this isn't going to make things worse than they\n              //  already are, and at least makes things better for the majority of cases where\n              //  tabindex is either 0/unset or negative.\n              // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n              const nodeIdx = focusableNodes.findIndex((n) => n === node);\n              if (forward) {\n                return focusableNodes\n                  .slice(nodeIdx + 1)\n                  .find((n) => isTabbable(n));\n              }\n              return focusableNodes\n                .slice(0, nodeIdx)\n                .reverse()\n                .find((n) => isTabbable(n));\n            },\n          };\n        }\n\n        return undefined;\n      })\n      .filter((group) => !!group); // remove groups with no tabbable nodes\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = containersContain(target);\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findIndex(state.tabbableGroups, ({ container }) =>\n        container.contains(target)\n      );\n      const containerGroup =\n        containerIndex >= 0 ? state.tabbableGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target) &&\n              !isTabbable(target) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target) &&\n              !isTabbable(target) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    const target = getActualTarget(e);\n\n    if (containersContain(target)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(deactivateOptions, 'onDeactivate');\n      const onPostDeactivate = getOption(deactivateOptions, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(\n        deactivateOptions,\n        'checkCanReturnFocus'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const returnFocus = getOption(\n        deactivateOptions,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"names":["activeFocusTraps","trapQueue","activateTrap","trap","length","activeTrap","pause","trapIndex","indexOf","push","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","key","keyCode","isTabEvent","delay","fn","setTimeout","findIndex","arr","idx","every","value","i","valueOrHandler","params","getActualTarget","event","target","shadowRoot","composedPath","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","undefined","getOption","configOverrideOptions","optionName","configOptionName","containersContain","element","some","container","contains","getNodeForOption","optionValue","Error","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbableNodes","tabbable","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","find","isTabbable","reverse","filter","group","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","isFocusable","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkTab","destinationNode","containerIndex","containerGroup","shiftKey","startOfGroupIndex","destinationGroupIndex","destinationGroup","lastOfGroupIndex","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","concat","then","deactivateOptions","clearTimeout","onDeactivate","onPostDeactivate","checkCanReturnFocus","finishDeactivation","updateContainerElements","containerElements","elementsAsArray","Boolean"],"mappings":"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"}