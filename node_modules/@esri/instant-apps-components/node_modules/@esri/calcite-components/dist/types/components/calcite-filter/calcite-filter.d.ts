/// <reference types="lodash" />
import { EventEmitter, VNode } from "../../stencil-public-runtime";
export declare class CalciteFilter {
  /**
   * The input data. The filter uses this as the starting point, and returns items
   * that contain the string entered in the input, using a partial match and recursive search.
   *
   * @deprecated use `items` instead.
   */
  data: object[];
  watchDataHandler(value: object[]): void;
  /**
   * The items to filter through. The filter uses this as the starting point, and returns items
   * that contain the string entered in the input, using a partial match and recursive search.
   *
   * This property is required.
   */
  items: object[];
  watchItemsHandler(): void;
  /**
   * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
   */
  disabled: boolean;
  /**
   * The resulting items after filtering.
   *
   * @readonly
   */
  filteredItems: CalciteFilter["items"];
  /**
   * A text label that will appear on the clear button.
   */
  intlClear?: string;
  /**
   * A text label that will appear next to the input field.
   */
  intlLabel?: string;
  /**
   * Placeholder text for the input element's placeholder attribute
   */
  placeholder?: string;
  /**
   * Filter value.
   */
  value?: string;
  valueHandler(value: string): void;
  el: HTMLCalciteFilterElement;
  textInput: HTMLCalciteInputElement;
  connectedCallback(): void;
  /**
   * This event fires when the filter text changes.
   */
  calciteFilterChange: EventEmitter;
  /** Sets focus on the component. */
  setFocus(): Promise<void>;
  filter: import("lodash").DebouncedFunc<(value: string) => void>;
  inputHandler: (event: CustomEvent) => void;
  keyDownHandler: ({ key }: KeyboardEvent) => void;
  clear: () => void;
  updateFiltered(filtered: any[]): void;
  render(): VNode;
}
