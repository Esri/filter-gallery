var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "esri/core/Collection", "esri/core/promiseUtils"], function (require, exports, Collection_1, promiseUtils_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompatibilityChecker = exports.EAppTemplateType = void 0;
    Collection_1 = __importDefault(Collection_1);
    /** Identifies all Instant App Templates by url (We use url because it is the same between locales) */
    var EAppTemplateType;
    (function (EAppTemplateType) {
        EAppTemplateType["ThreeDViewer"] = "/apps/instant/3dviewer/index.html";
        EAppTemplateType["AttachmentViewer"] = "/apps/instant/attachmentviewer/index.html";
        EAppTemplateType["Basic"] = "/apps/instant/basic/index.html";
        EAppTemplateType["CategoryGallery"] = "/apps/instant/filtergallery/index.html";
        EAppTemplateType["Charts"] = "/apps/instant/charts/index.html";
        EAppTemplateType["Countdown"] = "/apps/instant/countdown/index.html";
        EAppTemplateType["Exhibit"] = "/apps/instant/exhibit/index.html";
        EAppTemplateType["InteractiveLegend"] = "/apps/instant/interactivelegend/index.html";
        EAppTemplateType["ImageryApp"] = "/apps/instant/imageryviewer/index.html";
        EAppTemplateType["Media"] = "/apps/instant/media/index.html";
        EAppTemplateType["Minimalist"] = "/apps/instant/minimalist/index.html";
        EAppTemplateType["Nearby"] = "/apps/instant/nearby/index.html";
        EAppTemplateType["Portfolio"] = "/apps/instant/portfolio/index.html";
        EAppTemplateType["Sidebar"] = "/apps/instant/sidebar/index.html";
        EAppTemplateType["Slider"] = "/apps/instant/slider/index.html";
        EAppTemplateType["ZoneLookup"] = "/apps/instant/lookup/index.html";
    })(EAppTemplateType = exports.EAppTemplateType || (exports.EAppTemplateType = {}));
    var EResourceType;
    (function (EResourceType) {
        EResourceType[EResourceType["Webmap"] = 0] = "Webmap";
        EResourceType[EResourceType["Webscene"] = 1] = "Webscene";
        EResourceType[EResourceType["Group"] = 2] = "Group";
        EResourceType[EResourceType["Unknown"] = 3] = "Unknown";
    })(EResourceType || (EResourceType = {}));
    var ERequirementType;
    (function (ERequirementType) {
        ERequirementType[ERequirementType["UnsupportedRenderers_FeatureLayer"] = 0] = "UnsupportedRenderers_FeatureLayer";
        ERequirementType[ERequirementType["UnsupportedRenderers_Renderer"] = 1] = "UnsupportedRenderers_Renderer";
        ERequirementType[ERequirementType["PopupDisabled"] = 2] = "PopupDisabled";
        ERequirementType[ERequirementType["ImageryCondition"] = 3] = "ImageryCondition";
        ERequirementType[ERequirementType["AttachmentsCondition"] = 4] = "AttachmentsCondition";
        ERequirementType[ERequirementType["ChartsCondition"] = 5] = "ChartsCondition";
    })(ERequirementType || (ERequirementType = {}));
    /** Mapping of all Resource Types to the Templates that they're not compatible with */
    var EResourceType_to_AppType_Mapping = (_a = {},
        _a[EResourceType.Webmap] = [
            EAppTemplateType.ThreeDViewer,
            EAppTemplateType.CategoryGallery
        ],
        _a[EResourceType.Webscene] = [
            EAppTemplateType.AttachmentViewer,
            EAppTemplateType.CategoryGallery,
            EAppTemplateType.Charts,
            EAppTemplateType.Exhibit,
            EAppTemplateType.ImageryApp,
            EAppTemplateType.InteractiveLegend,
            EAppTemplateType.Media,
            EAppTemplateType.Minimalist,
            EAppTemplateType.Nearby,
            EAppTemplateType.Sidebar,
            EAppTemplateType.Slider,
            EAppTemplateType.ZoneLookup
        ],
        _a[EResourceType.Group] = [
            EAppTemplateType.AttachmentViewer,
            EAppTemplateType.Basic,
            EAppTemplateType.Charts,
            EAppTemplateType.Countdown,
            EAppTemplateType.Exhibit,
            EAppTemplateType.ImageryApp,
            EAppTemplateType.InteractiveLegend,
            EAppTemplateType.Media,
            EAppTemplateType.Minimalist,
            EAppTemplateType.Nearby,
            EAppTemplateType.Portfolio,
            EAppTemplateType.Sidebar,
            EAppTemplateType.Slider,
            EAppTemplateType.ThreeDViewer,
            EAppTemplateType.ZoneLookup
        ],
        _a);
    /**
    * Contains methods for determining if a resource is compatible with a template app.
    * If resource is not compatible with template app type, will return the string that indicates why
    * it is not compatible.
    *
    * Because of Localization, we must pass in the "not compatible" strings that get returned
    *
    * const compatChecks = new CompatibilityChecks({
    *   resourceStrings:{ ... etc },
    *   requirementStrings:{ ... etc }
    * });
    *
    * // usage example
    * compatChecks.checkSpecificTemplates(webmap, EAppType.AttachmentViewer ---> (or just pass in the urlFragment(ex: "/apps/instant/3dviewer/index.html")))
    */
    var CompatibilityChecker = /** @class */ (function () {
        function CompatibilityChecker(props) {
            var _a, _b, _c;
            this._Template_to_Function_Map = (_a = {},
                _a[EAppTemplateType.AttachmentViewer] = this._testAttachmentsCondition,
                _a[EAppTemplateType.Charts] = this._testChartsCondition,
                _a[EAppTemplateType.ImageryApp] = this._testImageryCondition,
                _a[EAppTemplateType.InteractiveLegend] = this._testUnsupportedRenderers,
                _a[EAppTemplateType.Nearby] = this._testPopupDisabled,
                _a[EAppTemplateType.ZoneLookup] = this._testPopupDisabled,
                _a);
            this._requirementsMessagesMap = {};
            this._resourceMessagesMap = {};
            var requirementsMessages = props.requirementsMessages, resourceMessages = props.resourceMessages;
            this._requirementsMessagesMap = (_b = {},
                _b[ERequirementType.AttachmentsCondition] = requirementsMessages.AttachmentViewer,
                _b[ERequirementType.ChartsCondition] = requirementsMessages.ChartViewer,
                _b[ERequirementType.ImageryCondition] = requirementsMessages.ImageryViewer,
                _b[ERequirementType.UnsupportedRenderers_FeatureLayer] = requirementsMessages.InteractiveLegend,
                _b[ERequirementType.UnsupportedRenderers_Renderer] = requirementsMessages.InteractiveLegend,
                _b[ERequirementType.PopupDisabled] = requirementsMessages.Nearby,
                _b);
            this._resourceMessagesMap = (_c = {},
                _c[EAppTemplateType.AttachmentViewer] = resourceMessages.Webmap,
                _c[EAppTemplateType.Basic] = resourceMessages.WebmapOrWebscene,
                _c[EAppTemplateType.CategoryGallery] = resourceMessages.Group,
                _c[EAppTemplateType.Charts] = resourceMessages.Webmap,
                _c[EAppTemplateType.Countdown] = resourceMessages.WebmapOrWebscene,
                _c[EAppTemplateType.Exhibit] = resourceMessages.Webmap,
                _c[EAppTemplateType.ImageryApp] = resourceMessages.Webmap,
                _c[EAppTemplateType.InteractiveLegend] = resourceMessages.Webmap,
                _c[EAppTemplateType.Media] = resourceMessages.Webmap,
                _c[EAppTemplateType.Minimalist] = resourceMessages.Webmap,
                _c[EAppTemplateType.Nearby] = resourceMessages.Webmap,
                _c[EAppTemplateType.Portfolio] = resourceMessages.WebmapOrWebscene,
                _c[EAppTemplateType.Sidebar] = resourceMessages.Webmap,
                _c[EAppTemplateType.Slider] = resourceMessages.Webmap,
                _c[EAppTemplateType.ThreeDViewer] = resourceMessages.Webscene,
                _c[EAppTemplateType.ZoneLookup] = resourceMessages.Webmap,
                _c);
        }
        ///////////////////////////
        //// Public Methods
        ///////////////////////////
        /** Check one Resource for all possible not-compatible app templates */
        CompatibilityChecker.prototype.checkAllTemplates = function (resource) {
            return __awaiter(this, void 0, void 0, function () {
                var resourceType, appTemplateTypeKeys, checkPromises, checkResults, resultMap;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._identifyResource(resource)];
                        case 1:
                            resourceType = _a.sent();
                            appTemplateTypeKeys = Object.keys(EAppTemplateType);
                            checkPromises = appTemplateTypeKeys.map(function (key) {
                                return _this.checkSpecificTemplate(resource, EAppTemplateType[key], resourceType);
                            });
                            return [4 /*yield*/, Promise.all(checkPromises)];
                        case 2:
                            checkResults = _a.sent();
                            resultMap = new Map();
                            appTemplateTypeKeys.forEach(function (key, index) {
                                resultMap.set(EAppTemplateType[key], checkResults[index]);
                            });
                            return [2 /*return*/, resultMap];
                    }
                });
            });
        };
        /**
         * Check one Resource for any compatibility issues with a specific app template
        */
        CompatibilityChecker.prototype.checkSpecificTemplate = function (resource, template, resourceType) {
            return __awaiter(this, void 0, void 0, function () {
                var foundResourceType, _a, requirementFunc, requirement, msg;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(resourceType != null)) return [3 /*break*/, 1];
                            _a = resourceType;
                            return [3 /*break*/, 3];
                        case 1: return [4 /*yield*/, this._identifyResource(resource)];
                        case 2:
                            _a = _b.sent();
                            _b.label = 3;
                        case 3:
                            foundResourceType = _a;
                            if (!this._isTemplateCompatWithResource(foundResourceType, template)) return [3 /*break*/, 7];
                            if (resource === "group") { // skip groups --- there are no requirements checks yet
                                return [2 /*return*/, null];
                            }
                            // check requirement for template
                            return [4 /*yield*/, (resource === null || resource === void 0 ? void 0 : resource.loadAll())];
                        case 4:
                            // check requirement for template
                            _b.sent();
                            requirementFunc = this._Template_to_Function_Map[template];
                            if (requirementFunc == null) {
                                return [2 /*return*/, null];
                            }
                            requirement = requirementFunc(resource);
                            if (!((requirement === null || requirement === void 0 ? void 0 : requirement.then) != null)) return [3 /*break*/, 6];
                            return [4 /*yield*/, requirement];
                        case 5:
                            requirement = _b.sent();
                            _b.label = 6;
                        case 6:
                            msg = this._requirementsMessagesMap[requirement];
                            return [2 /*return*/, requirement != null ? msg : null];
                        case 7: 
                        // template is not compatible with resource
                        return [2 /*return*/, this._resourceMessagesMap[template]];
                    }
                });
            });
        };
        ///////////////////////////
        //// Private Methods
        ///////////////////////////
        CompatibilityChecker.prototype._identifyResource = function (resource) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(resource === "group")) return [3 /*break*/, 1];
                            return [2 /*return*/, EResourceType.Group];
                        case 1: return [4 /*yield*/, (resource === null || resource === void 0 ? void 0 : resource.loadAll())];
                        case 2:
                            _a.sent();
                            if (resource.portalItem.type === "Web Map") {
                                return [2 /*return*/, EResourceType.Webmap];
                            }
                            else if (resource.portalItem.type === "Web Scene") {
                                return [2 /*return*/, EResourceType.Webscene];
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /** Finds the EAppTemplateType[] that are not compatible with the resource */
        CompatibilityChecker.prototype._isTemplateCompatWithResource = function (resourceType, template) {
            return !EResourceType_to_AppType_Mapping[resourceType].includes(template);
        };
        CompatibilityChecker.prototype._testUnsupportedRenderers = function (webmap) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var atLeastOneSupportedRenderer, atLeastOneFeatureLayer;
                return __generator(this, function (_b) {
                    atLeastOneSupportedRenderer = false;
                    atLeastOneFeatureLayer = false;
                    (_a = webmap === null || webmap === void 0 ? void 0 : webmap.allLayers) === null || _a === void 0 ? void 0 : _a.map(function (layer) {
                        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                        var type = layer === null || layer === void 0 ? void 0 : layer.type;
                        if (type === "group") {
                            return;
                        }
                        if (type !== "feature") {
                            return;
                        }
                        atLeastOneFeatureLayer = atLeastOneFeatureLayer || true;
                        var featureLayer = layer;
                        var isLayerRendererSupported = true;
                        // PROPS SET BY ARCADE
                        var field2 = (_a = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _a === void 0 ? void 0 : _a.get("field2");
                        var field3 = (_b = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _b === void 0 ? void 0 : _b.get("field3");
                        var fieldDelimiter = (_c = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _c === void 0 ? void 0 : _c.get("fieldDelimiter");
                        if ((field2 || field3) && fieldDelimiter) {
                            isLayerRendererSupported = false;
                        }
                        if (((_d = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _d === void 0 ? void 0 : _d.type) === "unique-value" ||
                            ((_e = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _e === void 0 ? void 0 : _e.type) === "class-breaks") {
                            // CHECK VISUAL VARIABLES for color ramp, size ramp, opacity ramp
                            var renderer_1 = featureLayer.renderer;
                            (_f = renderer_1 === null || renderer_1 === void 0 ? void 0 : renderer_1.visualVariables) === null || _f === void 0 ? void 0 : _f.forEach(function (visualVariable) {
                                var _a, _b;
                                if (visualVariable.type === "size" ||
                                    visualVariable.type === "color" ||
                                    visualVariable.type === "opacity") {
                                    var rendererAuthoringInfoType = (_a = renderer_1 === null || renderer_1 === void 0 ? void 0 : renderer_1.authoringInfo) === null || _a === void 0 ? void 0 : _a.type;
                                    if (rendererAuthoringInfoType === "class-breaks-color" ||
                                        rendererAuthoringInfoType === "class-breaks-size" ||
                                        ((_b = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _b === void 0 ? void 0 : _b.type) === "unique-value") {
                                        return;
                                    }
                                    isLayerRendererSupported = false;
                                }
                            });
                        }
                        if (((_g = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _g === void 0 ? void 0 : _g.type) === "heatmap" ||
                            ((_h = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _h === void 0 ? void 0 : _h.type) === "dot-density") {
                            isLayerRendererSupported = false;
                        }
                        // SINGLE SYMBOL(UNIQUE SYMBOL) - CLUSTERING ENABLED.
                        // Drawing style is similar to Counts and Amounts (Size/Color) Classify Data Unchecked which is unsupported.
                        var simpleRenderer = (((_j = featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.renderer) === null || _j === void 0 ? void 0 : _j.type) === "simple"
                            ? featureLayer.renderer
                            : null);
                        var vvSizeArr = (_k = simpleRenderer === null || simpleRenderer === void 0 ? void 0 : simpleRenderer.visualVariables) === null || _k === void 0 ? void 0 : _k.filter(function (visualVariable) { return visualVariable.type === "size"; });
                        if ((simpleRenderer && (featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.featureReduction)) ||
                            ((vvSizeArr === null || vvSizeArr === void 0 ? void 0 : vvSizeArr.length) > 0 && (featureLayer === null || featureLayer === void 0 ? void 0 : featureLayer.featureReduction))) {
                            isLayerRendererSupported = false;
                        }
                        // *** accumulate supportedRenderer info ***
                        // (if isLayerRendererSupported is true, we know this layer is supported, and with the || it will turn atLeastOneSupportedRenderer to true)
                        atLeastOneSupportedRenderer = atLeastOneSupportedRenderer || isLayerRendererSupported;
                    });
                    if (!atLeastOneFeatureLayer) {
                        return [2 /*return*/, ERequirementType.UnsupportedRenderers_FeatureLayer];
                    }
                    else if (!atLeastOneSupportedRenderer) {
                        return [2 /*return*/, ERequirementType.UnsupportedRenderers_Renderer];
                    }
                    else {
                        return [2 /*return*/, null];
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * If there does not exist at least one layer in the webmap which has type "imagery" or "imagery-tile",
         *    return ERequirementType.ImageryCondition, else return null (Compatible)
         */
        CompatibilityChecker.prototype._testImageryCondition = function (webmap) {
            var _a;
            var atLeastOneImageryLayer = (_a = webmap === null || webmap === void 0 ? void 0 : webmap.allLayers) === null || _a === void 0 ? void 0 : _a.map(function (layer) {
                return layer.type === "imagery" || layer.type === "imagery-tile";
            }).reduce(function (acc, curr) { return acc || curr; }, false);
            return !atLeastOneImageryLayer ? ERequirementType.ImageryCondition : null;
        };
        /**
         * If there does not exist at least one layer in the webmap with attachments,
         *    return ERequirementType.AttachmentsCondition, else return null (Compatible)
         */
        CompatibilityChecker.prototype._testAttachmentsCondition = function (webmap) {
            return new Promise(function (res, rej) {
                var _a;
                var isPassing = false;
                var layerPromises = (0, promiseUtils_1.eachAlways)((_a = webmap === null || webmap === void 0 ? void 0 : webmap.allLayers) === null || _a === void 0 ? void 0 : _a.map(function (layer) {
                    return layer.load().then(function () {
                        var _a, _b, _c, _d;
                        if (layer.type === "feature") {
                            var featureLayer = layer;
                            if (((_b = (_a = featureLayer.capabilities) === null || _a === void 0 ? void 0 : _a.operations) === null || _b === void 0 ? void 0 : _b.supportsQueryAttachments) ||
                                ((_d = (_c = featureLayer.capabilities) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.supportsAttachment)) {
                                isPassing = isPassing || true;
                            }
                        }
                    });
                }));
                layerPromises.then(function () {
                    if (!isPassing) {
                        res(ERequirementType.AttachmentsCondition);
                    }
                    else {
                        res(null);
                    }
                });
            });
        };
        CompatibilityChecker.prototype._testChartsCondition = function (webmap) {
            var chartsAvailable = (webmap === null || webmap === void 0 ? void 0 : webmap.layers.filter(function (layer) { return layer.type === "feature"; }).some(function (flayer) {
                var flayerWithCharts = flayer.get("charts");
                return flayerWithCharts;
            })) ||
                (webmap === null || webmap === void 0 ? void 0 : webmap.allTables.filter(function (table) { return table.type === "feature"; }).some(function (featureTable) {
                    var fTableWithCharts = featureTable === null || featureTable === void 0 ? void 0 : featureTable.charts;
                    return fTableWithCharts;
                }));
            return !chartsAvailable ? ERequirementType.ChartsCondition : null;
        };
        /**
         * If all layers in the webmap have popups disabled,
         *    return EWebmapNotCompatible.PopupDisabled, else return null (Compatible)
         */
        CompatibilityChecker.prototype._testPopupDisabled = function (webmap) {
            var _a;
            var excludeTypes = new Collection_1.default(["tile", "base-tile", "imagery-tile", "vector-tile", "web-tile"]);
            var atLeastOnePopupEnabled = (_a = webmap === null || webmap === void 0 ? void 0 : webmap.allLayers) === null || _a === void 0 ? void 0 : _a.filter(function (layer) {
                return !excludeTypes.includes(layer.type);
            }).map(function (layer) {
                return layer.get("popupEnabled");
            }).reduce(function (acc, curr) { return acc || curr; }, false);
            return !atLeastOnePopupEnabled ? ERequirementType.PopupDisabled : null;
        };
        return CompatibilityChecker;
    }());
    exports.CompatibilityChecker = CompatibilityChecker;
});
