var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
define(["require", "exports", "esri/intl"], function (require, exports, intl_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.autoUpdateString = exports.autoUpdatedStrings = exports.handleT9N = void 0;
    function handleT9N(pattern, base, bundleLocation) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        (0, intl_1.registerMessageBundleLoader)((0, intl_1.createJSONLoader)({
                            pattern: pattern,
                            base: base,
                            location: new URL("./", window.location.href)
                        }));
                        return [4 /*yield*/, (0, intl_1.fetchMessageBundle)(bundleLocation)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    }
    exports.handleT9N = handleT9N;
    exports.autoUpdatedStrings = new Set();
    (0, intl_1.onLocaleChange)(function () {
        var bundleNames = Array.from(exports.autoUpdatedStrings, function (item) { return item.bundleName; });
        var bundleMap = {};
        Promise.all(bundleNames.map(function (bundleName) {
            return (0, intl_1.fetchMessageBundle)(bundleName).then(function (messages) {
                bundleMap[bundleName] = messages;
            });
        })).then(function () {
            exports.autoUpdatedStrings.forEach(function (val) {
                var obj = val.obj, property = val.property, bundleName = val.bundleName, key = val.key;
                obj[property] = getPathValue("".concat(bundleName, ".").concat(key), bundleMap);
            });
        });
    });
    function autoUpdateString(obj, property, bundleName, key) {
        var autoUpdatedString = { obj: obj, property: property, bundleName: bundleName, key: key };
        (0, intl_1.fetchMessageBundle)(bundleName).then(function (messages) {
            if (exports.autoUpdatedStrings.has(autoUpdatedString)) {
                obj[property] = messages[key];
            }
        });
        return {
            remove: function () {
                exports.autoUpdatedStrings.delete(autoUpdatedString);
            }
        };
    }
    exports.autoUpdateString = autoUpdateString;
    function getPathValue(str, obj) {
        return str.split('.').reduce(function (o, i) { return o[i]; }, obj);
    }
});
