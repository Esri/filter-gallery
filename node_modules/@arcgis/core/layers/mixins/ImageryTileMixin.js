/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../geometry.js";import{rasterRendererTypes as t}from"../../rasterRenderers.js";import r from"../../request.js";import i from"../../core/Logger.js";import{isNone as n,isSome as s}from"../../core/maybe.js";import{aliasOf as o}from"../../core/accessorSupport/decorators/aliasOf.js";import"../../core/arrayUtils.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import{subclass as l}from"../../core/accessorSupport/decorators/subclass.js";import{getInfo as d}from"../../geometry/support/spatialReferenceUtils.js";import{sanitizeUrl as m}from"../support/arcgisLayerUrl.js";import{url as u}from"../support/commonProperties.js";import p from"../support/DimensionalDefinition.js";import h from"../support/RasterJobHandler.js";import c from"../support/TileInfo.js";import{convertVectorFieldData as f}from"../support/rasterFunctions/vectorFieldUtils.js";import{normalizeRendererJSON as y,getDefaultInterpolation as b,getDefaultBandCombination as g,createDefaultRenderer as I}from"../../renderers/support/rasterRendererHelper.js";import v from"../../renderers/support/RasterSymbolizer.js";import{createStreamlinesMesh as J}from"../../views/2d/engine/flow/dataUtils.js";import _ from"../../geometry/Extent.js";import x from"../../geometry/SpatialReference.js";const S=i.getLogger("esri.layers.mixins.ImageryTileMixin"),R=i=>{let R=class extends i{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set url(e){this._set("url",m(e,S))}set renderer(e){this._set("renderer",e),this.updateRenderer()}async convertVectorFieldData(e,t){if(n(e))return null;const r=this._rasterJobHandler.instance,i=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:e,dataType:i},t):f(e,i)}async createStreamlinesMesh(e,t){const r=this._rasterJobHandler.instance;return r?r.createStreamlinesMesh(e,t):J(e.rendererSettings,e.flowData,s(t.signal)?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.rasterInfo;if(n(t))return e;let r=e.multidimensionalDefinition||this.multidimensionalDefinition;!n(r)&&r.length||(r=this._getDefaultSlice());const i=e.timeExtent||this.timeExtent;if(s(r)&&s(i)&&(s(i.start)||s(i.end))){var o,a;r=r.map((e=>e.clone()));const l=null==(o=t.variables.find((({name:e})=>e===r[0].variableName)))||null==(a=o.dimensions)?void 0:a.find((({name:e})=>"StdTime"===e)),d=r.find((({dimensionName:e})=>"StdTime"===e));if(!l||!d)return{...e,multidimensionalDefinition:null};const{start:m,end:u}=i,p=n(m)?null:m.getTime(),h=n(u)?null:u.getTime(),c=null!=p?p:h,f=null!=h?h:p;if(s(l.values)){const e=l.values.filter((e=>{if(Array.isArray(e)){if(c===f)return e[0]<=c&&e[1]>=c;const t=e[0]<=c&&e[1]>c||e[0]<f&&e[1]>=f,r=e[0]>=c&&e[1]<=f||e[0]<c&&e[1]>f;return t||r}return c===f?e===c:e>=c&&e<=f}));if(e.length){const t=e.sort(((e,t)=>{var r,i,n,s;if(c===f)return(null!=(n=e[0])?n:e)-(null!=(s=t[0])?s:t);return Math.abs((null!=(r=e[1])?r:e)-f)-Math.abs((null!=(i=t[1])?i:t)-f)}))[0];d.values=[t]}else r=null}else if(l.hasRegularIntervals&&l.extent){const[e,t]=l.extent;c>t||f<e?r=null:d.values=c===f?[c]:[Math.max(e,c),Math.min(t,f)]}}return{...e,multidimensionalDefinition:r}}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=y(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(e,t){const r=e&&e.pixelBlock;if(!(s(r)&&r.pixels&&r.pixels.length>0))return null;let i;await this.updateRenderer();const n=this._rasterJobHandler.instance,{bandIds:o}=this;return i=n?await n.symbolize({...e,simpleStretchParams:t,bandIds:o}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:o}),i}getTileUrl(e,t,r){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${r}`:""}getCompatibleTileInfo(e,t,r=!1){if(!this.loaded||n(t))return null;if(r&&e.equals(this.spatialReference))return this.tileInfo;const i=d(e);return c.create({size:256,spatialReference:e,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,o={}){if(o.requestAsImageElement){const n=this.getTileUrl(e,t,i);return r(n,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:o.signal}).then((e=>e.data))}if(s(this.rasterInfo.multidimensionalInfo)&&(o=this.normalizeRasterFetchOptions(o),n(o.multidimensionalDefinition))){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,i,r),pixelBlock:null}}return await this._initJobHandler(),"raster-shaded-relief"===this.renderer.type&&(o={...o,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,i,o)}async fetchPixels(e,t,r,i={}){return s(this.rasterInfo.multidimensionalInfo)&&(i=this.normalizeRasterFetchOptions(i),n(i.multidimensionalDefinition))?{extent:e,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(e,t,r,i))}async identify(e,t={}){return s(this.rasterInfo.multidimensionalInfo)&&(t=this.normalizeRasterFetchOptions(t),n(t.multidimensionalDefinition))?{location:e,value:null}:this.raster.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var e;const t=this.rasterInfo.multidimensionalInfo;if(!s(t)||"standard-time"!==this.rasterInfo.dataType)return!1;const r=null==(e=this.multidimensionalDefinition[0])?void 0:e.variableName;return t.variables.some((e=>e.name===r&&e.dimensions.some((e=>"StdTime"===e.name))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=this._getDefaultSlice()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new h;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer()})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(null==this.interpolation){var e;const t=b(this.rasterInfo,this.raster.tileType,null==(e=this.sourceJSON)?void 0:e.defaultResamplingMethod);this._set("interpolation",t)}}_getDefaultSlice(){const{multidimensionalInfo:e}=this.raster.rasterInfo;if(!s(e))return null;const t=e.variables[0];return t.dimensions.map((e=>{var r,i;return new p({variableName:t.name,dimensionName:e.name,values:[null!=(r=null==(i=e.values)?void 0:i[0])?r:e.extent[0]],isSlice:!0})}))}_configDefaultRenderer(){const e=this.raster.rasterInfo;var t;(this.bandIds||(this.bandIds=g(e)),this.renderer)||(this.renderer=I(e,{bandIds:this.bandIds,variableName:s(this.multidimensionalDefinition)?null==(t=this.multidimensionalDefinition[0])?void 0:t.variableName:null}));this.symbolizer?(this.symbolizer.rendererJSON=y(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new v({rendererJSON:this.renderer.toJSON(),rasterInfo:e});const r=this.symbolizer.bind();r.success||S.warn("imagery-tile-mixin",r.error||"The given renderer is not supported by the layer.")}};return e([a()],R.prototype,"_cachedRendererJson",void 0),e([a()],R.prototype,"_compatibleFullExtent",void 0),e([a()],R.prototype,"_rasterJobHandler",void 0),e([a()],R.prototype,"bandIds",void 0),e([a({json:{origins:{service:{read:{source:"copyrightText"}}}}})],R.prototype,"copyright",void 0),e([a({type:_,json:{read:!1}}),o("rasterInfo.extent")],R.prototype,"fullExtent",void 0),e([a()],R.prototype,"interpolation",void 0),e([a()],R.prototype,"ioConfig",void 0),e([a({type:[p]})],R.prototype,"multidimensionalDefinition",void 0),e([a()],R.prototype,"raster",void 0),e([a({readOnly:!0}),o("raster.rasterInfo")],R.prototype,"rasterInfo",void 0),e([a()],R.prototype,"sourceJSON",void 0),e([a({type:x,json:{read:!1}}),o("rasterInfo.spatialReference")],R.prototype,"spatialReference",void 0),e([a({type:c,json:{read:!1}}),o("rasterInfo.storageInfo.tileInfo")],R.prototype,"tileInfo",void 0),e([a(u)],R.prototype,"url",null),e([a({types:t})],R.prototype,"renderer",null),e([a()],R.prototype,"symbolizer",void 0),R=e([l("esri.layers.ImageryTileMixin")],R),R};export{R as ImageryTileMixin};
