/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import e from"../../../core/Error.js";import{unwrap as r,isSome as s}from"../../../core/maybe.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";import a from"../PixelBlock.js";import n from"../RasterInfo.js";import l from"../RasterStorageInfo.js";import f from"./BaseRaster.js";import{parseSpatialReference as c,parsePAMInfo as p}from"./pamParser.js";import{getElement as m,getElementValue as h}from"./xmlUtilities.js";import{isPlatformLittleEndian as u}from"../rasterFormats/utils.js";import{estimateStatisticsFromHistograms as g}from"../rasterFunctions/pixelUtils.js";import d from"../../../geometry/SpatialReference.js";import y from"../../../geometry/Extent.js";import x from"../../../geometry/Point.js";const w=new Map;w.set("Int8","s8"),w.set("UInt8","u8"),w.set("Int16","s16"),w.set("UInt16","u16"),w.set("Int32","s32"),w.set("UInt32","u32"),w.set("Float32","f32"),w.set("Float64","f32"),w.set("Double64","f32");const I=new Map;I.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),I.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),I.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),I.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let b=class extends f{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(t){var e;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const o=t?r(t.signal):null,i=await this.request(this.url,{responseType:"xml",signal:o}),{rasterInfo:a,files:n}=this._parseHeader(i.data);if(-1===(null==(e=this.ioConfig.skipExtensions)?void 0:e.indexOf("aux.xml"))){const e=await this._fetchAuxiliaryData(t);var l;if(null!=e)a.statistics=null!=(l=e.statistics)?l:a.statistics,a.histograms=e.histograms,e.histograms&&!s(a.statistics)&&(a.statistics=g(e.histograms))}this._set("rasterInfo",a),this._files=n;const f=await this.request(n.index,{responseType:"array-buffer",signal:o});this._storageIndex=this._parseIndex(f.data);const{blockWidth:c,blockHeight:p}=this.rasterInfo.storageInfo,m=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:u}=this.rasterInfo,d=[],y=this._getBandSegmentCount();let x=0,w=-1;for(;x<this._storageIndex.length;){w++;const t=Math.ceil(h/c/m**w)-1,e=Math.ceil(u/p/m**w)-1;x+=(t+1)*(e+1)*y*4,d.push({maxRow:e,maxCol:t,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=d,w>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=w),this.updateTileInfo()}async fetchRawTile(t,e,r,o={}){const{blockWidth:i,blockHeight:n,blockBoundary:l}=this.rasterInfo.storageInfo,f=l[t];if(!f||f.maxRow<e||f.maxCol<r||f.minRow>e||f.minCol>r)return null;const{bandCount:c,pixelType:p}=this.rasterInfo,{ranges:m,actualTileWidth:h,actualTileHeight:u}=this._getTileLocation(t,e,r);if(!m||0===m.length)return null;if(0===m[0].from&&0===m[0].to){const t=new Uint8Array(i*n);return new a({width:i,height:n,pixels:null,mask:t,validPixelCount:0})}const{bandIds:g}=this.ioConfig,d=this._getBandSegmentCount(),y=[];let x=0;for(x=0;x<d;x++)(!g||g.indexOf[x]>-1)&&y.push(this.request(this._files.data,{range:{from:m[x].from,to:m[x].to},responseType:"array-buffer",signal:o.signal}));const w=await Promise.all(y),b=w.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),A=new Uint8Array(b);let F=0;for(x=0;x<d;x++)A.set(new Uint8Array(w[x].data),F),F+=w[x].data.byteLength;const _=I.get(this.rasterInfo.storageInfo.compression).decoderFormat,R=await this.decodePixelBlock(A.buffer,{width:i,height:n,format:_,planes:(null==g?void 0:g.length)||c,pixelType:p});if(s(this.rasterInfo.noDataValue)&&"lerc"!==_&&!R.mask){const t=this.rasterInfo.noDataValue[0];if(null!=t){const e=R.width*R.height,r=new Uint8Array(e);if(Math.abs(t)>1e24)for(x=0;x<e;x++)Math.abs((R.pixels[0][x]-t)/t)>1e-6&&(r[x]=1);else for(x=0;x<e;x++)R.pixels[0][x]!==t&&(r[x]=1);R.mask=r}}let j=0,k=0;if(h!==i||u!==n){let t=R.mask;if(t)for(x=0;x<n;x++)if(k=x*i,x<u)for(j=h;j<i;j++)t[k+j]=0;else for(j=0;j<i;j++)t[k+j]=0;else for(t=new Uint8Array(i*n),R.mask=t,x=0;x<u;x++)for(k=x*i,j=0;j<h;j++)t[k+j]=1}return R}_parseIndex(t){if(t.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let e,r,s,o,i,a;if(u){for(r=new Uint8Array(t),o=new ArrayBuffer(t.byteLength),s=new Uint8Array(o),i=0;i<t.byteLength/4;i++)for(a=0;a<4;a++)s[4*i+a]=r[4*i+3-a];e=new Uint32Array(o)}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return I.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,r){const{blockWidth:s,blockHeight:o,pyramidScalingFactor:i}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let f,c,p,m=0,h=0;for(p=0;p<t;p++)h=i**p,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),m+=f*c;h=i**t,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),m+=e*f+r,m*=4*l;const u=this._storageIndex.subarray(m,m+4*l);let g=0,d=0;const y=[];for(let x=0;x<l;x++)g=u[4*x+0]*2**32+u[4*x+1],d=g+u[4*x+2]*2**32+u[4*x+3],y.push({from:g,to:d});return{ranges:y,actualTileWidth:r<f-1?s:Math.ceil(a/h)-s*(f-1),actualTileHeight:e<c-1?o:Math.ceil(n/h)-o*(c-1)}}_parseHeader(t){const r=m(t,"MRF_META/Raster");if(!r)throw new e("mrf:open","not a valid MRF format");const s=m(r,"Size"),o=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),a=parseInt(s.getAttribute("c"),10),f=(h(r,"Compression")||"none").toLowerCase();if(!I.has(f))throw new e("mrf:open","currently does not support compression "+f);const p=h(r,"DataType")||"UInt8",u=w.get(p);if(null==u)throw new e("mrf:open","currently does not support pixel type "+p);const g=m(r,"PageSize"),b=parseInt(g.getAttribute("x"),10),A=parseInt(g.getAttribute("y"),10),F=m(r,"DataValues");let _,R;F&&(R=F.getAttribute("NoData"),null!=R&&(_=R.trim().split(" ").map((t=>parseFloat(t)))));if(m(t,"MRF_META/CachedSource"))throw new e("mrf:open","currently does not support MRF referencing other data files");const j=m(t,"MRF_META/GeoTags"),k=m(j,"BoundingBox");let M,S=!1;if(null!=k){const t=parseFloat(k.getAttribute("minx")),e=parseFloat(k.getAttribute("miny")),r=parseFloat(k.getAttribute("maxx")),s=parseFloat(k.getAttribute("maxy")),o=h(j,"Projection")||"";let i;if("LOCAL_CS[]"!==o)if(o.toLowerCase().startsWith("epsg:")){const t=Number(o.slice(5));isNaN(t)||0===t||(i=new d({wkid:t}))}else i=c(o);else S=!0,i=new d({wkid:3857});M=new y(t,e,r,s),M.spatialReference=i}else S=!0,M=new y({xmin:-.5,ymin:.5-i,xmax:o-.5,ymax:.5,spatialReference:new d({wkid:3857})});const T=m(t,"MRF_META/Rsets"),C=parseInt(T&&T.getAttribute("scale")||"2",10),U=M.spatialReference,B=new l({origin:new x({x:M.xmin,y:M.ymax,spatialReference:U}),blockWidth:b,blockHeight:A,pyramidBlockWidth:b,pyramidBlockHeight:A,compression:f,pyramidScalingFactor:C}),v=new x({x:M.width/o,y:M.height/i,spatialReference:U}),L=new n({width:o,height:i,extent:M,isPseudoSpatialReference:S,spatialReference:U,bandCount:a,pixelType:u,pixelSize:v,noDataValue:_,storageInfo:B}),E=h(t,"datafile"),P=h(t,"IndexFile");return{rasterInfo:L,files:{mrf:this.url,index:P||this.url.replace(".mrf",".idx"),data:E||this.url.replace(".mrf",I.get(f).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==t?void 0:t.signal});return p(e)}catch{return null}}};t([o()],b.prototype,"_files",void 0),t([o()],b.prototype,"_storageIndex",void 0),t([o({type:String,json:{write:!0}})],b.prototype,"datasetFormat",void 0),b=t([i("esri.layers.support.rasterIO.MRFRaster")],b);const A=b;export{A as default};
