/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import e from"../../../core/Error.js";import{unwrap as r}from"../../../core/maybe.js";import{eachAlways as s,createAbortError as a}from"../../../core/promiseUtils.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";import n from"./BaseRaster.js";import l from"./InMemoryRaster.js";import{parsePAMInfo as m}from"./pamParser.js";import{getFormat as p}from"../rasterFormats/RasterCodec.js";import{estimateStatisticsFromHistograms as c}from"../rasterFunctions/pixelUtils.js";import f from"../rasterTransforms/PolynomialTransform.js";import u from"../../../geometry/SpatialReference.js";import h from"../../../geometry/Extent.js";let d=class extends n{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:r,statistics:s,histograms:a,transform:o}=await this._fetchAuxiliaryData(t);const i=!r;i&&(r=new u({wkid:3857})),null!=a&&a.length&&null==s&&(s=c(a));const{width:n,height:m}=e;let p=new h({xmin:-.5,ymin:.5-m,xmax:n-.5,ymax:.5,spatialReference:r});const f=o?o.forwardTransform(p):p;let d=!0;if(o){const t=o.forwardCoefficients;d=t&&0===t[1]&&0===t[2],d&&(o=null,p=f)}const y=new l({data:{extent:f,nativeExtent:p,transform:o,pixelBlock:e,statistics:s,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:i}});await y.open(),this._set("rasterInfo",y.rasterInfo),this._inMemoryRaster=y}fetchRawTile(t,e,r,s={}){return this._inMemoryRaster.fetchRawTile(t,e,r,s)}async _fetchData(t){const{data:r}=await this.request(this.url,{responseType:"array-buffer",signal:null==t?void 0:t.signal}),s=p(r).toUpperCase();if("JPG"!==s&&"PNG"!==s&&"GIF"!==s&&"BMP"!==s)throw new e("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);return await this.decodePixelBlock(r,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(t){var e,o;const i=r(null==t?void 0:t.signal),n=null!=(e=this.ioConfig.skipExtensions)?e:[],l=n.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:i}),p=this.datasetFormat,c="JPG"===p?"jgw":"PNG"===p?"pgw":"BMP"===p?"bpw":null,u=n.indexOf(c)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+c,{responseType:"text",signal:i}),h=await s([l,u]);if(null!=i&&i.aborted)throw a();const d=m(null==(o=h[0].value)?void 0:o.data);if(!d.transform){const t=h[1].value?h[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;d.transform=6===(null==t?void 0:t.length)?new f({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null}return d}};t([o({type:String,json:{write:!0}})],d.prototype,"datasetFormat",void 0),d=t([i("esri.layers.support.rasterDatasets.ImageAuxRaster")],d);const y=d;export{y as default};
