/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import t from"../../../core/Error.js";import r from"./CloudRaster.js";import e from"./ImageAuxRaster.js";import s from"./ImageServerRaster.js";import o from"./MRFRaster.js";import a from"./TIFFRaster.js";const c=new Map;c.set("CRF",{desc:"Cloud Raster Format",constructor:r}),c.set("MRF",{desc:"Meta Raster Format",constructor:o}),c.set("TIFF",{desc:"GeoTIFF",constructor:a}),c.set("RasterTileServer",{desc:"Raster Tile Server",constructor:s}),c.set("JPG",{desc:"JPG Raster Format",constructor:e}),c.set("PNG",{desc:"PNG Raster Format",constructor:e}),c.set("GIF",{desc:"GIF Raster Format",constructor:e}),c.set("BMP",{desc:"BMP Raster Format",constructor:e});class n{static get supportedFormats(){const t=new Set;return c.forEach(((r,e)=>t.add(e))),t}static async open(r){const{url:e,ioConfig:s,sourceJSON:o}=r;let a=r.datasetFormat;null==a&&e.lastIndexOf(".")&&(a=e.slice(e.lastIndexOf(".")+1).toUpperCase()),"OVR"===a||"TIF"===a?a="TIFF":"JPG"!==a&&"JPEG"!==a&&"JFIF"!==a||(a="JPG"),e.toLowerCase().indexOf("/imageserver")>-1&&-1===e.toLowerCase().indexOf("/wcsserver")&&(a="RasterTileServer");const n={url:e,sourceJSON:o,datasetFormat:a,ioConfig:s||{bandIds:null,sampling:null}};let i,u;if(this.supportedFormats.has(a))return i=c.get(a).constructor,u=new i(n),await u.open({signal:r.signal}),u;if(a)throw new t("rasterfactory:open","not a supported format "+a);const l=Array.from(c.keys());let m=0;const F=function(){return a=l[m++],a?(i=c.get(a).constructor,u=new i(n),u.open({signal:r.signal}).then((()=>u)).catch((()=>F()))):null};return F()}static register(t,r,e){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:r,constructor:e})}}export{n as default};
