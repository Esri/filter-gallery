/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import"../../geometry.js";import{isSome as r,unwrap as e}from"../../core/maybe.js";import t from"../../geometry/support/GeographicTransformation.js";import o from"./PixelBlock.js";import{decode as s}from"./rasterFormats/RasterCodec.js";import{estimateStatisticsHistograms as i,split as a,mosaic as n,approximateTransform as l,getLocalArithmeticNorthRotations as m}from"./rasterFunctions/pixelUtils.js";import{requirePE as c,load as f,getProjectionOffsetGrid as p}from"./rasterFunctions/rasterProjectionHelper.js";import{convertVectorFieldData as u,convertToLocalDirections as d}from"./rasterFunctions/vectorFieldUtils.js";import{readTransform as S}from"./rasterTransforms/utils.js";import h from"../../renderers/support/RasterSymbolizer.js";import{createStreamlinesMesh as x}from"../../views/2d/engine/flow/dataUtils.js";import y from"../../geometry/Extent.js";class O{convertVectorFieldData(e){const t=o.fromJSON(e.pixelBlock),s=u(t,e.type);return Promise.resolve(r(s)&&s.toJSON())}async decode(r){const e=await s(r.data,r.options);return e&&e.toJSON()}symbolize(e){e.pixelBlock=o.fromJSON(e.pixelBlock),e.extent=e.extent?y.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(r(t)&&t.toJSON())}async updateSymbolizer(r){var e;this.symbolizer=h.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===(null==(e=this.symbolizer)?void 0:e.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=r.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(o.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r(t)&&t.toJSON())}estimateStatisticsHistograms(r){const e=i(o.fromJSON(r.srcPixelBlock));return Promise.resolve(e)}split(r){const e=a(o.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return e&&e.forEach(((r,t)=>{e.set(t,null==r?void 0:r.toJSON())})),Promise.resolve(e)}async mosaicAndTransform(r){var t;const s=r.srcPixelBlocks.map((r=>r?new o(r):null)),i=n(s,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let a,c=i;return r.coefs&&(c=l(i,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(a=m(r.destDimension,r.gcsGrid),c=e(d(c,r.isUV?"vector-uv":"vector-magdir",a))),{pixelBlock:null==(t=c)?void 0:t.toJSON(),localNorthDirections:a}}async createStreamlinesMesh(r,e){const t={data:new Float32Array(r.flowData.buffer),width:r.flowData.width,height:r.flowData.height},{vertexData:o,indexData:s}=await x(r.rendererSettings,t,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:s.buffer},transferList:[o.buffer,s.buffer]}}async getProjectionOffsetGrid(r){const e=y.fromJSON(r.projectedExtent),o=y.fromJSON(r.srcBufferExtent);let s=null;r.datumTransformationSteps&&(s=new t({steps:r.datumTransformationSteps})),(r.includeGCSGrid||c(e.spatialReference,o.spatialReference,s))&&await f();const i=r.rasterTransform?S(r.rasterTransform):null;return p({...r,projectedExtent:e,srcBufferExtent:o,datumTransformation:s,rasterTransform:i})}}export{O as default};
