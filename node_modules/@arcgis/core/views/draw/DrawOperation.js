/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../core/Evented.js";import{HandleOwner as i}from"../../core/HandleOwner.js";import{clone as r}from"../../core/lang.js";import{isNone as s,destroyMaybe as n,removeMaybe as a,isSome as o,abortMaybe as p}from"../../core/maybe.js";import{createTask as h}from"../../core/promiseUtils.js";import{createScreenPoint as c}from"../../core/screenUtils.js";import{property as d}from"../../core/accessorSupport/decorators/property.js";import"../../core/accessorSupport/ensureType.js";import{subclass as l}from"../../core/accessorSupport/decorators/subclass.js";import{pointEquals as m}from"../../layers/graphics/dehydratedFeatureComparison.js";import{ViewingMode as g}from"../ViewingMode.js";import{DrawManipulator as u}from"./DrawManipulator.js";import{defaultDrawingMode as y}from"./DrawingMode.js";import{createCoordinateHelper as v}from"../interactive/coordinateHelper.js";import{createManipulatorDragEventPipeline as _}from"../interactive/dragEventPipeline.js";import{EditGeometry as x,Component as f}from"../interactive/editGeometry/EditGeometry.js";import{EditGeometryOperations as T}from"../interactive/editGeometry/EditGeometryOperations.js";import{SnappingContext as V}from"../interactive/snapping/SnappingContext.js";import{SnappingPipeline as S}from"../interactive/snapping/SnappingDragPipelineStep.js";import{TaskPriority as w,ImmediateTask as M}from"../support/Scheduler.js";let b=class extends(t.EventedMixin(i)){constructor(e){super(e),this._createOperationCompleted=!1,this._pointerDownStates=new Set,this._snappingPipeline=new S,this._snappingTask=null,this._stagedVertex=null,this.snapToSceneEnabled=null,s(e.elevationInfo)&&(this.elevationInfo={mode:e.hasZ?"absolute-height":"on-the-ground",offset:0})}initialize(){var e,t;this.coordinateHelper=v(this.hasZ,this.hasM,this.view.spatialReference);const i="3d"===this.view.type?null==(e=this.view)||null==(t=e.resourceController)?void 0:t.scheduler:null;this._frameTask=i?i.registerTask(w.SNAPPING):M;const r="viewingMode"in this.view.state?this.view.state.viewingMode:g.Local,s="segment"===this.geometryType||"multipoint"===this.geometryType?"polyline":this.geometryType;this._editGeometryOperations=new T(new x(s,this.coordinateHelper,r)),this._activeComponent=new f(this.spatialReference,r),this._editGeometryOperations.data.components.push(this._activeComponent),this.handles.add(this._editGeometryOperations.on(["vertex-add","vertex-update","vertex-remove"],(e=>{const t=e.vertices.map((e=>({componentIndex:0,vertexIndex:e.index,coordinates:this.coordinateHelper.vectorToArray(e.pos)}))),i=t.map((e=>e.coordinates));switch(e.type){case"vertex-add":this.emit(e.type,{...e,added:i,vertices:t});break;case"vertex-update":this.emit(e.type,{...e,updated:i,vertices:t});break;case"vertex-remove":this.emit(e.type,{...e,removed:i,vertices:t})}}))),this._manipulator=new u({grabbableForEvent:e=>"click"!==this.drawingMode||"touch"===e.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size}),this.manipulators.add(this._manipulator),this._manipulator.grabbable="point"!==this.geometryType,this.handles.add([this._createManipulatorDragPipeline(this._manipulator),this._manipulator.events.on("immediate-click",(e=>this._onImmediateClick(e))),this._manipulator.events.on("immediate-double-click",(e=>this._onImmediateDoubleClick(e)))])}destroy(){this._editGeometryOperations=n(this._editGeometryOperations),this._frameTask=a(this._frameTask)}get _snappingEnabled(){return o(this.snappingManager)&&this.snappingManager.options.effectiveEnabled}get canRedo(){return this._editGeometryOperations.canRedo}get canUndo(){return this._editGeometryOperations.canUndo}get committedVertices(){return this._activeComponent.vertices.map((e=>this.coordinateHelper.vectorToArray(e.pos)))}set drawingMode(e){this._set("drawingMode",null!=e?e:y)}get hasStagedVertex(){return o(this._stagedVertex)}get interactive(){return this._manipulator.interactive}set interactive(e){this._manipulator.interactive=e}get isCompleted(){return this._createOperationCompleted}get numCommittedVertices(){return this._activeComponent.vertices.length}get numVertices(){return o(this._stagedVertex)?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}get spatialReference(){return this.view.spatialReference}get stagedVertex(){return this._stagedVertex}set stagedVertex(e){if(s(e))this.discardStagedVertex();else if(!o(this._stagedVertex)||!m(this._stagedVertex,e)){if(s(this._stagedVertex))this._stagedVertex=r(e);else{if(m(this._stagedVertex,e))return;this._stagedVertex.x=e.x,this._stagedVertex.y=e.y,this._stagedVertex.z=e.z,this._stagedVertex.m=e.m,this._stagedVertex.hasZ=e.hasZ,this._stagedVertex.hasM=e.hasM,this._stagedVertex.spatialReference=e.spatialReference}this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(e)}],operation:"apply",type:"vertex-update"})}}get updating(){return this.updatingHandles.updating}get vertices(){const e=this.committedVertices;return o(this._stagedVertex)&&e.push(this.coordinateHelper.pointToArray(this._stagedVertex)),e}cancel(){this.complete({aborted:!0})}commitStagedVertex(){if(this._snappingTask=p(this._snappingTask),o(this._stagedVertex)){const e=this._stagedVertex;this._stagedVertex=null,this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e))}}complete(e){const t=e&&e.aborted||!1;p(this._snappingTask),o(this.snappingManager)&&this.snappingManager.doneSnapping(),"segment"===this.geometryType||"point"===this.geometryType?this.commitStagedVertex():this.discardStagedVertex();const i="multipoint"===this.geometryType&&0===this.numVertices||"polyline"===this.geometryType&&this.numVertices<2||"polygon"===this.geometryType&&this.numVertices<3;this._createOperationCompleted=!i,(this.isCompleted||t)&&this.emit("complete",{vertices:this.vertices.map(((e,t)=>({componentIndex:0,vertexIndex:t,coordinates:e}))),aborted:t,type:"complete"})}discardStagedVertex(){this._stagedVertex=null}onInputEvent(e){switch(e.type){case"pointer-down":this._pointerDownStates.add(e.pointerId);break;case"pointer-up":this._pointerDownStates.delete(e.pointerId)}switch(e.type){case"pointer-move":return this._onPointerMove(e);case"hold":return this._onHold(e)}}redo(){this._editGeometryOperations.redo()}undo(){o(this.snappingManager)&&this.snappingManager.doneSnapping(),this._editGeometryOperations.undo()}_closeOnClickVertexIndex(e){const t=this._activeComponent;if("polygon"===this.geometryType&&t.vertices.length>2){if(this._vertexWithinPointerDistance(t.vertices[0].pos,e))return 0;if(this._vertexWithinPointerDistance(t.vertices[t.vertices.length-1].pos,e))return t.vertices.length-1}return null}_createManipulatorDragPipeline(e){switch(this.drawingMode){case"click":return this._createManipulatorDragPipelineClick(e);case"freehand":return this._createManipulatorDragPipelineFreehand(e);case"hybrid":return this._createManipulatorDragPipelineHybrid(e)}}_createManipulatorDragPipelineClick(e){return _(e,((e,t,i,r)=>{const s="touch"===r&&this._snappingEnabled;!this.isCompleted&&s&&(t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(this.stagedVertex=e.mapStart,("segment"===this.geometryType||s&&0===this.numVertices)&&this.commitStagedVertex()),e))).next(this._snappingPipeline.createSnapDragEventPipelineStep({predicate:()=>s,cancel:i,snappingManager:this.snappingManager,snappingContext:new V({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:r,visualizer:this.snappingVisualizer}),updatingHandles:this.updatingHandles}),this._snappingPipeline.next).next((e=>(s&&(this.stagedVertex=e.mapEnd,"end"===e.action&&this.commitStagedVertex()),e))).next((e=>("end"===e.action&&("segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()),e))),i.next((()=>{s&&o(this.snappingManager)&&this.snappingManager.doneSnapping()})))}))}_createManipulatorDragPipelineFreehand(e){return _(e,((e,t)=>{this.isCompleted||t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(s(this.stagedVertex)&&(this.stagedVertex=e.mapStart),"segment"===this.geometryType&&this.commitStagedVertex()),e))).next((e=>{switch(e.action){case"start":case"update":this.stagedVertex=e.mapEnd,"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case"end":this.complete()}return e}))}))}_createManipulatorDragPipelineHybrid(e){return _(e,((e,t)=>{this.isCompleted||t.next(this._screenToMapDragEventStep()).next((e=>("start"===e.action&&(s(this.stagedVertex)&&(this.stagedVertex=e.mapStart),this.commitStagedVertex()),e))).next((e=>{switch(e.action){case"start":case"update":this.stagedVertex=e.mapEnd,"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();break;case"end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return e}))}))}_getDrawSurface(){if(s(this.elevationDrawSurface))return this.drawSurface;if(!this.coordinateHelper.hasZ)return this.elevationDrawSurface.defaultZ=null,this.elevationDrawSurface;let e=this.defaultZ,t=!1;o(this.elevationInfo)&&"absolute-height"===this.elevationInfo.mode&&(t=!0),o(this.snapToSceneEnabled)&&(t=this.snapToSceneEnabled),o(this.elevationInfo)&&"on-the-ground"===this.elevationInfo.mode&&(t=!1);const i=this._activeComponent.vertices.length;return("segment"===this.geometryType||"polygon"===this.geometryType)&&i>0&&(e=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),t=!1),t?this.drawSurface:(this.elevationDrawSurface.defaultZ=e,this.elevationDrawSurface)}_mapToScreen(e){return this._getDrawSurface().mapToScreen(e)}_onHold(e){p(this._snappingTask),"click"===this.drawingMode&&"touch"===e.pointerType&&this._snappingEnabled&&(this.stagedVertex=e.mapPoint),e.stopPropagation()}_onImmediateClick(e){if("mouse"===e.pointerType&&2===e.button||this._manipulator.dragging)return;const t=this._activeComponent,i=this._closeOnClickVertexIndex(e.screenPoint);if(o(i))return e.stopPropagation(),this.discardStagedVertex(),void this.complete();const r=this._screenToMap(e.screenPoint);if(o(r))switch(this.drawingMode){case"freehand":"point"===this.geometryType&&(this.hasStagedVertex?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(r)),this.complete());break;case"click":case"hybrid":this._snappingTask=p(this._snappingTask),this.hasStagedVertex?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(r)),("point"===this.geometryType||"segment"===this.geometryType&&2===t.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===t.vertices.length)&&this.complete()}e.stopPropagation()}_onImmediateDoubleClick(e){this._manipulator.dragging||"point"===this.geometryType||(this.complete(),e.stopPropagation())}_onPointerMove(e){if(p(this._snappingTask),this._manipulator.dragging||this._pointerDownStates.has(e.pointerId)||this._manipulator.grabbing||!this._manipulator.interactive)return;const t=c(e.x,e.y),i=this._closeOnClickVertexIndex(t);if(o(i)){this.discardStagedVertex();const e={componentIndex:0,vertexIndex:i,coordinates:this.coordinateHelper.vectorToArray(this._activeComponent.vertices[i].pos)};this.emit("cursor-update",{updated:null,vertices:[e],operation:"apply",type:"vertex-update"})}else{const i=this._screenToMap(t);if(this._manipulator.cursor=o(i)?"crosshair":null,o(i))if(o(this.snappingManager)){const t=this.snappingManager,r=new V({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:e.pointerType,visualizer:this.snappingVisualizer});this.stagedVertex=t.update(i,r),this._snappingTask=h((async e=>{const s=await this._frameTask.schedule((()=>t.snap(i,r,e)),e);s.valid&&await this._frameTask.schedule((()=>{this.stagedVertex=s.apply()}),e)})),this.updatingHandles.addPromise(this._snappingTask.promise)}else this.stagedVertex=i}e.stopPropagation()}_screenToMap(e){return this._getDrawSurface().screenToMap(e)}_screenToMapDragEventStep(){let e=null;return t=>{if("start"===t.action&&(e=this._screenToMap(t.screenStart)),s(e))return null;const i=this._screenToMap(t.screenEnd);return o(i)?{...t,mapStart:e,mapEnd:i}:null}}_vertexWithinPointerDistance(e,t){const i=25,r=this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(e));return!!o(r)&&k(r,t,i)}};function k(e,t,i){const r=e.x-t.x,s=e.y-t.y;return r*r+s*s<=i}e([d()],b.prototype,"defaultZ",void 0),e([d({value:y})],b.prototype,"drawingMode",null),e([d({constructOnly:!0})],b.prototype,"elevationDrawSurface",void 0),e([d({constructOnly:!0})],b.prototype,"elevationInfo",void 0),e([d({constructOnly:!0})],b.prototype,"geometryType",void 0),e([d({constructOnly:!0})],b.prototype,"hasM",void 0),e([d({constructOnly:!0})],b.prototype,"hasZ",void 0),e([d({constructOnly:!0})],b.prototype,"manipulators",void 0),e([d({constructOnly:!0})],b.prototype,"drawSurface",void 0),e([d({constructOnly:!0})],b.prototype,"snappingManager",void 0),e([d({constructOnly:!0})],b.prototype,"snappingVisualizer",void 0),e([d()],b.prototype,"snapToSceneEnabled",void 0),e([d({readOnly:!0})],b.prototype,"updating",null),e([d({constructOnly:!0})],b.prototype,"view",void 0),b=e([l("esri.views.draw.DrawOperation")],b);export{b as DrawOperation};
