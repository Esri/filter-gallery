/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{isNone as t}from"../../../../core/maybe.js";import{create as e,containsPointWithMargin as s}from"../../../../geometry/support/aaBoundingRect.js";import{polygonCentroid as r}from"../../../../geometry/support/centroid.js";import{isPolygon as o,isPolyline as i,isMultipoint as n}from"../../../../geometry/support/jsonUtils.js";import{getSpatialReferenceMinMaxX as l}from"../../../../geometry/support/normalizeUtilsCommon.js";import{quantizePoint as h,quantizeGeometry as a}from"../../../../geometry/support/quantizationUtils.js";import{convertFromPolyline as m,generalizeOptimizedGeometry as u,quantizeOptimizedGeometry as p,convertToPolyline as c}from"../../../../layers/graphics/featureConversionUtils.js";import g from"../../../../layers/graphics/OptimizedGeometry.js";import{isMarkerSymbol as y,isTextSymbol as f}from"./graphicsUtils.js";const d=new g,z=new g,b="esriGeometryPolyline";function j(t){t.coords.length=0,t.lengths.length=0}class _{constructor(){this.bounds=e(),this.graphic=null}static acquire(t=null,e,s,r,o){let i;return 0===_._pool.length?i=new _:(i=_._pool.pop(),this._set.delete(i)),i.acquire(t,e,s,r,o),i}static release(t){t&&!this._set.has(t)&&(t.release(),this._pool.push(t),this._set.add(t))}static getCentroidQuantized(e,s){if(o(e.geometry)){const o=e.symbol;if(t(o))return null;if(y(o.type)||f(o.type)){const t=r(e.geometry);return h(s,{},{x:t[0],y:t[1]},!1,!1)}}return null}acquire(t=null,e,s,r,o){t&&this.set(t,e,s,r,o)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(t,e,s,r,o){this.graphic=t,this.geometry=s,this.symbolResource=e,this.bounds=r,o&&(this.size=o)}getGeometryQuantized(t,e,r,h){const g=this.geometry;if(o(g)){const e=g.rings;if(1===e.length&&2===e[0].length)return a(t,{paths:[[e[0][0],e[0][1]]]})}else{if(i(g))return j(d),j(z),m(d,g),u(z,d,g.hasZ,g.hasM,b,t.scale[0]),p(d,z,g.hasZ,g.hasM,b,t),c(d,g.hasZ,g.hasM);if(n(g)){const o=.5*h*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),[i,n]=l(r),m=n-i,u=g.points.filter((t=>{if(t[0]+o>n||t[0]-o<i){const r=[...t];return t[0]+o>n?r[0]-=m:r[0]+=m,s(e,t,o)||s(e,r,o)}return s(e,t,o)}));return 0===u.length?{points:u}:a(t,{points:u})}}return a(t,this.geometry)}}_._pool=[],_._set=new Set;export{_ as default};
