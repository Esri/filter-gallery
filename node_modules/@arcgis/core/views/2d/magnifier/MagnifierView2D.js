/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import e from"../../../request.js";import r from"../../../core/Handles.js";import{clamp as t}from"../../../core/mathUtils.js";import{isNone as s,isSome as i,disposeMaybe as a}from"../../../core/maybe.js";import{createTask as o}from"../../../core/promiseUtils.js";import{isSVG as n}from"../../../core/urlUtils.js";import{init as l}from"../../../core/watchUtils.js";import{c as h}from"../../../chunks/mat3f32.js";import{DisplayObject as m}from"../engine/DisplayObject.js";import{Pos2us as u}from"../engine/webgl/DefaultVertexAttributeLayouts.js";import{WGLDrawPhase as c}from"../engine/webgl/enums.js";import{createMagnifierProgram as d,magnifierProgramTemplate as _}from"../engine/webgl/shaders/MagnifierPrograms.js";import{loadMagnifierResources as p}from"../../magnifier/resources.js";import{BufferObject as f}from"../../webgl/BufferObject.js";import{PrimitiveType as g,Usage as T,TextureType as b,PixelFormat as x,PixelType as R,TextureWrapMode as y,TextureSamplingMode as k}from"../../webgl/enums.js";import{Texture as v}from"../../webgl/Texture.js";import{VertexArrayObject as A}from"../../webgl/VertexArrayObject.js";class E extends m{constructor(){super(),this._handles=new r,this._resourcePixelRatio=1,this.visible=!1}destroy(){this._handles.destroy(),this._handles=null,this._disposeRenderResources(),this._resourcesTask&&(this._resourcesTask.abort(),this._resourcesTask=null)}get background(){return this._background}set background(e){this._background=e,this.requestRender()}get magnifier(){return this._magnifier}set magnifier(e){this._magnifier=e,this._handles.removeAll(),this._handles.add([l(e,"version",(()=>{this.visible=e.visible&&i(e.position)&&e.size>0,this.requestRender()})),e.watch(["mask","overlay"],(()=>this._reloadResources())),e.watch("size",(()=>{this._disposeRenderResources(),this.requestRender()}))])}_createTransforms(){return{dvs:h()}}doRender(e){var r;const i=e.context;if(!this._resourcesTask)return void this._reloadResources();if(e.drawPhase!==c.MAP||!this._canRender())return;this._updateResources(e);const a=this._magnifier;if(s(a.position))return;const o=e.pixelRatio,n=a.size*o,l=1/a.factor,h=Math.ceil(l*n);this._readbackTexture.resize(h,h);const{size:m}=e.state,u=o*m[0],d=o*m[1],_=.5*h,p=.5*h,f=t(o*a.position.x,_,u-_-1),T=t(d-o*a.position.y,p,d-p-1);i.setBlendingEnabled(!0);const b=f-_,x=T-p,R=this._readbackTexture;i.bindTexture(R,0),i.gl.copyTexImage2D(R.descriptor.target,0,R.descriptor.pixelFormat,b,x,h,h,0);const y=null==(r=this.background)?void 0:r.color,k=y?[y.a*y.r/255,y.a*y.g/255,y.a*y.b/255,y.a]:[1,1,1,1],v=(f+a.offset.x*o)/u*2-1,A=(T-a.offset.y*o)/d*2-1,E=n/u*2,w=n/d*2,j=this._program;i.bindVAO(this._vertexArrayObject),i.bindTexture(this._overlayTexture,6),i.bindTexture(this._maskTexture,7),i.useProgram(j),j.setUniform4fv("u_background",k),j.setUniform1i("u_readbackTexture",0),j.setUniform1i("u_overlayTexture",6),j.setUniform1i("u_maskTexture",7),j.setUniform4f("u_drawPos",v,A,E,w),j.setUniform1i("u_maskEnabled",a.maskEnabled?1:0),j.setUniform1i("u_overlayEnabled",a.overlayEnabled?1:0),i.setStencilTestEnabled(!1),i.setColorMask(!0,!0,!0,!0),i.drawArrays(g.TRIANGLE_STRIP,0,4),i.bindVAO()}_canRender(){return this.mask&&this.overlay&&null!=this._magnifier}_reloadResources(){this._resourcesTask&&this._resourcesTask.abort();const r=i(this._magnifier)?this._magnifier.maskUrl:null,t=i(this._magnifier)?this._magnifier.overlayUrl:null;this._resourcesTask=o((async a=>{const o=s(r)||s(t)?p(a):null,n=i(r)?e(r,{responseType:"image",signal:a}).then((e=>e.data)):o.then((e=>e.mask)),l=i(t)?e(t,{responseType:"image",signal:a}).then((e=>e.data)):o.then((e=>e.overlay)),[h,m]=await Promise.all([n,l]);this.mask=h,this.overlay=m,this._disposeRenderResources(),this.requestRender()}))}_disposeRenderResources(){this._readbackTexture=a(this._readbackTexture),this._overlayTexture=a(this._overlayTexture),this._maskTexture=a(this._maskTexture),this._vertexArrayObject=a(this._vertexArrayObject),this._program=a(this._program)}_updateResources(e){if(e.pixelRatio!==this._resourcePixelRatio&&this._disposeRenderResources(),this._readbackTexture)return;const r=e.context;this._resourcePixelRatio=e.pixelRatio;const t=Math.ceil(this._magnifier.size*e.pixelRatio);this._program=d(r);const s=new Uint16Array([0,1,0,0,1,1,1,0]),i=_.attributes;this._vertexArrayObject=new A(r,i,u,{geometry:f.createVertex(r,T.STATIC_DRAW,s)}),this.overlay.width=t,this.overlay.height=t,this._overlayTexture=new v(r,{target:b.TEXTURE_2D,pixelFormat:x.RGBA,internalFormat:x.RGBA,dataType:R.UNSIGNED_BYTE,wrapMode:y.CLAMP_TO_EDGE,samplingMode:k.NEAREST,flipped:!0,preMultiplyAlpha:!n(this.overlay.src)||!e.context.driverTest.svgAlwaysPremultipliesAlpha},this.overlay),this.mask.width=t,this.mask.height=t,this._maskTexture=new v(r,{target:b.TEXTURE_2D,pixelFormat:x.ALPHA,internalFormat:x.ALPHA,dataType:R.UNSIGNED_BYTE,wrapMode:y.CLAMP_TO_EDGE,samplingMode:k.NEAREST,flipped:!0},this.mask);const a=1/this._magnifier.factor;this._readbackTexture=new v(r,{target:b.TEXTURE_2D,pixelFormat:x.RGBA,internalFormat:x.RGBA,dataType:R.UNSIGNED_BYTE,wrapMode:y.CLAMP_TO_EDGE,samplingMode:k.LINEAR,flipped:!1,width:Math.ceil(a*t),height:Math.ceil(a*t)})}}export{E as default};
