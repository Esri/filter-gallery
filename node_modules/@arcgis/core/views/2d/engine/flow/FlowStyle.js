/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{throwIfAborted as t}from"../../../../core/promiseUtils.js";import r from"./FlowGLResources.js";import{createFlowRendererSettings as i}from"./flowRendererUtils.js";class n{constructor(e,t,r,n){this._loadImagery=e,this._createStreamlinesMesh=t,this._timeExtent=n,this._rendererSettings=i(r)}get animated(){return this._rendererSettings.lineSpeed>0}get renderSettings(){return this._rendererSettings}areResourcesCompatible(t){let r=!0;return r=r&&t._loadImagery===this._loadImagery,r=r&&t._createStreamlinesMesh===this._createStreamlinesMesh,r=r&&t._rendererSettings.verticesPerLine===this._rendererSettings.verticesPerLine,r=r&&t._rendererSettings.segmentLength===this._rendererSettings.segmentLength,r=r&&t._rendererSettings.lineSpacing===this._rendererSettings.lineSpacing,r=r&&t._rendererSettings.density===this._rendererSettings.density,r=r&&t._rendererSettings.smoothing===this._rendererSettings.smoothing,r=r&&t._rendererSettings.velocityScale===this._rendererSettings.velocityScale,r=r&&t._rendererSettings.minWeightThreshold===this._rendererSettings.minWeightThreshold,r=r&&t._rendererSettings.minSpeedThreshold===this._rendererSettings.minSpeedThreshold,r=r&&t._rendererSettings.mergeLines===this._rendererSettings.mergeLines,r=r&&t._rendererSettings.velocityScale===this._rendererSettings.velocityScale,r=r&&t._rendererSettings.interpolate===this._rendererSettings.interpolate,r=r&&t._rendererSettings.lineColor.kind===this._rendererSettings.lineColor.kind,r=r&&t._rendererSettings.lineOpacity.kind===this._rendererSettings.lineOpacity.kind,r=r&&t._rendererSettings.lineRenderWidth.kind===this._rendererSettings.lineRenderWidth.kind,r&&this._rendererSettings.mergeLines&&(r=t._rendererSettings.lineCollisionWidth===this._rendererSettings.lineCollisionWidth),r&&t._timeExtent!==this._timeExtent&&(r=!(!e(t._timeExtent)||!e(this._timeExtent))&&t._timeExtent.equals(this._timeExtent)),r}async loadResources(e,i){const{extent:n,size:s}=e;t(i);const d=await this._loadImagery(n,s[0],s[1],this._timeExtent,i),{vertexData:g,indexData:h}=await this._createStreamlinesMesh(this._rendererSettings,d,i);return new r(g,h,{lineColor:this._rendererSettings.lineColor,lineOpacity:this._rendererSettings.lineOpacity,lineRenderWidth:this._rendererSettings.lineRenderWidth})}}export{n as default};
