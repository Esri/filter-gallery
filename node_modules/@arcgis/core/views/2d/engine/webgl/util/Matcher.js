/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import e from"../../../../../core/Error.js";import t from"../../../../../core/Logger.js";import s from"../../../../../core/LRUCache.js";import{createRendererExpression as i}from"../../../../../support/arcadeOnDemand.js";import r from"../../../arcade/callExpressionWithFeature.js";import{expandSymbol as a}from"../../../layers/support/cimSymbolUtils.js";const n=t.getLogger("esri/views/2d/engine/webgl/util/Matcher");async function l(e,t,s,i){switch(e.type){case"simple":return o.fromBasicRenderer(e,t,s,i);case"map":return d.fromUVRenderer(e,t,s,i);case"interval":return c.fromCBRenderer(e,t,s,i);case"dictionary":return p.fromDictionaryRenderer(e,t,s,i);case"subtype":return u.fromSubtypes(e,t,s,i)}}class o{constructor(){this.type="feature",this._defaultResult=null}static async fromBasicRenderer(e,t,s,i){const r=new o;if(e.symbol){const n=await a(e.symbol,s,i),l=t.createTemplateGroup(n,null);r.setDefault(l)}return r}size(){return 1}getDefault(){return this._defaultResult}setDefault(e){this._defaultResult=e}match(e,t,s,i,r){return this.getDefault()}async analyze(e,t,s,i,r,a){return null}}class u extends o{constructor(e,t){super(),this._subMatchers=e,this._subtypeField=t}static async fromSubtypes(e,t,s,i){const r=new Map,a=[];for(const n in e.renderers){const o=parseInt(n,10),u=l(e.renderers[n],t,s,i).then((e=>r.set(o,e)));a.push(u)}return await Promise.all(a),new u(r,e.subtypeField)}match(e,t,s,i,r){const a=t.readAttribute(this._subtypeField),n=this._subMatchers.get(a);return n?n.match(e,t,s,i,r):null}}class c extends o{constructor(e,t,s,i){super(),this.type="interval",this._intervals=[],this._isMaxInclusive=t,this._fieldIndex=i,this._field=e,this._normalizationInfo=s}static async fromCBRenderer(e,t,s,i){const{isMaxInclusive:r,normalizationField:n,normalizationTotal:l,normalizationType:o}=e,u=e.field,d=new c(u,r,{normalizationField:n,normalizationTotal:l,normalizationType:o},e.fieldIndex),h=await a(e.backgroundFillSymbol,s,i);await Promise.all(e.intervals.map((async e=>{const r=await a(e.symbol,s,i),n=await t.createTemplateGroup(r,h),l={min:e.min,max:e.max};d.add(l,n)})));const m=await a(e.defaultSymbol,s,i);if(m){const e=await t.createTemplateGroup(m,h);d.setDefault(e)}return d}add(e,t){this._intervals.push({interval:e,result:t}),this._intervals.sort(((e,t)=>e.interval.min-t.interval.min))}size(){return super.size()+this._intervals.length}match(e,t,s,i,r){if(null==this._fieldIndex&&!this._field)return this.getDefault();const a=null!=this._fieldIndex?t.getComputedNumericAtIndex(this._fieldIndex):this._getValueFromField(t);if(!a&&(null==a||isNaN(a)))return this.getDefault();for(let n=0;n<this._intervals.length;n++){const{interval:e,result:t}=this._intervals[n],s=a>=e.min,i=this._isMaxInclusive?a<=e.max:a<e.max;if(s&&i)return t}return this.getDefault()}_needsNormalization(){const e=this._normalizationInfo;return e&&(e.normalizationField||e.normalizationTotal||e.normalizationType)}_getValueFromField(e){const t=e.readAttribute(this._field);if(!this._needsNormalization()||null==t)return t;const{normalizationField:s,normalizationTotal:i,normalizationType:r}=this._normalizationInfo,a=!!s&&e.readAttribute(s);if(r)switch(r){case"esriNormalizeByField":return a?t/a:void 0;case"esriNormalizeByLog":return Math.log(t)*Math.LOG10E;case"esriNormalizeByPercentOfTotal":return t/i*100;default:return void n.error(`Found unknown normalization type: ${r}`)}else n.error("Normalization is required, but no type was set!")}}class d extends o{constructor(e,t,s){super(),this.type="map",this._nullResult=null,this._resultsMap=new Map,this._fieldsIndex=s,this._fields=e,this._seperator=t||""}static async fromUVRenderer(e,t,s,i){const r=e.fieldDelimiter,n=[e.field];e.field2&&n.push(e.field2),e.field3&&n.push(e.field3);const l=await a(e.backgroundFillSymbol,s,i),o=new d(n,r,e.fieldIndex);await Promise.all(e.map.map((async e=>{const r=await a(e.symbol,s,i),n=await t.createTemplateGroup(r,l);"<Null>"===e.value?o.setNullResult(n):o.add(e.value,n)})));const u=await a(e.defaultSymbol,s,i);if(u){const e=await t.createTemplateGroup(u,l);o.setDefault(e)}return o}setNullResult(e){this._nullResult=e}add(e,t){this._resultsMap.set(e.toString(),t)}size(){return super.size()+this._resultsMap.size}match(e,t,s,i,r){if(null==this._fieldsIndex&&!this._fields)return this.getDefault();const a=null!=this._fieldsIndex?t.getComputedStringAtIndex(this._fieldsIndex):this._getValueFromFields(t);if(null!==this._nullResult&&(null==a||""===a||"<Null>"===a))return this._nullResult;if(!a&&null==a)return this.getDefault();const n=a.toString();return this._resultsMap.has(n)?this._resultsMap.get(n):this.getDefault()}_getValueFromFields(e){const t=[];for(const s of this._fields){const i=e.readAttribute(s);null==i||""===i?t.push("<Null>"):t.push(i)}return t.join(this._seperator)}}async function h(e,t){const s=e||1;if("number"==typeof s)return(e,t,i)=>s;const a=await i(s,t.spatialReference,t.fields);return(e,s,i)=>r(a,e,{$view:i},t.geometryType,s)||1}let m;async function f(){return m||(m=import("../../../layers/features/createSymbolSchema.js")),m}class p extends o{constructor(e,t,i,r,a,n){super(),this.type="dictionary",this._groupIdCache=new s(100),this._loader=e,this._fieldMap=e.fieldMap,this._symbolFields=e.getSymbolFields(),this._templates=t,this._info=i,this._scaleFn=r,this._schemaUtilsModule=a,this._symbolOptions=n}static async fromDictionaryRenderer(e,t,s,i){const[{DictionaryLoader:r},a]=await Promise.all([import("../../../../../renderers/support/DictionaryLoader.js"),f()]),n=new r(e.url,e.config,e.fieldMap);await n.fetchResources({spatialReference:s.spatialReference,fields:s.fields});const l=await h(e.scaleExpression,s);return new p(n,t,s,l,a,e.symbolOptions)}async _analyzeFeature(t,s,i,r,l){const o=t.readLegacyFeature(),u=this._scaleFn(o,i,r),c=this._attributeHash(o)+"-"+u,d=this._groupIdCache.get(c);if(d)return d;const h={...r,spatialReference:this._info.spatialReference,abortOptions:l,fields:this._info.fields},m=await this._loader.getSymbolAsync(o,h),f=this._schemaUtilsModule.createSymbolSchema(m,this._symbolOptions),p=a(f,this._info,s,l).then((t=>{if("expanded-cim"!==t.type)return n.error(new e("mapview-bad-type",`Found unexpected type ${t.type} in dictionary response`)),null;t.hash+="-"+u;for(const e of t.layers)e.scaleFactor=u,e.templateHash+="-"+u;return this._templates.createTemplateGroup(t,null)}));return this._groupIdCache.put(c,p,1),p}async analyze(e,t,s,i,r,a){const n=t.getCursor(),l=[];for(;n.next();)l.push(this._analyzeFeature(n,s,i,r,a));return Promise.all(l)}match(e,t,s,i,r){return null}_attributeHash(e){let t="";for(const s of this._symbolFields){const i=this._fieldMap[s];i&&(t+=e.attributes[i]+"-")}return t}}export{p as DictionaryMatcher,o as FeatureMatcher,c as IntervalMatcher,d as MapMatcher,u as SubtypeMatcher,l as createMatcher};
