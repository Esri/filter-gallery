/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import e from"../../../../config.js";import t from"../../../../request.js";import{bidiText as i}from"../../../../core/BidiText.js";import s from"../../../../core/Error.js";import r from"../../../../core/Logger.js";import{isNone as n,isSome as o}from"../../../../core/maybe.js";import{throwIfAborted as a,isAbortError as h}from"../../../../core/promiseUtils.js";import{pt2px as c}from"../../../../core/screenUtils.js";import{s as u}from"../../../../chunks/vec2.js";import{c as d}from"../../../../chunks/vec2f32.js";import l from"../../../../symbols/cim/Rasterizer.js";import{TEXTURE_BINDING_GLYPH_ATLAS as m,TEXTURE_BINDING_SPRITE_ATLAS as g}from"./definitions.js";import{MosaicType as p}from"./enums.js";import{getFullyQualifiedFontName as f}from"./fontUtils.js";import _ from"./GlyphMosaic.js";import w from"./GlyphSource.js";import y from"./SDFConverter.js";import M from"./SpriteMosaic.js";import{is3D as v,charCodes as I,isSimple as R,isSVGResource as b,isImageResource as z,shouldRepeat as T,getPMSResourceSize as j,isGIF as x,isPNG as S,getUrl as U,isSVGImage as B}from"./Utils.js";import G,{isPNG as P,isAnimatedPNG as C}from"./animatedFormats/apng.js";import L,{isGIF as F,isAnimatedGIF as q}from"./animatedFormats/gif.js";import{ok as A}from"./util/Result.js";import{keyFromSymbol as N}from"./util/symbolUtils.js";import{QueueProcessor as $}from"../../../support/QueueProcessor.js";import{TextureSamplingMode as E}from"../../../webgl/enums.js";const k=d(),O="arial-unicode-ms-regular",Q=126,H=r.getLogger("esri.views.2d.engine.webgl.TextureManager");async function V(e,i){const r=U(e);let n;const o=";base64,";if(r.includes(o)){const e=r.indexOf(o)+o.length,t=r.substring(e),i=atob(t),s=new Uint8Array(i.length);for(let r=0;r<i.length;r++)s[r]=i.charCodeAt(r);n=s.buffer}else try{const{data:e}=await t(r,{responseType:"array-buffer",...i});n=e}catch(a){if(!h(a))return new s("mapview-invalid-resource",`Could not fetch requested resource at ${r}`)}return n}function Y(e,t){const i=Math.round(c(t)*window.devicePixelRatio),s=i>=128?2:4;return Math.min(e,i*s)}const D=(e,t,i)=>H.error(new s(e,t,i));class J{constructor(e,t,i){this.mosaicType=e,this.page=t,this.sdf=i}static fromMosaic(e,t){return new J(e,t.page,t.sdf)}}class W{constructor(i,r){this.resourceManager=r,this._invalidFontsMap=new Map,this._sdfConverter=new y(Q),this._bindingInfos=new Array,this._hashToBindingIndex=new Map,this._ongoingRasterizations=new Map,this._imageRequestQueue=new $({concurrency:10,process:async(e,i)=>{a(i);try{return await t(e,{responseType:"image",signal:i})}catch(r){if(!h(r))throw new s("mapview-invalid-resource",`Could not fetch requested resource at ${e}`,r);throw r}}}),this._spriteMosaic=new M(i,2048,2048,500),this._glyphSource=new w(`${e.fontsUrl}/{fontstack}/{range}.pbf`),this._glyphMosaic=new _(1024,1024,this._glyphSource),this._rasterizer=new l(r)}dispose(){this._spriteMosaic.dispose(),this._glyphMosaic.dispose(),this._rasterizer.dispose(),this._sdfConverter.dispose(),this._spriteMosaic=null,this._glyphMosaic=null,this._sdfConverter=null,this._hashToBindingIndex.clear(),this._hashToBindingIndex=null,this._bindingInfos=null,this._ongoingRasterizations.clear(),this._ongoingRasterizations=null,this._imageRequestQueue.clear(),this._imageRequestQueue=null}get sprites(){return this._spriteMosaic}get glyphs(){return this._glyphMosaic}async rasterizeItem(e,t,i,s){if(n(e))return D("mapview-null-resource","Unable to rasterize null resource"),null;switch(e.type){case"text":case"esriTS":{const t=await this._rasterizeText(e,i,s);return t.forEach((e=>this._setTextureBinding(p.GLYPH,e))),{glyphMosaicItems:t}}default:{if(v(e))return D("mapview-invalid-type",`MapView does not support symbol type: ${e.type}`,e),null;const i=await this._rasterizeSpriteSymbol(e,t,s);return A(i)&&i&&this._setTextureBinding(p.SPRITE,i),{spriteMosaicItem:i}}}}bindTextures(e,t,i,s=!1){if(0===i.textureBinding)return;const r=this._bindingInfos[i.textureBinding-1],n=r.page,o=s?E.LINEAR_MIPMAP_LINEAR:E.LINEAR;switch(r.mosaicType){case p.SPRITE:{const i=this.sprites.getWidth(n),s=this.sprites.getHeight(n),r=u(k,i,s);return this._spriteMosaic.bind(e,o,n,g),t.setUniform1i("u_texture",g),void t.setUniform2fv("u_mosaicSize",r)}case p.GLYPH:{const i=this.glyphs.width,s=this.glyphs.height,r=u(k,i,s);return this._glyphMosaic.bind(e,o,n,m),t.setUniform1i("u_texture",m),void t.setUniform2fv("u_mosaicSize",r)}default:H.error("mapview-texture-manager",`Cannot handle unknown type ${r.mosaicType}`)}}_hashMosaic(e,t){return 1|e<<1|(t.sdf?1:0)<<2|t.page<<3}_setTextureBinding(e,t){const i=this._hashMosaic(e,t);if(!this._hashToBindingIndex.has(i)){const s=J.fromMosaic(e,t),r=this._bindingInfos.length+1;this._hashToBindingIndex.set(i,r),this._bindingInfos.push(s)}t.textureBinding=this._hashToBindingIndex.get(i)}async _rasterizeText(e,t,s){let r,n;if("cim"in e){const t=e;r=t.fontName,n=t.text}else{const t=e;r=f(t.font),n=t.text}const o=this._invalidFontsMap.has(r),a=t||I(i(n)[0]);try{return await this._glyphMosaic.getGlyphItems(o?O:r,a,s)}catch(h){return D("mapview-invalid-resource",`Couldn't find font ${r}. Falling back to Arial Unicode MS Regular`),this._invalidFontsMap.set(r,!0),this._glyphMosaic.getGlyphItems(O,a,s)}}async _rasterizeSpriteSymbol(e,t,i){if(R(e))return null;const r=N(e);if(this._spriteMosaic.has(r))return this._spriteMosaic.getSpriteItem(r);if(b(e)||z(e))return this._handleAsyncResource(r,e,i);const n=1,o=this._rasterizer.rasterizeJSONResource(e,n);if(o){const{size:t,image:i,sdf:s,simplePattern:n}=o;return this._addItemToMosaic(r,t,{type:"static",data:i},T(e),s,n)}return new s("TextureManager","unrecognized or null rasterized image")}async _handleAsyncResource(e,t,i){if(this._ongoingRasterizations.has(e))return this._ongoingRasterizations.get(e);let s;s=b(t)?this._handleSVG(t,e,i):this._handleImage(t,e,i),this._ongoingRasterizations.set(e,s);try{await s,this._ongoingRasterizations.delete(e)}catch{this._ongoingRasterizations.delete(e)}return s}async _handleSVG(e,t,i){const s=[Q,Q],r=await this._sdfConverter.draw(e.path,i);return this._addItemToMosaic(t,s,{type:"static",data:new Uint32Array(r.buffer)},!1,!0,!0)}async _handleGIFOrPNG(e,t,i){const r=await V(e,i);if(A(r)){const o=F(r),a=P(r);if(!o&&!a)return new s("mapview-invalid-resource","Image data is neither GIF nor PNG!");let c;try{o&&q(r)?c=await L.create(r,i):a&&C(r)&&(c=await G.create(r,i))}catch(n){if(!h(n))return new s("mapview-invalid-resource","Could not fetch requested resource!")}if(c&&A(c))return this._addItemToMosaic(t,[c.width,c.height],{type:"animated",data:c},T(e),!1,!1);const u=new Blob([r],{type:o?"image/gif":"image/png"}),d=await this._imageFromBlob(u);if(d&&d instanceof HTMLImageElement){let i=d.width,s=d.height;"esriPMS"===e.type&&(i=Math.round(Y(d.width,j(e))),s=Math.round(d.height*(i/d.width)));const r="cim"in e?e.cim.colorSubstitutions:void 0,{size:n,sdf:o,image:a}=this._rasterizer.rasterizeImageResource(i,s,d,r);return this._addItemToMosaic(t,n,{type:"static",data:a},T(e),o,!1)}}return new s("mapview-invalid-resource","Could not handle resource!")}async _handleImage(e,t,i){if(x(e)||S(e))return this._handleGIFOrPNG(e,t,i);const r=U(e);try{let s;const a=this.resourceManager.getResource(r);if(o(a))s=a;else{const{data:e}=await this._imageRequestQueue.push(r,{...i});s=e}if(B(r))if("width"in e&&"height"in e)s.width=c(e.width),s.height=c(e.height);else if("cim"in e){var n;const t=e.cim;s.width=c(null!=(n=t.width)?n:t.scaleX*t.size),s.height=c(t.size)}if(!s.width||!s.height)return null;let h=s.width,u=s.height;"esriPMS"===e.type&&(h=Math.round(Y(s.width,j(e))),u=Math.round(s.height*(h/s.width)));const d="cim"in e?e.cim.colorSubstitutions:void 0,{size:l,sdf:m,image:g}=this._rasterizer.rasterizeImageResource(h,u,s,d);return this._addItemToMosaic(t,l,{type:"static",data:g},T(e),m,!1)}catch(a){if(!h(a))return new s("mapview-invalid-resource",`Could not fetch requested resource at ${r}. ${a.message}`)}}async _imageFromBlob(e){const t=window.URL.createObjectURL(e);try{const{data:e}=await this._imageRequestQueue.push(t);return window.URL.revokeObjectURL(t),e}catch(i){if(window.URL.revokeObjectURL(t),!h(i))return new s("mapview-invalid-resource",`Could not fetch requested resource at ${t}`);throw i}}_addItemToMosaic(e,t,i,s,r,n){return this._spriteMosaic.addSpriteItem(e,t,i,s,r,n)}}export{W as default};
