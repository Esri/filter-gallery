/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{unwrapOr as t}from"../../../../../../core/maybe.js";import{pt2px as e}from"../../../../../../core/screenUtils.js";import{c as o}from"../../../../../../chunks/mat2df32.js";import{c as s}from"../../../../../../chunks/vec2f32.js";import{Alignment as i,ExtremityPlacement as r}from"../../../../../../symbols/cim/enums.js";import{premultiplyAlphaRGBA as a,premultiplyAlphaRGBAArray as n}from"../../color.js";import{MIN_MAX_ZOOM_PRECISION_FACTOR as h,BITSET_MARKER_ALIGNMENT_MAP as l,BITSET_MARKER_ALIGNMENT_SCREEN as m,BITSET_GENERIC_LOCK_COLOR as c,BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE as f,BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY as d,SPRITE_PADDING as u,PICTURE_FILL_COLOR as M}from"../../definitions.js";import{i1616to32 as p,i8888to32 as x}from"../../number.js";import{MarkerMaterialKey as y}from"../../materialKey/MaterialKey.js";import{getMinMaxZoom as S,DEFAULT_MIN_ZOOM as _,DEFAULT_MAX_ZOOM as g}from"./util.js";import V from"./WGLBaseMarkerTemplate.js";import z from"./WGLMeshTemplate.js";class B extends(V(z)){constructor(t,e,r,a,n,M,S,_,g,V,z,B,b,k,w,j,L,C,P,R,E,v,A){super(),this.angle=a,this.height=S,this.width=M,this.xOffset=e*P,this.yOffset=r*P,this._markerPlacement=R,this._effects=E,this._anchorX=.5-(.5+j)*w.width/w.width,this._anchorY=.5-(.5+L)*w.height/w.height,this._minMaxZoom=p(Math.round(v*h),Math.round(A*h));const K=(k===i.MAP?l:m)|(z?c:0)|(b?f:0)|(B?d:0),U=w&&w.sdf,W=y.load(t);W.sdf=U,W.pattern=!0,W.textureBinding=w.textureBinding,this._materialKey=W.data,this._fillColor=n,this._outlineColor=g,this._sizeOutlineWidth=x(Math.round(Math.min(Math.sqrt(128*M),255)),Math.round(Math.min(Math.sqrt(128*S),255)),Math.round(Math.min(Math.sqrt(128*V),255)),Math.round(Math.min(Math.sqrt(128*_),255)));const X=w.rect.x+u,q=w.rect.y+u,T=X+w.width,Y=q+w.height;this._offsets.xUpperLeft=X,this._offsets.yUpperLeft=q,this._offsets.xUpperRight=T,this._offsets.yUpperRight=q,this._offsets.xBottomLeft=X,this._offsets.yBottomLeft=Y,this._offsets.xBottomRight=T,this._offsets.yBottomRight=Y,this._texUpperLeft=p(X,q),this._texUpperRight=p(T,q),this._texBottomLeft=p(X,Y),this._texBottomRight=p(T,Y),M*=C,S*=C,M*=P,S*=P;const N=Math.round(64*C);this._bitestAndDistRatio=p(K,N),this._computedWidth=M,this._computedHeight=S;const H=s(),I=o();this._applyTransformation(I,H)}static fromCIMMarker(o,s,r){const n=s&&s.width||1,h=s&&s.height||1,l=o.size,m=n/h*o.scaleX,c=o.scaleSymbolsProportionally&&o.frameHeight?l/o.frameHeight:1;let f=a(o.color);const d=a(o.outlineColor),u=e(l),M=u*m,p=e(o.offsetX||0),x=e(o.offsetY||0),y=e(o.outlineWidth||0)*c,_=o.alignment||i.SCREEN,g=e(o.referenceSize),[V,z]=S(o.scaleInfo,r);s.sdf||0!==f||(f=-1);let b=o.rotation||0;o.rotateClockwise||(b=-b);let k=0,w=0;const j=o.anchorPoint;j&&(o.isAbsoluteAnchorPoint?l&&(k=-j.x/(l*m),w=j.y/l):(k=j.x,w=j.y));const L=new B(o.materialKey,p,x,b,f,M,u,g,d,y,o.colorLocked,o.scaleSymbolsProportionally,!1,_,s,k,w,o.sizeRatio,t(o.scaleFactor,1),o.markerPlacement,o.effects,V,z);return L._vertexBoundsScaleX=o.maxVVSize?o.maxVVSize/M:1,L._vertexBoundsScaleY=o.maxVVSize?o.maxVVSize/u:1,L}static fromPictureMarker(t,o){const s=Math.round(e(t.width)),r=Math.round(e(t.height)),a=M,n=Math.round(e(t.xoffset||0)),h=Math.round(e(t.yoffset||0)),l=new B(t.materialKey,n,h,t.angle,a,s,r,r,0,0,!1,!1,!1,i.SCREEN,o,0,0,1,1,null,null,_,g);return l._vertexBoundsScaleX=t.maxVVSize?t.maxVVSize/t.width:1,l._vertexBoundsScaleY=t.maxVVSize?t.maxVVSize/t.height:1,l}static fromSimpleMarker(t,o){const s=n(t.color),r=Math.round(e(t.size)),a=r,h=Math.round(e(t.xoffset||0)),l=Math.round(e(t.yoffset||0)),m=t.style,c=t.outline,f=0|(c&&c.color&&n(c.color)),d=0|(c&&c.width&&Math.round(e(c.width))),u=new B(t.materialKey,h,l,t.angle,s,r,a,a,f,d,!1,!1,"esriSMSCross"===m||"esriSMSX"===m,i.SCREEN,o,0,0,126/64,1,null,null,_,g);return u.boundsType="esriSMSCircle"===m?"circle":"square",u._vertexBoundsScaleX=t.maxVVSize?t.maxVVSize/t.size:1,u._vertexBoundsScaleY=t.maxVVSize?t.maxVVSize/t.size:1,u}static fromLineSymbolMarker(t,o){const s=n(t.color),a=6,h=Math.round(e(a*t.lineWidth)),l=h,m="cross"===t.style||"x"===t.style;let c;switch(t.placement){case"begin-end":c=r.Both;break;case"begin":c=r.JustBegin;break;case"end":c=r.JustEnd;break;default:c=r.None}const f={type:"CIMMarkerPlacementAtExtremities",angleToLine:!0,offset:0,extremityPlacement:c,offsetAlongLine:0},d=new B(t.materialKey,0,0,0,s,h,l,l/a,s,m?Math.round(e(t.lineWidth)):0,!1,!1,m,i.MAP,o,0,0,126/64,1,f,null,_,g);return d.boundsType="circle"===t.style?"circle":"square",d}}export{B as default};
