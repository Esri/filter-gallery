/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{isSome as t,isNone as e,unwrap as i}from"../../../../../../core/maybe.js";import{pt2px as r}from"../../../../../../core/screenUtils.js";import{a as s,r as o}from"../../../../../../chunks/mat2d.js";import{c as h}from"../../../../../../chunks/mat2df32.js";import{s as f,t as n}from"../../../../../../chunks/vec2.js";import{f as x,c as a}from"../../../../../../chunks/vec2f32.js";import{deltaDecodeGeometry as m,convertFromGeometry as _}from"../../../../../../layers/graphics/featureConversionUtils.js";import{CIMMarkerPlacementHelper as l}from"../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper.js";import{WGLGeometryType as p}from"../../enums.js";import{i1616to32 as c}from"../../number.js";const d=3.14159265359/180,v=8,g=g=>class extends g{constructor(...t){super(...t),this.angle=0,this.xOffset=0,this.yOffset=0,this.width=0,this.height=0,this.boundsType="square",this._anchorX=0,this._anchorY=0,this._computedWidth=0,this._computedHeight=0,this._vertexBoundsScaleX=1,this._vertexBoundsScaleY=1,this._offsets={xUpperLeft:0,yUpperLeft:0,xUpperRight:0,yUpperRight:0,xBottomLeft:0,yBottomLeft:0,xBottomRight:0,yBottomRight:0},this.geometryType=p.MARKER}_write(t,e,i,r){const s=e.getDisplayId();t.recordStart(s,this._materialKey,this.geometryType,!0),this._writeGeometry(t,e,s,i,r),t.recordEnd()}_writeGeometry(i,r,s,o,h){if(t(this._markerPlacement))return this._writePlacedMarkers(i,r,o,h);if(!h&&"esriGeometryPoint"===r.geometryType){const t=r.getX(),e=r.getY();if(!i.hasAggregates&&i.hasPixelBufferEnabled&&(t<0||t>=513||e<0||e>=513))return;return this._writeVertices(i,s,this._getPos(t,e),t,e)}const f=h?m(_(h),2):"esriGeometryPolygon"===r.geometryType?r.readCentroid():r.readGeometryForDisplay();if(!e(f)){if(f.isPoint){const[t,e]=f.coords;if(!i.hasAggregates&&i.hasPixelBufferEnabled&&(t<0||t>=512||e<0||e>=512))return;return this._writeVertices(i,s,this._getPos(t,e),t,e)}f.forEachVertex(((t,e)=>this._writeVertices(i,s,this._getPos(t,e),t,e)))}}_writePlacedMarkers(t,e,s,o){const f=null!=o?o:e.readLegacyGeometryForDisplay(),n=l.getPlacement(f,i(this._markerPlacement),r(1),s.geometryEngine);if(!n)return;const x=e.getDisplayId(),m=a(),_=h(),p=-128,c=640;let v=n.next();for(;null!=v;){const e=v.tx,i=-v.ty;e>=p&&e<=c&&i>=p&&i<=c&&(this._applyTransformation(_,m,-v.getAngle()/d),this._writeVertices(t,x,this._getPos(e,i),e,i)),v=n.next()}}_writeVertices(t,e,i,r,s){const o=t.vertexCount();if(this.angle){const e=Math.max(this._computedWidth*this._vertexBoundsScaleX,this._computedHeight*this._vertexBoundsScaleY);t.vertexBounds(r+this.xOffset,s-this.yOffset,e,e)}else t.vertexBounds(r+this.xOffset,s-this.yOffset,this._computedWidth*this._vertexBoundsScaleX,this._computedHeight*this._vertexBoundsScaleY);t.vertexWrite(i),t.vertexWrite(this._offsetUpperLeft),t.vertexWrite(this._texUpperLeft),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetUpperRight),t.vertexWrite(this._texUpperRight),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetBottomLeft),t.vertexWrite(this._texBottomLeft),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.vertexWrite(i),t.vertexWrite(this._offsetBottomRight),t.vertexWrite(this._texBottomRight),t.vertexWrite(this._bitestAndDistRatio),t.vertexWrite(e),t.vertexWrite(this._fillColor),t.vertexWrite(this._outlineColor),t.vertexWrite(this._sizeOutlineWidth),t.vertexWrite(this._minMaxZoom),t.vertexEnd(),t.indexWrite(o+0),t.indexWrite(o+1),t.indexWrite(o+2),t.indexWrite(o+1),t.indexWrite(o+3),t.indexWrite(o+2)}_applyTransformation(t,e,i=0){s(t,x(this.xOffset,-this.yOffset)),this.angle+i!==0&&o(t,t,d*(this.angle+i));const r=this._computedWidth,h=this._computedHeight,a=(this._anchorX-.5)*r,m=(this._anchorY-.5)*h;f(e,a,m),n(e,e,t),this._offsetUpperLeft=c(16*e[0],16*e[1]),this._offsets.xUpperLeft=e[0],this._offsets.yUpperLeft=e[1],f(e,a+r,m),n(e,e,t),this._offsetUpperRight=c(16*e[0],16*e[1]),this._offsets.xUpperRight=e[0],this._offsets.yUpperRight=e[1],f(e,a,m+h),n(e,e,t),this._offsetBottomLeft=c(16*e[0],16*e[1]),this._offsets.xBottomLeft=e[0],this._offsets.yBottomLeft=e[1],f(e,a+r,m+h),n(e,e,t),this._offsetBottomRight=c(16*e[0],16*e[1]),this._offsets.xBottomRight=e[0],this._offsets.yBottomRight=e[1]}_getPos(t,e){return c(Math.round(v*t),Math.round(v*e))}};export{g as default};
