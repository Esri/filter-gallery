/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{isSome as t}from"../../../../../../core/maybe.js";import{pt2px as e}from"../../../../../../core/screenUtils.js";import{premultiplyAlphaRGBA as s}from"../../color.js";import{MIN_MAX_ZOOM_PRECISION_FACTOR as i,SPRITE_PADDING as r}from"../../definitions.js";import{radToByte as o}from"../../GeometryUtils.js";import{i1616to32 as a,i8888to32 as l}from"../../number.js";import{FillMaterialKey as n}from"../../materialKey/MaterialKey.js";import{isFunction as c,getMinMaxZoom as h}from"./util.js";import f from"./WGLBaseFillTemplate.js";import m from"./WGLDynamicMeshTemplate.js";import{ok as p}from"../../util/Result.js";const _=128;class y extends(f(m)){constructor(r,l,h){var f;if(super(r),this._minMaxZoom=a(Math.round(l*i),Math.round(h*i)),c(r.color)){const t=(t,e,i)=>{const o=r.color(t,e,i);return o&&s(o)||0};this._dynamicPropertyMap.set("fillColor",t)}else{const t=r.color;this.fillColor=t&&s(t)||0}const m="CIMMarkerPlacementInsidePolygon"===(null==(f=r.cim.placement)?void 0:f.type)&&r.cim.placement.shiftOddRows?2:1,p=r.height;if(c(p)){const t=(t,e,s)=>p(t,e,s)*m;this._dynamicPropertyMap.set("_height",t)}else this._height=(p||0)*m;const y=r.offsetX;if(c(y)){const t=(t,s,i)=>{let r=e(y(t,s,i))+_;return r>255?r=255:r<0&&(r=0),r};this._dynamicPropertyMap.set("_offsetX",t)}else{let t=e(y||0)+_;t>255?t=255:t<0&&(t=0),this._offsetX=t}const d=r.offsetY;if(c(d)){const t=(t,s,i)=>{let r=e(-d(t,s,i))+_;return r>255?r=255:r<0&&(r=0),r};this._dynamicPropertyMap.set("_offsetY",t)}else{let t=e(-d||0)+_;t>255?t=255:t<0&&(t=0),this._offsetY=t}const u=r.scaleX;c(u)?this._dynamicPropertyMap.set("_scaleX",u):this._scaleX=u||1;const M=r.angle;if(c(M)){const t=(t,e,s)=>o(M(t,e,s));this._dynamicPropertyMap.set("_angle",t)}else this._angle=o(M)||0;if(t(r.effects)){const t=r.effects;c(t)?this._dynamicPropertyMap.set("_effects",t):this._effects=t}this._cimFillLayer=r,this._fillMaterialKey=n.load(r.materialKey)}static fromCIMFill(t,e){const[s,i]=h(t.scaleInfo,e);return new y(t,s,i)}bindFeature(t,s,i){const o=t.readLegacyFeature();this._dynamicPropertyMap.forEach(((t,e)=>{this[e]=t(o,s,i)}));const n=this._fillMaterialKey,c=this._materialCache,h=(0,this._cimFillLayer.materialHash)(o,s,i),f=c.get(h);let m=null;if(f&&p(f.spriteMosaicItem)&&(m=f.spriteMosaicItem),m){const{rect:t,width:s,height:i}=m,o=t.x+r,c=t.y+r,h=o+s,f=c+i;let p=Math.round(e(this._height));p>255?p=255:p<=0&&(p=f-c);let _=Math.round(e(this._height/i*s||0));_>255?_=255:_<=0&&(_=h-o);const y=this._scaleX,d=1;this.tl=a(o,c),this.br=a(h,f),this.aux2=l(_,p,this._offsetX,this._offsetY),this.aux3=l(y,d,this._angle,0),n.sdf=m.sdf,n.pattern=!0,n.textureBinding=m.textureBinding}else this.tl=0,this.br=0,this.aux2=0,this.aux3=0,n.sdf=!1,n.pattern=!1,n.textureBinding=0;this._materialKey=n.data}}export{y as default};
