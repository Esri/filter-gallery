/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{isSome as e,isNone as t}from"../../../../../../core/maybe.js";import{deltaDecodeGeometry as r,convertFromGeometry as i}from"../../../../../../layers/graphics/featureConversionUtils.js";import{WGLGeometryType as s}from"../../enums.js";import{i1616to32 as o}from"../../number.js";import{FillMaterialKey as n}from"../../materialKey/MaterialKey.js";import{triangulate as l,triangulateLibtess as m,clipMarshall as a}from"./templateUtils.js";import h from"./WGLLineTemplate.js";const y=100,c=1,p=p=>class extends p{constructor(...e){super(...e),this.forceLibtess=!1,this._bitset=0,this._lineTemplate=null,this.geometryType=s.FILL}_maybeAddLineTemplate(e){this._lineTemplate=h.fromFillOutline(e)}_write(t,r,i,s){const o="esriGeometryPoint"===r.geometryType,l=n.load(this._materialKey);t.recordStart(r.getDisplayId(),this._materialKey,this.geometryType,o),this._writeGeometry(t,r,l,s,o),l.outlinedFill&&e(this._lineTemplate)&&this._lineTemplate.writeGeometry(t,r,s,o),t.recordEnd()}_writeGeometry(e,r,i,s,o){const n=this._getGeometry(r,s,o);if(t(n))return;const a=[];if(!(n.maxLength>y)&&!this.forceLibtess&&l(a,n))return void(a.length&&this._writeVertices(e,r,n.coords,n.lengths,i,a));const h=m(n);this._writeVertices(e,r,h,[h.length/2],i)}_writeVertex(e,t,r,i,s,n){const l=o(c*i,c*s);e.vertexBounds(i,s,0,0),e.vertexWrite(l),e.vertexWrite(t),r.dotDensity?e.vertexWriteF32(1/Math.abs(n.readGeometryArea())):(e.vertexWrite(this.fillColor),r.simple||(e.vertexWrite(this.tl),e.vertexWrite(this.br)),e.vertexWrite(this.aux2),e.vertexWrite(this.aux3),r.simple||e.vertexWrite(this._minMaxZoom))}_writeVertices(e,t,r,i,s,o){const n=t.getDisplayId(),l=this._bitset<<24|n,m=i.reduce(((e,t)=>e+t)),a=s.dotDensity?4:10,h=e.vertexCount();e.vertexEnsureSize(a*m);let y=0;if(o)for(const c of o){const i=r[2*c],o=r[2*c+1];this._writeVertex(e,l,s,i,o,t),y++}else for(let c=0;c<r.length;c+=2){const i=Math.round(r[c]),o=Math.round(r[c+1]);this._writeVertex(e,l,s,i,o,t),y++}e.indexEnsureSize(y);for(let c=0;c<y;c++)e.indexWrite(c+h)}_getGeometry(e,t,s){const o=t?r(i(t),2):e.readGeometryForDisplay();if(!o)return null;return a(o,s?256:8)}};export{p as default};
