/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{isNone as e}from"../../../../../../core/maybe.js";import{THIN_LINE_HALF_WIDTH_THRESHOLD as t}from"../../definitions.js";import{WGLGeometryType as i}from"../../enums.js";import{i8888to32 as r,i1616to32 as s}from"../../number.js";import{LineTessellation as o}from"../../TurboLine.js";import{LineMaterialKey as l,FillMaterialKey as n}from"../../materialKey/MaterialKey.js";import{clipLinesMarshall as a}from"./templateUtils.js";const h=8,d=16,m=65535,p=r=>class extends r{constructor(...e){super(...e),this.tessellationProperties={},this._tessellationOptions={halfWidth:0,pixelCoordRatio:1,offset:0},this.geometryType=i.LINE}writeGeometry(e,t,i,r){this._writeGeometry(e,t,i,r)}_initializeTessellator(e){const i=l.load(this._materialKey),r=n.load(this._materialKey),s=this._tessellationOptions,a=i.vvSizeFieldStops||i.vvSizeMinMaxValue||i.vvSizeScaleStops||i.vvSizeUnitValue,h=this.tessellationProperties._halfWidth<t&&!e&&!a;this.tessellationProperties.minMaxZoom=this._minMaxZoom,s.wrapDistance=m,s.textured=this._isDashed||this._hasPattern,s.offset=this.tessellationProperties.offset,s.halfWidth=this.tessellationProperties._halfWidth;const d=h?0:1,p=r.outlinedFill?f:x;this._lineTessellator=new o(p(this.tessellationProperties,d,d),_(this.tessellationProperties),h)}_write(e,t,i,r){const s="esriGeometryPoint"===t.geometryType;e.recordStart(t.getDisplayId(),this._materialKey,this.geometryType,s),this._writeGeometry(e,t,r,s),e.recordEnd()}_writeGeometry(t,i,r,s){const o=null!=r?r:i.readLegacyGeometryForDisplay(),l=this._getLines(o,s);e(l)||this._writeVertices(t,i,l)}_getLines(t,i){if(e(t))return null;const r=t.paths||t.rings;if(e(r))return null;return a(r,i?256:16)}_writeVertices(e,t,i){const r=t.getDisplayId(),s=e.vertexCount(),o=this.tessellationProperties,a=this._tessellationOptions;o.out=e,o.id=r,o.indexCount=0,o.vertexCount=0,o.offset=s,a.capType=this._capType,a.joinType=this._joinType;const h=n.load(this._materialKey);this.tessellationProperties.key=h.outlinedFill?h:l.load(this._materialKey);for(const{line:l,start:n}of i)a.initialDistance=n%m,this._lineTessellator.tessellate(l,a)}},x=(e,t,i)=>(o,l,n,a,m,p,x,f,_,u,v)=>{const y=s(v,Math.ceil(d*e._halfWidth)),c=r(Math.round(d*x),Math.round(d*f),Math.round(d*_),Math.round(d*u)),W=r(d*m,d*p,0,e._bitset),M=e.out;return M.vertexBounds(o,l,t,i),M.vertexWrite(s(h*o,h*l)),M.vertexWrite(e.id),M.vertexWrite(e._fillColor),M.vertexWrite(c),M.vertexWrite(y),M.vertexWrite(e._tl),M.vertexWrite(e._br),M.vertexWrite(W),M.vertexWrite(s(Math.ceil(d*e._halfReferenceWidth),0)),M.vertexWrite(e.minMaxZoom),M.vertexEnd(),e.offset+e.vertexCount++},f=(e,t,i)=>(o,l,n,a,m,p,x,f,_,u,v)=>{const y=r(0,0,d*e._halfWidth,d*e._halfReferenceWidth),c=r(d*x+128,d*f+128,d*_+128,d*u+128),W=e.out,M=e._bitset<<24|e.id;return W.vertexBounds(o,l,t,i),W.vertexWrite(s(h*o,h*l)),W.vertexWrite(M),W.vertexWrite(e._fillColor),e.key.simple||(W.vertexWrite(0),W.vertexWrite(0)),W.vertexWrite(y),W.vertexWrite(c),e.key.simple||W.vertexWrite(e.minMaxZoom),W.vertexEnd(),e.offset+e.vertexCount++},_=e=>(t,i,r)=>{const s=e.out;s.indexWrite(t),s.indexWrite(i),s.indexWrite(r),e.indexCount+=3};export{p as default};
