/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{removeUnordered as e}from"../../../core/arrayUtils.js";import t from"../../../core/Handles.js";import{getReferenceEllipsoid as s}from"../../../geometry/projectionEllipsoid.js";import{ClientType as i}from"./index.js";import{StreamTextureCollection as r}from"./StreamTextureCollection.js";import{getSettings as n,getLabelSettings as c}from"../webgl-engine/lib/screenSizePerspectiveUtils.js";import{TextureWrapMode as a}from"../../webgl/enums.js";class o{constructor(e){this.textures=null,this.streamDataRequester=null,this.graphicsOwners=[],this.screenSizePerspectiveHandles=null,this.cimSymbolRasterizer=null,this.viewState=e.viewState,this.view=e.view,this.pointsOfInterest=e.pointsOfInterest,this.objectResourceCache=e.objectResourceCache,this.streamDataRequester=e.resourceController.createStreamDataRequester(i.SYMBOLOGY),this.textures=new r(this.streamDataRequester,e.view._stage,{preMultiplyAlpha:!0,wrap:{s:a.CLAMP_TO_EDGE,t:a.CLAMP_TO_EDGE}},e.resourceController.scheduler);const t=s(this.view.spatialReference).radius;this.screenSizePerspectiveSettings=n(e.viewingMode,t),this.screenSizePerspectiveSettingsLabels=c(e.viewingMode,t)}destroy(){this.textures.destroy(),this.textures=null,this.streamDataRequester=null}addGraphicsOwner(t){if(!t)return{remove(){}};this.graphicsOwners.push(t);const s="layer"in t?t.watch("layer.screenSizePerspectiveEnabled",(()=>this._updateScreenSizePerspectiveEnabled())):null;return this._updateScreenSizePerspectiveEnabled(),{remove:()=>{s&&(s.remove(),e(this.graphicsOwners,t),this._updateScreenSizePerspectiveEnabled())}}}_updateScreenSizePerspectiveEnabled(){const e=this.graphicsOwners.some((e=>!0===e.get("layer.screenSizePerspectiveEnabled")));if(e&&!this.screenSizePerspectiveHandles){this.screenSizePerspectiveHandles=new t;const e=()=>this._updateScreenSizePerspectiveSettings();this.screenSizePerspectiveHandles.add([this.pointsOfInterest.centerOnSurfaceInfrequent.watch("distance",e,!0),this.viewState.events.on("camera-projection-changed",e)]),this._updateScreenSizePerspectiveSettings()}else!e&&this.screenSizePerspectiveHandles&&(this.screenSizePerspectiveHandles.destroy(),this.screenSizePerspectiveHandles=null)}_updateScreenSizePerspectiveSettings(){const e=this.pointsOfInterest;l.distance=e.centerOnSurfaceInfrequent.distance,l.fovY=this.viewState.camera.fovY,this.screenSizePerspectiveSettings.update(l),this.screenSizePerspectiveSettingsLabels.update(l),this.view._stage.renderView.requestRender()}}const l={distance:0,fovY:0};export{o as SharedSymbolResources,o as default};
