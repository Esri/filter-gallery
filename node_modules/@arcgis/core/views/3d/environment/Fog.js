/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{smoothstep as r}from"../../../core/mathUtils.js";import{releaseMaybe as s,disposeMaybe as i,isNone as o}from"../../../core/maybe.js";import{property as a}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as h}from"../../../core/accessorSupport/decorators/subclass.js";import{a as n}from"../../../chunks/mat4.js";import{c}from"../../../chunks/mat4f64.js";import{s as m}from"../../../chunks/vec2.js";import{a as u}from"../../../chunks/vec2f64.js";import{s as f,a as p,n as _,d as g,e as d,l}from"../../../chunks/vec3.js";import{c as v}from"../../../chunks/vec3f32.js";import{getReferenceEllipsoid as F}from"../../../geometry/projectionEllipsoid.js";import{atmosphereHeight as j}from"./atmosphereUtils.js";import{FogTechniqueConfiguration as T,FogTechnique as y}from"./FogTechnique.js";import{weatherHeightLimit as q}from"./weather.js";import{Pos2Tex as x}from"../webgl-engine/lib/DefaultVertexBufferLayouts.js";import{createQuadVAO as b}from"../webgl-engine/lib/glUtil3D.js";import{PrimitiveType as w}from"../../webgl/enums.js";let C=class extends t{constructor(e){super(e),this._projectionInverse=c(),this._viewInverse=c(),this._nearFar=u(),this._fogColor=v(),this._fogColorAtNight=v(),this._cameraDirection=v(),this._foggyFadeStart=.3,this._foggyFadeEnd=.6,this._hazeFadeStart=.7,this._hazeFadeEnd=1,this._strength=4e-6;const t=e.context.renderContext.rctx;this._vao=b(t,x);const r=F(e.view.spatialReference);this._planetRadius=r.radius,this._atmosphereRadius=r.radius+j}destroy(){this._hazeFogTechnique=s(this._hazeFogTechnique),this._thickFogTechnique=s(this._thickFogTechnique),this._vao=i(this._vao)}get _shaderTechniqueRepository(){return this.context.shaderTechniqueRepository}set strength(e){this._strength=e}get strength(){return this._strength}get thickFogTechnique(){if(o(this._thickFogTechnique)){const e=new T;e.haze=!1,this._thickFogTechnique=this._shaderTechniqueRepository.acquire(y,e)}return this._thickFogTechnique}get hazeFogTechnique(){if(o(this._hazeFogTechnique)){const e=new T;e.haze=!0,this._hazeFogTechnique=this._shaderTechniqueRepository.acquire(y,e)}return this._hazeFogTechnique}when(){return Promise.resolve()}render(e,t,r){if(0===this.view.basemapTerrain.baseOpacity&&!t)return;if(this._update(e,t,r),this._fogAmount<=0)return;const s=e.offscreenRenderingHelper,i=t?this.thickFogTechnique:this.hazeFogTechnique,o=e.rctx.useTechnique(i);s.renderDepthDetached((()=>{o.bindTexture(s.depthTexture,"depthTex"),this._renderFog(i.program,e)}))}_renderFog(e,t){if(o(this._vao))return!1;const r=t.rctx;return e.setUniform3fv("cameraPosition",t.camera.eye),e.setUniformMatrix4fv("inverseProjectionMatrix",this._projectionInverse),e.setUniformMatrix4fv("inverseViewMatrix",this._viewInverse),e.setUniform2fv("nearFar",this._nearFar),e.setUniform1f("atmosphereC",this._atmosphereC),e.setUniform1f("fogStrength",this._strength),e.setUniform1f("fogAmount",this._fogAmount),e.setUniform3fv("fogColor",this._fogColor),r.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),r.drawArrays(w.TRIANGLE_STRIP,0,4),!0}_update(e,t,s){if(o(e.camera))return;const i=t?.1:0;s?f(this._fogColor,.5,.5,.5):t?f(this._fogColor,1.5,1.5,1.5):f(this._fogColor,.24,.44,.8),p(this._fogColorAtNight,this._fogColor,i),_(this._cameraDirection,e.camera.eye);const a=Math.max(0,g(this._cameraDirection,e.scenelightingData.lightingMainDirection));d(this._fogColor,this._fogColorAtNight,this._fogColor,a),n(this._projectionInverse,e.camera.projectionMatrix),n(this._viewInverse,e.camera.viewMatrix),m(this._nearFar,e.camera.near,e.camera.far);const h=l(e.camera.eye),c=h*h;this._atmosphereC=c-this._atmosphereRadius*this._atmosphereRadius,this._fogAmount=t?1-r(this._foggyFadeStart*q,this._foggyFadeEnd*q,Math.abs(h-this._planetRadius)):1-r(this._hazeFadeStart*q,this._hazeFadeEnd*q,Math.abs(h-this._planetRadius))}static isSupported(e){return e.capabilities.depthTexture}};e([a({constructOnly:!0})],C.prototype,"context",void 0),e([a({constructOnly:!0})],C.prototype,"view",void 0),C=e([h("esri.views.3d.environment.Fog")],C);export{C as Fog};
