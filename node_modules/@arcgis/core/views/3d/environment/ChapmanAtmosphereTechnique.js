/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{C as r}from"../../../chunks/ChapmanAtmosphere.glsl.js";import{ReloadableShaderModule as i}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{parameter as t,ShaderTechniqueConfiguration as n}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../webgl-engine/lib/Program.js";import{BlendFactor as h,CompareFunction as l}from"../../webgl/enums.js";import{makePipelineState as m,separateBlendingParams as c,defaultColorWriteParams as g}from"../../webgl/renderState.js";class p extends o{initializeProgram(e){const r=p.shader.get(),i=this.configuration,o=r.build({haze:i.haze});return new a(e.rctx,o,s)}initializePipeline(){return this.configuration.haze?m({blending:c(h.ONE,h.ZERO,h.ONE_MINUS_SRC_COLOR,h.ONE),colorWrite:g}):m({blending:c(h.SRC_ALPHA,h.ONE,h.ONE_MINUS_SRC_ALPHA,h.ONE_MINUS_SRC_ALPHA),depthTest:{func:l.LEQUAL},colorWrite:g})}}p.shader=new i(r,(()=>import("./ChapmanAtmosphere.glsl.js")));class u extends n{constructor(){super(...arguments),this.haze=!1}}e([t()],u.prototype,"haze",void 0);export{p as ChapmanAtmosphereTechnique,u as ChapmanAtmosphereTechniqueConfiguration};
