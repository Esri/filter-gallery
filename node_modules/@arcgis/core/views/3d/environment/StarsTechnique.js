/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{m as e,c as r}from"../../../chunks/mat4.js";import{c as t}from"../../../chunks/mat4f64.js";import{S as i}from"../../../chunks/Stars.glsl.js";import{ReloadableShaderModule as o}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as a}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as n}from"../webgl-engine/lib/Program.js";import{BlendFactor as m,CompareFunction as l}from"../../webgl/enums.js";import{makePipelineState as c,separateBlendingParams as f,defaultColorWriteParams as p}from"../../webgl/renderState.js";class g extends a{constructor(e){super(e,null,(()=>this.destroy()))}initializeProgram(e){const r=g.shader.get().build();return new n(e.rctx,r,s)}initializePipeline(){return c({blending:f(m.SRC_ALPHA,m.ONE,m.ONE_MINUS_SRC_ALPHA,m.ONE_MINUS_SRC_ALPHA),depthTest:{func:l.LEQUAL},colorWrite:p})}bindPass(r){const t=this._makeInfiniteProjectionMatrix(r.camera.projectionMatrix,r.camera.near,u);e(t,t,r.camera.viewMatrix),e(t,t,r.modelMatrix),this.program.setUniformMatrix4fv("transform",t),this.program.setUniform4fv("viewport",r.camera.fullViewport),this.program.setUniform1f("pixelRatio",r.camera.pixelRatio)}_makeInfiniteProjectionMatrix(e,t,i){const o=24e-8;return r(i,e),i[10]=o-1,i[11]=-1,i[14]=(o-2)*t,i}}g.shader=new o(i,(()=>import("./Stars.glsl.js")));const u=t();export{g as StarsTechnique};
