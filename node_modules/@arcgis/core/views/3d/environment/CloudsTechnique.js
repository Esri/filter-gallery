/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{R as r,C as s}from"../../../chunks/Clouds.glsl.js";import{ReloadableShaderModule as t}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{parameter as i,ShaderTechniqueConfiguration as n}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as l}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../webgl-engine/lib/Program.js";import{BlendFactor as u,CompareFunction as c}from"../../webgl/enums.js";import{makePipelineState as m,separateBlendingParams as p,defaultColorWriteParams as d}from"../../webgl/renderState.js";class g extends o{constructor(e,r){super(e,r,(()=>this.destroy()))}initializeProgram(e){const r=g.shader.get().build({steps:this.configuration.steps});return new a(e.rctx,r,l)}initializePipeline(){return m({blending:p(u.ONE,u.ONE,u.ZERO,u.ZERO),depthTest:{func:c.LEQUAL},colorWrite:d})}}g.shader=new t(s,(()=>import("./Clouds.glsl.js")));class h extends n{constructor(){super(...arguments),this.steps=r.SIXTEEN}}e([i({count:r.COUNT})],h.prototype,"steps",void 0);export{g as CloudsTechnique,h as CloudsTechniqueConfiguration};
