/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{S as r,a as i}from"../../../chunks/SimpleAtmosphere.glsl.js";import{ReloadableShaderModule as o}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{parameter as n,ShaderTechniqueConfiguration as s}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as l}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as m}from"../webgl-engine/lib/Program.js";import{BlendFactor as g,CompareFunction as a}from"../../webgl/enums.js";import{makePipelineState as c,separateBlendingParams as u,backFaceCullingParams as h,defaultColorWriteParams as p}from"../../webgl/renderState.js";class d extends t{initializeProgram(e){const r=d.shader.get(),i=this.configuration,o=r.build({geometry:i.geometry});return new m(e.rctx,o,l)}initializePipeline(){return this.configuration.geometry===r.Cylinder?c({blending:u(g.SRC_ALPHA,g.ONE,g.ONE_MINUS_SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),culling:h,depthTest:{func:a.LEQUAL},colorWrite:p}):c({blending:u(g.SRC_ALPHA,g.ONE,g.ONE_MINUS_SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),depthTest:{func:a.LEQUAL},colorWrite:p})}}d.shader=new o(i,(()=>import("./SimpleAtmosphere.glsl.js")));class A extends s{constructor(){super(...arguments),this.geometry=r.Cone}}e([n({count:r.COUNT})],A.prototype,"geometry",void 0);export{d as SimpleAtmosphereTechnique,A as SimpleAtmosphereTechniqueConfiguration};
