/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{lerp as t,clamp as r}from"../../../core/mathUtils.js";import{removeMaybe as i,disposeMaybe as s,abortMaybe as o,isNone as a}from"../../../core/maybe.js";import{createResolver as n,throwIfAborted as h,isAbortError as c}from"../../../core/promiseUtils.js";import{init as l}from"../../../core/watchUtils.js";import{n as m}from"../../../chunks/mat4.js";import{c as u}from"../../../chunks/mat4f64.js";import{s as d}from"../../../chunks/vec2.js";import{a as p}from"../../../chunks/vec2f64.js";import{l as f,a as _,b as g,i as R,c as x,p as V}from"../../../chunks/vec3.js";import{c as j}from"../../../chunks/vec3f64.js";import{getReferenceEllipsoid as y}from"../../../geometry/projectionEllipsoid.js";import{isMars as C}from"../../../geometry/support/spatialReferenceUtils.js";import{requestImage as v}from"../../../support/requestImageUtils.js";import{computeInnerAltitudeFade as b,innerAtmosphereDepth as A}from"./atmosphereUtils.js";import{S as T}from"../../../chunks/SimpleAtmosphere.glsl.js";import{SimpleAtmosphereTechniqueConfiguration as w,SimpleAtmosphereTechnique as D}from"./SimpleAtmosphereTechnique.js";import q from"./resources/MarsAtmosphereTexture.js";import U from"./resources/SimpleAtmosphereTexture.js";import{makePiecewiseLinearFunction as S}from"../support/mathUtils.js";import{glLayout as F}from"../support/buffer/glUtil.js";import{newLayout as M}from"../support/buffer/InterleavedLayout.js";import{Default3D as I}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{createQuadVAO as L}from"../webgl-engine/lib/glUtil3D.js";import{project as O}from"../webgl-engine/lib/Util.js";import{VertexAttribute as E}from"../webgl-engine/lib/VertexAttribute.js";import{BufferObject as W}from"../../webgl/BufferObject.js";import{PixelFormat as k,PixelType as N,TextureWrapMode as G,TextureSamplingMode as B,PrimitiveType as H,Usage as P}from"../../webgl/enums.js";import{Texture as z}from"../../webgl/Texture.js";import{vertexCount as Y}from"../../webgl/Util.js";import{VertexArrayObject as J}from"../../webgl/VertexArrayObject.js";const K=e.getLogger("esri.views.3d.environment.SimpleAtmosphere"),Q=128,X=-A,Z=0,$=50,ee=()=>1-511/512,te=S([[50,.1015625],[500,.21875],[5e3,1-250/512],[5e4,.4140625]]);class re{constructor(e){this.view=e,this.type="simple",this._renderData={texV:p(),silCircleCenter:j(),silCircleV1:j(),silCircleV2:j(),altitudeFade:0,innerScale:0,undergroundFadeAlpha:0},this._texture=null,this._fadeVaoCount=0,this._readyResolver=n(),this._readyController=new AbortController,this.texV1=1,this.canRender=!0,this.isOnMars=C(e.spatialReference);const t=y(e.spatialReference);this.planetRadius=t.radius,this.outerRimWidth=t.outerAtmosphereRimWidth,this.innerRimFactor=(this.planetRadius+X)/this.planetRadius,this.middleRimFactor=(this.planetRadius+Z)/this.planetRadius,this.outerRimFactor=(this.planetRadius+this.outerRimWidth)/this.planetRadius,this.texV0=Z/this.outerRimWidth,this.texVScale=this.texV1-this.texV0}destroy(){this._readyResolver.reject(),this._cameraChangeHandle=i(this._cameraChangeHandle),this._texture=s(this._texture),this._fadeVao=s(this._fadeVao),this._vao=s(this._vao),this._readyController=o(this._readyController)}when(){return this._readyResolver.promise}async initializeRenderContext(e){this._shaderTechniqueRepository=e.shaderTechniqueRepository;const t=e.renderContext.rctx;this._cameraChangeHandle=l(this.view,"state.camera",(()=>e.requestRender()),!0),this._vao=this._createRibbon(t),this._vaoCount=Y(this._vao,"geometry"),this._fadeVao=L(t),this._fadeVaoCount=Y(this._fadeVao,"geometry");const r=this.isOnMars?q:U,i=this._readyController.signal;try{const s=await v(r,{signal:i});h(i),this._texture=new z(t,{pixelFormat:k.RGBA,dataType:N.UNSIGNED_BYTE,wrapMode:G.CLAMP_TO_EDGE,samplingMode:B.LINEAR,flipped:!0},s),e.requestRender(),this._readyController=null,this._readyResolver.resolve()}catch(s){c(s)||K.error("Unable to initialize simple atmosphere: image request failed",s),this._readyResolver.reject(s)}}get coneTechnique(){if(a(this._coneTechnique)){const e=new w;e.geometry=T.Cone,this._coneTechnique=this._shaderTechniqueRepository.acquire(D,e)}return this._coneTechnique}get undergroundTechnique(){if(a(this._undergroundTechnique)){const e=new w;e.geometry=T.Underground,this._undergroundTechnique=this._shaderTechniqueRepository.acquire(D,e)}return this._undergroundTechnique}render(e){this._update(e.camera);const t=e.rctx;if(this._renderData.undergroundFadeAlpha<1){const r=t.useTechnique(this.coneTechnique);r.setUniformMatrix4fv("proj",e.camera.projectionMatrix),r.setUniformMatrix4fv("view",e.camera.viewMatrix),r.setUniform3fv("silCircleCenter",this._renderData.silCircleCenter),r.setUniform3fv("silCircleV1",this._renderData.silCircleV1),r.setUniform3fv("silCircleV2",this._renderData.silCircleV2),r.setUniform2fv("texV",this._renderData.texV),r.bindTexture(this._texture,"tex"),e.scenelightingData.setLightDirectionUniform(r),r.setUniform1f("altitudeFade",this._renderData.altitudeFade),r.setUniform1f("innerScale",this._renderData.innerScale),t.bindVAO(this._vao),t.drawArrays(H.TRIANGLES,0,this._vaoCount)}if(this._renderData.undergroundFadeAlpha>0){const r=t.useTechnique(this.undergroundTechnique);r.setUniform1f("undergroundFadeAlpha",this._renderData.undergroundFadeAlpha),e.scenelightingData.setLightDirectionUniform(r),r.setUniform3fv("cameraPosition",e.camera.eye),t.bindVAO(this._fadeVao),t.drawArrays(H.TRIANGLE_STRIP,0,this._fadeVaoCount)}}renderHaze(){return!1}_update(e){const i=j(),s=this.planetRadius,o=f(e.eye),a=o-s;if(a<0){const e=Math.min(-a/5e3,1);this._renderData.undergroundFadeAlpha=e}else this._renderData.undergroundFadeAlpha=0;const n=Math.max($,a),h=s+X;this._renderData.innerScale=ne(s+n,s,h)-1,this._renderData.altitudeFade=b(a),_(i,e.eye,(s+$)/o),ie(i,e.center,e.up,s,this._renderData);const c=this._computeScreenRimWidth(e,i,e.up,this._renderData),l=ee(),m=te(a);let u=this.texV0+l*this.texVScale,p=this.texV0+c*m*this.texVScale;if(a>$){ie(e.eye,e.center,e.up,s,this._renderData);const i=this._computeScreenRimWidth(e,e.eye,e.up,this._renderData),o=r((i-1.5)/(c-1.5),0,1);u=this.texV0+o*l*this.texVScale,p=this.texV0+t(this.texV1,c*m,o)*this.texVScale}d(this._renderData.texV,u,p)}_createRibbon(e){const t=new Float32Array(3+3*Q*3),r=new Uint32Array(3*Q*5);t[0]=0,t[1]=0,t[2]=-1;for(let o=0;o<Q;o++){const e=9*o+3;t[e+0]=o,t[e+1]=this.innerRimFactor,t[e+2]=-1,t[e+3]=o,t[e+4]=this.middleRimFactor,t[e+5]=0,t[e+6]=o,t[e+7]=this.outerRimFactor,t[e+8]=1;const i=3*o+1,s=o===Q-1?1:i+3,a=15*o;r[a+0]=i,r[a+1]=i+1,r[a+2]=s+1,r[a+3]=s+1,r[a+4]=s,r[a+5]=i,r[a+6]=i+1,r[a+7]=i+2,r[a+8]=s+2,r[a+9]=s+2,r[a+10]=s+1,r[a+11]=i+1,r[a+12]=i,r[a+13]=s,r[a+14]=0}const i=he.createBuffer(r.length),s=i.position;for(let o=0;o<r.length;++o){const e=3*r[o];s.set(o,0,t[e]),s.set(o,1,t[e+1]),s.set(o,2,t[e+2])}return new J(e,I,{geometry:F(he)},{geometry:W.createVertex(e,P.STATIC_DRAW,i.buffer)})}_computeScreenRimWidth(e,t,r,i){return g(oe,i.silCircleCenter,i.silCircleV2),_(ae,oe,this.outerRimFactor),m(se,t,oe,r),O(oe,se,e.projectionMatrix,e.viewport),O(ae,se,e.projectionMatrix,e.viewport),R(oe,ae)/e.height}}function ie(e,t,r,i,s){const o=f(e),a=i*Math.sqrt(o*o-i*i)/o,n=Math.sqrt(i*i-a*a),h=s.silCircleV1,c=s.silCircleV2;return _(s.silCircleCenter,e,n/o),x(h,e,t),V(h)<1&&x(h,e,r),_(h,h,a/f(h)),x(c,h,e),_(c,c,a/f(c)),a}const se=u(),oe=j(),ae=j();function ne(e,t,r){return e*e/(Math.sqrt(e*e-t*t)*Math.sqrt(e*e-r*r)+t*r)}const he=M().vec3f(E.POSITION);export{re as default};
