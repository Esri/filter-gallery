/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import a from"../../../core/Accessor.js";import i from"../../../core/Handles.js";import{deg2rad as e,rad2deg as s}from"../../../core/mathUtils.js";import{destroyMaybe as r,isNone as n}from"../../../core/maybe.js";import{init as o}from"../../../core/watchUtils.js";import{property as c}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as l}from"../../../core/accessorSupport/decorators/subclass.js";import{ViewingMode as h}from"../../ViewingMode.js";import{applyAll as u}from"../camera/constraintUtils.js";import{surfaceElevationBelowRenderLocation as d}from"../camera/intersectionUtils.js";import{ConstraintTypes as p,InteractionType as m,TiltMode as w}from"../camera/constraintUtils/common.js";import{createNearFarHeuristic as v}from"./NearFarHeuristic.js";import _ from"./SurfaceCollisionConstraint.js";let C=class extends a{constructor(t){super(t),this._handles=new i,this.nearFarHeuristic=v(t.view.state.viewingMode,t.view.basemapTerrain,t.view.renderCoordsHelper.spatialReference)}initialize(){this._handles.add([this.view.watch(["constraints.clipDistance.near","constraints.clipDistance.far"],(()=>this._clipDistanceNearFarChanged())),this.view.watch("constraints.clipDistance.mode",(()=>this._updateNearFar())),this.view.state.events.on("before-camera-change",(t=>this._updateCameraNearFar(t.camera))),this.view.watch("renderDataExtent",(()=>this._updateNearFar()),!0),this.view.watch(["constraints.altitude.min","constraints.altitude.max"],(()=>this._updateAltitude()),!0),this.view.watch("constraints.tilt.max",(()=>this._updateTiltMax()),!0),this.view.watch("constraints.tilt.mode",(()=>this._updateTilt()),!0),this.view.watch("state.camera",(()=>this._updateTiltAutoMax()),!0),this.view.watch(["map.ground.navigationConstraint.type","constraints.collision.enabled"],(()=>this._updateCollision()),!0)]),this.view.state.isLocal&&this._handles.add(o(this.view,"renderDataExtent",(t=>this._updateLocalSurfaceDistance(t)))),this._updateNearFar(),this.view.state.viewingMode!==h.Local&&this._updateAltitude(),this._updateTilt(),this._updateCollision(),this._set("surfaceCollisionConstraint",new _({view:this.view}))}destroy(){this._handles=r(this._handles),this.surfaceCollisionConstraint&&(this.surfaceCollisionConstraint.destroy(),this._set("surfaceCollisionConstraint",null))}_clipDistanceNearFarChanged(){var t;const a=null==(t=this.view.constraints)?void 0:t.clipDistance;a&&"auto"!==a.mode&&this.view.state.updateCamera((t=>(this._updateCameraNearFarManual(t,a),!0)))}_updateNearFar(){this.view.state.updateCamera((t=>(this._updateCameraNearFar(t),!0)))}_updateCameraNearFar(t){const a=this.view.constraints&&this.view.constraints.clipDistance;"manual"===(a?a.mode:"auto")?this._updateCameraNearFarManual(t,a):this._updateCameraNearFarAuto(t,a)}_updateCameraNearFarAuto(t,a){this.nearFarHeuristic.compute(t.eye,t.center,this.view.renderDataExtent,d(this.view,t.eye),t),a&&a.autoUpdate(t.near,t.far)}_updateCameraNearFarManual(t,a){a&&(t.near=a.near,t.far=a.far)}_updateCollision(){var t,a,i;const e=null==(t=this.view.map)||null==(a=t.ground)||null==(i=a.navigationConstraint)?void 0:i.type,s=!e||"stay-above"===e,r=this.view.state.constraints.collision;if(s!==r.enabled){r.enabled=s,s&&this._reapplyConstraints(p.COLLISION);const t=this.view.constraints&&this.view.constraints.tilt;t&&"auto"!==t.mode||this._updateTiltAuto()}}_updateAltitude(){const t=this.view.constraints&&this.view.constraints.altitude;t&&this.view.state.viewingMode!==h.Local?this.view.state.constraints.altitude={min:t.min,max:t.max}:this.view.state.constraints.altitude=null,this._reapplyConstraints()}_updateTiltMax(){const t=this.view.constraints&&this.view.constraints.tilt;t&&"auto"!==t.mode&&(this._updateTiltManual(t),this._reapplyConstraints())}_updateTilt(){const t=this.view.constraints&&this.view.constraints.tilt;"manual"===(t?t.mode:"auto")?this._updateTiltManual(t):this._updateTiltAuto(),this._reapplyConstraints()}_updateTiltManual(t){const a=this.view.state.constraints;a.tilt=a.createConstantMaxTilt(e(t.max))}_updateTiltAuto(){const t=this.view.state.constraints;t.tilt=t.createDefaultTilt(),this._updateTiltAutoMax()}_updateTiltAutoMax(){const t=this.view.constraints&&this.view.constraints.tilt;if(!t||"auto"!==t.mode)return;const a=this.view.state.constraints;if(a.tilt){const i=a.tilt(this.view.state.camera.distance).max;t.autoUpdate(s(i))}}_updateLocalSurfaceDistance(t){if(n(t))return;let a=Math.max(t.width,t.height);if(a<=0)return;t.hasZ&&(a=Math.max(a,t.zmax-t.zmin));const i=this.view.state,e=3*a/Math.atan(i.camera.fov/2);e!==i.constraints.distance&&(i.constraints.distance=e)}_reapplyConstraints(t=p.ALL){this.view.state.updateCamera((a=>u(this.view,a,{selection:t,interactionType:m.NONE,interactionFactor:null,interactionStartCamera:null,interactionDirection:null,tiltMode:w.TUMBLE})))}};t([c({constructOnly:!0})],C.prototype,"view",void 0),t([c({readOnly:!0})],C.prototype,"surfaceCollisionConstraint",void 0),C=t([l("esri.views.3d.state.ConstraintsManager")],C);const f=C;export{C as ConstraintsManager,f as default};
