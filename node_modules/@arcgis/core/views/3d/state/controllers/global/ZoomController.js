/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{clamp as i}from"../../../../../core/mathUtils.js";import{createScreenPointArray as r}from"../../../../../core/screenUtils.js";import{property as e}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import{subclass as s}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as a}from"../../../../../chunks/vec2.js";import{a as n}from"../../../../../chunks/vec2f64.js";import{n as o,a as c,b as h,f as m,l as p}from"../../../../../chunks/vec3.js";import{c as l}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as u}from"../../../../../geometry/projectionEllipsoid.js";import{create as y,fromPoints as C}from"../../../../../geometry/support/axisAngle.js";import{c as P}from"../../../../../chunks/sphere.js";import{pixelDistanceToInteractionFactor as f,applyAll as d}from"../../../camera/constraintUtils.js";import{ConstraintTypes as g,InteractionType as v,TiltMode as j}from"../../../camera/constraintUtils/common.js";import{InteractiveController as R}from"../InteractiveController.js";import{normalizeCoordinate as k,pickPointAndInitSphere as w,decideNavigationMode as A,NavigationMode as D,DISTANCE_CLAMP_VALUES as O,PIVOT_DISTANCE_MODIFIER as M,SCREEN_PIXEL_AREA as S,sphereOrPlanePointFromScreenPoint as U,applyRotation as b}from"../../utils/navigationUtils.js";import{fromScreenAtEye as z}from"../../../support/geometryUtils/ray.js";import{applySurfaceCollisionConstraint as x}from"../../../camera/constraintUtils/surfaceCollision.js";let B=class extends R{constructor(t){super(t),this.view=null,this.pickPoint=l(),this.tmpP0=n(),this.panAxisAngle=y(),this.tmpRayDir=l(),this.targetOnSphere=l(),this.tmpRay={origin:l(),direction:l()},this.dragBeginPoint=r(),this.normalizedAnchorPoint=n(),this.constraintOptions={selection:g.ALL_EXCEPT_COLLISION,interactionType:v.ZOOM,interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:j.TUMBLE},this.sphere=P(),this.hasPickPoint=!1}get intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;a(this.dragBeginPoint,t),k(this.startCamera,t,this.normalizedAnchorPoint);const r=u(this.view.spatialReference),e=w(this.intersectionHelper,this.startCamera,t,!1,r);if(this.navMode=A(this.startCamera,t,e.hasGeometryIntersection,r),this.navMode===D.Horizontal)this.hasPickPoint=!!e.scenePickPoint,this.pickPoint=e.scenePickPoint,this.sphere=e.sphere;else{let r;z(this.startCamera,t,this.tmpRay),o(this.tmpRay.direction,this.tmpRay.direction),this.view.camera.position.hasZ&&(r=Math.abs(this.view.camera.position.z));let e=i(M*r,O[0],O[1]);const s=this.view._stage.renderView.getMinimalDepthForArea(null,t[0],t[1],this.view.state.camera,S);e=e>s?s:e,this.hasPickPoint=!0,c(this.tmpRay.direction,this.tmpRay.direction,e),h(this.pickPoint,this.tmpRay.origin,this.tmpRay.direction)}this.constraintOptions.interactionStartCamera=this.startCamera}update(t){if(this.active){if(this.currentCamera.eye=this.startCamera.eye,this.currentCamera.center=this.startCamera.center,this.currentCamera.up=this.startCamera.up,this.navMode===D.Horizontal){m(this.tmpRayDir,this.currentCamera.center,this.currentCamera.eye);const i=p(this.tmpRayDir);k(this.currentCamera,t,this.tmpP0);const r=12*(this.normalizedAnchorPoint[1]-this.tmpP0[1]);let e=i*2**r;const s=this.view.state.constraints.minimumPoiDistance;if(r<0&&e<s&&(e=s),Math.abs(i-e)<1e-6)return;if(this.hasPickPoint&&e<i){const t=1-(1-e/i)*(1-this.sphere[3]/p(this.currentCamera.center));this.currentCamera.center=c(H,this.currentCamera.center,t)}c(this.tmpRayDir,this.tmpRayDir,-e/i),this.currentCamera.eye=h(H,this.currentCamera.center,this.tmpRayDir),this.constraintOptions.interactionFactor=f(this.dragBeginPoint,t),d(this.view,this.currentCamera,this.constraintOptions),this.hasPickPoint&&(U(this.sphere,this.currentCamera,this.dragBeginPoint,this.targetOnSphere),C(this.pickPoint,this.targetOnSphere,this.panAxisAngle),b(this.currentCamera,this.sphere,this.panAxisAngle))}else{const i=p(this.tmpRay.direction);k(this.currentCamera,t,this.tmpP0);const r=12*(this.normalizedAnchorPoint[1]-this.tmpP0[1]);let e=i*2**r;const s=this.view.state.constraints.minimumPoiDistance;if(r<0&&e<s&&(e=s),Math.abs(i-e)<1e-6)return;c(this.tmpRayDir,this.tmpRay.direction,1-e/i),this.currentCamera.eye=h(H,this.currentCamera.eye,this.tmpRayDir),this.currentCamera.center=h(H,this.currentCamera.center,this.tmpRayDir)}x(this.view,this.currentCamera)}}end(){this.active&&this.finishController()}};t([e({constructOnly:!0})],B.prototype,"view",void 0),B=t([s("esri.views.3d.state.controllers.global.ZoomController")],B);const H=l();export{B as ZoomController};
