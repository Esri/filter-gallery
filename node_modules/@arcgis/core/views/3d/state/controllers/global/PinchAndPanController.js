/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{deg2rad as i}from"../../../../../core/mathUtils.js";import{createScreenPointArray as e,screenPointObjectToArray as n,createRenderScreenPointArray3 as s}from"../../../../../core/screenUtils.js";import{property as o}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import{subclass as r}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as a}from"../../../../../chunks/vec2.js";import{g as m,o as h,l as c,f as p,n as l,b as u,a as P,d}from"../../../../../chunks/vec3.js";import{c as g}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as v}from"../../../../../geometry/projectionEllipsoid.js";import{wrapAxisAngle as M}from"../../../../../geometry/support/axisAngle.js";import{create as C,fromPositionAndNormal as S,normal as w}from"../../../../../geometry/support/plane.js";import{c as b}from"../../../../../chunks/sphere.js";import{pixelDistanceToInteractionFactor as f,applyAll as j}from"../../../camera/constraintUtils.js";import{ConstraintTypes as E,InteractionType as O,TiltMode as y}from"../../../camera/constraintUtils/common.js";import{ExponentialFalloff as k}from"../../../input/util.js";import{InteractiveController as A}from"../InteractiveController.js";import{PanPlanarMomentumController as z}from"../momentum/PanPlanarMomentumController.js";import{PanSphericalMomentumController as R}from"../momentum/PanSphericalMomentumController.js";import{RotationMomentumController as x}from"../momentum/RotationMomentumController.js";import{ZoomPlanarMomentumController as _}from"../momentum/ZoomPlanarMomentumController.js";import{ZoomSphericalMomentumController as H}from"../momentum/ZoomSphericalMomentumController.js";import{NavigationMode as F,pickPointAndInitSphere as T,decideNavigationMode as U,sphereOrPlanePointFromScreenPoint as D,intersectPlaneFromScreenPointAtEye as I,applyZoomOnSphere as L,preserveHeadingThreshold as Z,applyPanSphericalPreserveHeading as N,applyPanSphericalDirectRotation as B,normalizeRotationDelta as G,applyRotation as V,applyPanPlanar as q,applyZoomToPoint as J}from"../../utils/navigationUtils.js";import{cyclicalPI as K}from"../../../support/mathUtils.js";import Q from"../../../webgl-engine/lib/Camera.js";import{PanPlanarMomentumEstimator as W}from"../../../../navigation/PanPlanarMomentumEstimator.js";import{PanSphericalMomentumEstimator as X}from"../../../../navigation/PanSphericalMomentumEstimator.js";import{RotationMomentumEstimator as Y}from"../../../../navigation/RotationMomentumEstimator.js";import{ZoomMomentumEstimator as $}from"../../../../navigation/ZoomMomentumEstimator.js";let tt=class extends A{constructor(t){super(t),this.view=null,this.smoothRotation=new k(.05),this.rotationAxis=g(),this.panningPlane=C(),this.smoothScaling=new k(.05),this.zoomCenterScreen=e(),this.zoomMomentumEstimator=new $,this.rotationMomentumEstimator=new Y,this.panSphericalMomentumEstimator=new X,this.panPlanarMomentumEstimator=new W,this.adjustedSphere=b(),this.tmp3d=g(),this.tmpScreenPointArray=e(),this.beginScreenPoint=e(),this.beginScenePoint=g(),this.screenPickPoint=e(),this.navMode=F.Horizontal,this.tmpInteractionDirection=g(),this.constraintOptions={selection:E.ALL,interactionType:O.NONE,interactionFactor:0,interactionStartCamera:new Q,interactionDirection:null,tiltMode:y.TUMBLE}}get intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=e,this.rotationMomentumEstimator.enabled=e,this.panPlanarMomentumEstimator.enabled=e,this.panSphericalMomentumEstimator.enabled=e,this.beginHeading=-K.normalize(i(this.view.camera.heading)),this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.smoothRotation.reset(),n(t.center,this.screenPickPoint),a(this.beginScreenPoint,this.screenPickPoint);const s=v(this.view.spatialReference),o=T(this.intersectionHelper,this.startCamera,this.screenPickPoint,!0,s);this.scenePickPoint=o.scenePickPoint,this.sphere=o.sphere,m(this.beginScenePoint,this.scenePickPoint),this.navMode=U(this.startCamera,this.screenPickPoint,o.hasGeometryIntersection,s),this.navMode===F.Vertical&&this._preparePlanarPanMode(t),this.constraintOptions.interactionStartCamera.copyFrom(this.startCamera)}_preparePlanarPanMode(t){const i=h(this.tmp3d,this.startCamera.viewForward);S(this.scenePickPoint,i,this.panningPlane);const o=e(this.screenPickPoint[0],0),r=g(),a=c(this.startCamera.eye);this.adjustedSphere[3]=a<this.sphere[3]?a-100:this.sphere[3],D(this.adjustedSphere,this.startCamera,o,r);const v=s();this.startCamera.projectToRenderScreen(r,v);const M=.9*v[1];this.screenPickPoint[1]=Math.min(this.screenPickPoint[1],M),this.intersectionHelper.intersectScreen(this.screenPickPoint,this.scenePickPoint)&&S(this.scenePickPoint,w(this.panningPlane),this.panningPlane);const C=g(),b=g(),f=g(),j=80,E=5,O=50;p(C,this.scenePickPoint,this.currentCamera.eye),l(C,C);const y=E*Math.max(Math.abs(this.view.camera.position.z),O),k=this.view._stage.renderView.getMinimalDepthForArea(null,this.screenPickPoint[0],this.screenPickPoint[1],this.view.state.camera,j),A=k?Math.min(k,y):y;m(f,u(b,this.currentCamera.eye,P(b,C,A))),this.panningPlane[3]=-d(this.panningPlane,f),this.startCamera.center=u(b,this.startCamera.eye,P(b,this.startCamera.viewForward,A));const z=n(t.center,this.tmpScreenPointArray);I(this.panningPlane,this.startCamera,z,this.beginScenePoint)}update(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const i=t.pointers.size>1;this.navMode===F.Horizontal?(i&&this._zoomSpherical(t),this._panningSpherical(t),i&&this._rotateSpherical(t)):(i&&this._zoomPlanar(t),this._panningPlanar(t),i&&this._rotatePlanar(t))}end(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const i=this.zoomMomentumEstimator.evaluateMomentum();if(i)return this.navMode===F.Horizontal?new H({view:this.view,momentum:i,screenCenter:this.zoomCenterScreen,sceneCenter:this.beginScenePoint,radius:this.sphere[3]}):new _({view:this.view,momentum:i,zoomCenter:this.beginScenePoint});const e=this.rotationMomentumEstimator.evaluateMomentum();if(e)return new x({view:this.view,momentum:e,center:this.sphere,axis:this.rotationAxis});if(this.navMode===F.Horizontal){const t=this.panSphericalMomentumEstimator.evaluateMomentum();if(t)return new R({view:this.view,momentum:t})}else{const t=this.panPlanarMomentumEstimator.evaluateMomentum();if(t)return new z({view:this.view,momentum:t})}return null}_zoomSpherical(t){const i=this.beginRadius/t.radius,e=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=e,this.smoothScaling.update(i),L(this.sphere,this.currentCamera,this.smoothScaling.value),n(t.center,this.zoomCenterScreen),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),this.constraintOptions.interactionType=O.ZOOM,this.constraintOptions.interactionFactor=f(t.radius-this.beginRadius),j(this.view,this.currentCamera,this.constraintOptions)}_panningSpherical(t){const i=n(t.center,this.tmpScreenPointArray);D(this.sphere,this.currentCamera,i,this.tmp3d),Z(this.beginScenePoint,d(this.currentCamera.up,this.beginScenePoint),this.sphere[3],this.beginHeading,this.view.camera.tilt,this.startCamera)?(N(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.beginHeading,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumPreserveHeading(i,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere,this.beginHeading,this.view.camera.tilt)):(B(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumDirectRotation(i,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere[3],this.view.camera.tilt)),this.constraintOptions.interactionType=O.PAN,this.constraintOptions.interactionFactor=f(this.screenPickPoint,i),j(this.view,this.currentCamera,this.constraintOptions)}_rotateSpherical(t){l(this.rotationAxis,this.scenePickPoint),this.currentCamera.aboveGround||h(this.rotationAxis,this.rotationAxis);const i=this.smoothRotation.value,e=i+G(t.angle-i),n=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=n,this.smoothRotation.update(e);const s=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(s,.001*t.timestamp),V(this.currentCamera,this.sphere,M(this.rotationAxis,s)),this.constraintOptions.interactionType=O.TUMBLE,this.constraintOptions.interactionFactor=f(t.radius*e),j(this.view,this.currentCamera,this.constraintOptions)}_panningPlanar(t){const i=n(t.center,this.tmpScreenPointArray);I(this.panningPlane,this.currentCamera,i,this.tmp3d)&&(q(this.currentCamera,this.beginScenePoint,this.tmp3d),this.panPlanarMomentumEstimator.add(i,this.tmp3d,.001*t.timestamp),this.constraintOptions.interactionType=O.PAN,this.constraintOptions.interactionFactor=f(this.beginScreenPoint,i),this.constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this.tmpInteractionDirection),j(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null)}_zoomPlanar(t){const i=this.beginRadius/t.radius,e=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=e,this.smoothScaling.update(i),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),J(this.currentCamera,this.beginScenePoint,this.smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this.constraintOptions.interactionType=O.ZOOM,this.constraintOptions.interactionFactor=f(t.radius-this.beginRadius),j(this.view,this.currentCamera,this.constraintOptions)}_rotatePlanar(t){m(this.rotationAxis,this.beginScenePoint),this.currentCamera.aboveGround||h(this.rotationAxis,this.rotationAxis);const i=this.smoothRotation.value;let e=t.angle-i;e=G(e);const n=i+e,s=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=s,this.smoothRotation.update(n);const o=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(o,.001*t.timestamp),V(this.currentCamera,this.sphere,M(this.rotationAxis,o)),this.constraintOptions.interactionType=O.TUMBLE,this.constraintOptions.interactionFactor=f(t.radius*o),j(this.view,this.currentCamera,this.constraintOptions)}};t([o({constructOnly:!0})],tt.prototype,"view",void 0),tt=t([r("esri.views.3d.state.controllers.global.PinchAndPanController")],tt);export{tt as PinchAndPanController};
