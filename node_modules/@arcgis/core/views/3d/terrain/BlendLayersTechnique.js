/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{BlendMode as r}from"../webgl-engine/core/shaderLibrary/output/BlendOptions.js";import{B as o}from"../../../chunks/BlendLayers.glsl.js";import{ReloadableShaderModule as i}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as n}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{parameter as t,ShaderTechniqueConfiguration as s}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as l}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../webgl-engine/lib/Program.js";import{BlendFactor as m}from"../../webgl/enums.js";import{simpleBlendingParams as u,makePipelineState as c,defaultColorWriteParams as d}from"../../webgl/renderState.js";class g extends n{initializeProgram(e){const r=g.shader.get().build();return new a(e.rctx,r,l)}initializePipeline(){const e=this.configuration.mode===r.OneMinusSourceAlpha?u(m.ONE,m.ONE_MINUS_SRC_ALPHA):this.configuration.mode===r.SourceAlpha?u(m.ZERO,m.SRC_ALPHA):null;return c({blending:e,colorWrite:d})}}g.shader=new i(o,(()=>import("../webgl-engine/core/shaderLibrary/util/BlendLayers.glsl.js")));class h extends s{constructor(){super(...arguments),this.mode=r.NoAlpha}}e([t({count:r.COUNT})],h.prototype,"mode",void 0);export{g as BlendLayersTechnique,h as BlendLayersTechniqueConfiguration};
