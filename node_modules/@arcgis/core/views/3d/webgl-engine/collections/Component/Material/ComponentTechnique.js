/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../../chunks/tslib.es6.js";import{isSome as r}from"../../../../../../core/maybe.js";import{c as o}from"../../../../../../chunks/mat3f64.js";import{c as t}from"../../../../../../chunks/vec4f64.js";import{ComponentDataType as i}from"./shader/ComponentData.glsl.js";import{C as s}from"../../../../../../chunks/ComponentShader.glsl.js";import{VertexDiscardMode as a}from"./shader/VertexDiscardByOpacity.glsl.js";import{RenderPassIdentifier as n,MaterialSubPass as l}from"../../../core/renderPasses/AllRenderPasses.js";import{ShaderOutput as d}from"../../../core/shaderLibrary/ShaderOutputOptions.js";import{bindSliceUniforms as p}from"../../../core/shaderLibrary/Slice.glsl.js";import{NormalAttributeType as u}from"../../../core/shaderLibrary/attributes/NormalAttribute.glsl.js";import{TextureCoordinateAttributeType as c}from"../../../core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js";import{bindViewProjTransform as h,bindModelTransform as m,VertexPositionModelTransform as b}from"../../../core/shaderLibrary/attributes/VertexPosition.glsl.js";import{bindOutputHighlight as f}from"../../../core/shaderLibrary/output/OutputHighlight.glsl.js";import{NormalsDoubleSidedMode as T}from"../../../core/shaderLibrary/shading/Normals.glsl.js";import{bindPBRUniforms as x,PBRMode as g}from"../../../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{bindSSRUniforms as v}from"../../../core/shaderLibrary/shading/ScreenSpaceReflections.glsl.js";import{doublePrecisionRequiresObfuscation as y}from"../../../core/shaderLibrary/util/DoublePrecision.glsl.js";import{EllipsoidMode as M}from"../../../core/shaderLibrary/util/EllipsoidMode.js";import{ReloadableShaderModule as C}from"../../../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as O}from"../../../core/shaderTechnique/ShaderTechnique.js";import{parameter as N,ShaderTechniqueConfiguration as S}from"../../../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{CullFaceOptions as P,AlphaDiscardMode as E,TransparencyPassType as U,StencilBits as j}from"../../../lib/basicInterfaces.js";import{blendingDefault as D,oitBlending as A,oitDepthTest as w,OITPolygonOffset as F}from"../../../lib/OrderIndependentTransparency.js";import{Program as R}from"../../../lib/Program.js";import{stencilWriteMaskOn as L,replaceBitWhenDepthTestPasses as W,stencilBaseAllZerosParams as V}from"../../../lib/StencilUtils.js";import{makePipelineState as G,cullingParams as q,defaultDepthWriteParams as H,defaultColorWriteParams as _}from"../../../../../webgl/renderState.js";class z extends O{bindPass(e){const r=this.program;h(r,e.viewTransform),p(this.program,this.configuration,e.slicePlane),e.identifier===n.Material&&(void 0!==e.ssrParams&&v(this.program,e.ssrParams),r.setUniformMatrix3fv("transformNormalViewFromGlobal",e.transformNormalViewFromGlobal),e.subPass===l.Depth&&r.setUniform2fv("nearFar",e.nearFar),e.subPass===l.Color&&e.lighting.setUniforms(this.program,e.integratedMesh,e.hasFillLights)),e.identifier===n.ShadowMap&&this.program.setUniform2fv("nearFar",e.nearFar)}bindMaterial(e,o){this._material=e;const t=this.program;t.setUniform4fv("baseColor",e.baseColor),t.setUniform1f("objectOpacity",e.objectOpacity),t.setUniform1f("textureAlphaCutoff",e.alphaCutoff),e.componentParameters.type===i.Varying?e.componentParameters.texture.bind(t,"componentColorTex","componentColorTexInvDim"):(t.setUniform4fv("externalColor",e.componentParameters.externalColor),t.setUniform1i("externalColorMixMode",e.componentParameters.externalColorMixMode)),r(e.baseColorTexture)&&e.baseColorTexture.bind(t,"baseColorTexture","baseColorTextureSize"),this.configuration.output!==d.Color&&this.configuration.output!==d.Alpha||(x(this.program,e,this.configuration.isSchematic),r(e.metallicRoughnessTexture)&&e.metallicRoughnessTexture.bind(t,"texMetallicRoughness","texMetallicRoughnessSize"),r(e.emissionTexture)&&e.emissionTexture.bind(t,"texEmission","texEmissionSize"),r(e.occlusionTexture)&&e.occlusionTexture.bind(t,"texOcclusion","texOcclusionSize"),r(e.normalTexture)&&e.normalTexture.bind(t,"normalTexture","normalTextureSize")),e.isIntegratedMesh&&(o.identifier===n.Material&&o.subPass===l.Color?(t.bindTexture(e.overlayColor,"ovColorTex"),t.bindTexture(e.overlayNormal,"ovNormalTex")):o.identifier===n.Highlight&&t.bindTexture(e.overlayHighlight,"ovColorTex"),t.setUniform1f("overlayOpacity",1)),o.identifier===n.Highlight&&f(this.program,o),o.identifier===n.Material&&o.subPass===l.Color&&(o.ambientOcclusionEnabled&&o.bindAmbientOcclusion(t),o.shadowsEnabled&&o.bindShadowMap(t)),o.identifier!==n.Material||o.subPass!==l.Color&&o.subPass!==l.Alpha||!o.multipassTerrainParams.multipassTerrainEnabled||(this.program.setUniform2fv("nearFar",o.nearFar),t.setUniform2fv("inverseViewport",o.inverseViewport),o.multipassTerrainParams.terrainLinearDepthTexture&&t.bindTexture(o.multipassTerrainParams.terrainLinearDepthTexture,"terrainDepthTexture"))}bindDraw(e){if(m(this.program,e),this.program.setUniformMatrix3fv("transformNormalGlobalFromModel",e.transformNormalGlobalFromModel),this.program.rebindTextures(),r(this._material)&&this._material.isIntegratedMesh){const r=this._material.overlayTexScale,o=this._material.overlayTexOffset;this.program.setUniform4fv("overlayTexOffset",[e.toMapSpace[0]*r[0]+o[0],e.toMapSpace[1]*r[1]+o[1],e.toMapSpace[0]*r[2]+o[2],e.toMapSpace[1]*r[3]+o[3]]),this.program.setUniform4fv("overlayTexScale",[e.toMapSpace[2]*r[0],e.toMapSpace[3]*r[1],e.toMapSpace[2]*r[2],e.toMapSpace[3]*r[3]])}}initializeProgram(e){const r=z.shader.get(),o=this.configuration,t=r.build({multipassTerrainEnabled:o.multipassTerrainEnabled,cullAboveGround:o.cullAboveGround,oitEnabled:o.transparencyPassType===U.Color,output:o.output,normalType:o.integratedMeshMode===B.None?o.hasNormals?u.CompressedAttribute:u.ScreenDerivative:u.Ground,attributeColor:o.hasVertexColors,attributeTextureCoordinates:o.vertexTextureCoordinates,componentData:o.componentData,alphaDiscardMode:o.alphaDiscardMode,baseColorTexture:o.baseColorTexture,doubleSidedMode:o.doubleSidedMode,receiveAmbientOcclusion:o.receiveAmbientOcclusion,receiveShadows:o.receiveShadows,slicePlaneEnabled:o.slicePlaneEnabled,sliceHighlightDisabled:!1,sliceEnabledForVertexPrograms:!1,viewingMode:e.viewingMode,vertexDiscardMode:o.vertexDiscardMode,pbrMode:o.integratedMeshMode===B.ColorOverlayWithWater?g.WaterOnIntegratedMesh:o.usePBR?o.isSchematic?g.Schematic:g.Normal:g.Disabled,hasMetalnessAndRoughnessTexture:o.hasMetalnessAndRoughnessTexture,hasEmissionTexture:o.hasEmissionTexture,hasOcclusionTexture:o.hasOcclusionTexture,hasNormalTexture:o.hasNormalTexture,vertexTangents:!1,supportsTextureAtlas:!0,doublePrecisionRequiresObfuscation:y(e.rctx),overlayEnabled:o.integratedMeshMode===B.ColorOverlay||o.integratedMeshMode===B.ColorOverlayWithWater,ssrEnabled:o.ssrEnabled,highStepCount:!1,ellipsoidMode:o.ellipsoidMode});return new R(e.rctx,t,r.attributeLocations)}_setPipelineState(e){const r=this.configuration,o=r.integratedMeshMode!==B.None,t=e===U.NONE,i=e===U.FrontFace;return G({blending:r.output!==d.Color&&r.output!==d.Alpha||!r.blendingEnabled?null:t?D:A(e),culling:q(r.cullFace),depthTest:{func:w(e)},depthWrite:t||i?H:null,colorWrite:_,stencilWrite:o||r.sceneHasOcludees?L:null,stencilTest:o?W(j.IntegratedMeshMaskExcluded):r.sceneHasOcludees?V:null,polygonOffset:t||i?r.polygonOffsetEnabled?{factor:2,units:2}:null:F})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}z.shader=new C(s,(()=>import("./shader/ComponentShader.glsl.js")));class I extends b{constructor(){super(...arguments),this.transformNormalGlobalFromModel=o(),this.toMapSpace=t()}}var k,B;!function(e){e[e.None=0]="None",e[e.Transparent=1]="Transparent",e[e.Opaque=2]="Opaque",e[e.COUNT=3]="COUNT"}(k||(k={})),function(e){e[e.None=0]="None",e[e.NoOverlay=1]="NoOverlay",e[e.ColorOverlay=2]="ColorOverlay",e[e.ColorOverlayWithWater=3]="ColorOverlayWithWater",e[e.COUNT=4]="COUNT"}(B||(B={}));class J extends S{constructor(){super(...arguments),this.output=d.Color,this.hasVertexColors=!1,this.hasNormals=!1,this.vertexTextureCoordinates=c.None,this.componentData=i.Uniform,this.slicePlaneEnabled=!1,this.cullFace=P.Back,this.baseColorTexture=!1,this.receiveAmbientOcclusion=!0,this.receiveShadows=!0,this.vertexDiscardMode=a.None,this.doubleSidedMode=T.WindingOrder,this.blendingEnabled=!0,this.alphaDiscardMode=E.Opaque,this.integratedMeshMode=B.None,this.ssrEnabled=!1,this.polygonOffsetEnabled=!1,this.usePBR=!1,this.isSchematic=!1,this.hasMetalnessAndRoughnessTexture=!1,this.hasEmissionTexture=!1,this.hasOcclusionTexture=!1,this.hasNormalTexture=!1,this.sceneHasOcludees=!1,this.transparencyPassType=U.NONE,this.ellipsoidMode=M.Earth,this.multipassTerrainEnabled=!1,this.cullAboveGround=!1}}e([N({count:d.COUNT})],J.prototype,"output",void 0),e([N()],J.prototype,"hasVertexColors",void 0),e([N()],J.prototype,"hasNormals",void 0),e([N({count:c.COUNT})],J.prototype,"vertexTextureCoordinates",void 0),e([N({count:i.COUNT})],J.prototype,"componentData",void 0),e([N()],J.prototype,"slicePlaneEnabled",void 0),e([N({count:P.COUNT})],J.prototype,"cullFace",void 0),e([N()],J.prototype,"baseColorTexture",void 0),e([N()],J.prototype,"receiveAmbientOcclusion",void 0),e([N()],J.prototype,"receiveShadows",void 0),e([N({count:a.COUNT})],J.prototype,"vertexDiscardMode",void 0),e([N({count:T.COUNT})],J.prototype,"doubleSidedMode",void 0),e([N()],J.prototype,"blendingEnabled",void 0),e([N({count:E.COUNT})],J.prototype,"alphaDiscardMode",void 0),e([N({count:B.COUNT})],J.prototype,"integratedMeshMode",void 0),e([N()],J.prototype,"ssrEnabled",void 0),e([N()],J.prototype,"polygonOffsetEnabled",void 0),e([N()],J.prototype,"usePBR",void 0),e([N()],J.prototype,"isSchematic",void 0),e([N()],J.prototype,"hasMetalnessAndRoughnessTexture",void 0),e([N()],J.prototype,"hasEmissionTexture",void 0),e([N()],J.prototype,"hasOcclusionTexture",void 0),e([N()],J.prototype,"hasNormalTexture",void 0),e([N()],J.prototype,"sceneHasOcludees",void 0),e([N({count:U.COUNT})],J.prototype,"transparencyPassType",void 0),e([N({count:M.COUNT})],J.prototype,"ellipsoidMode",void 0),e([N()],J.prototype,"multipassTerrainEnabled",void 0),e([N()],J.prototype,"cullAboveGround",void 0);export{I as ComponentDrawParameters,z as ComponentTechnique,J as ComponentTechniqueConfiguration,B as IntegratedMeshMode,k as PassDiscardMode};
