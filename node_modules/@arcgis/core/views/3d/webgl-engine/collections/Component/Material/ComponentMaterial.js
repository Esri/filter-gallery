/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../../chunks/tslib.es6.js";import{releaseMaybe as t,isSome as r}from"../../../../../../core/maybe.js";import{C as s}from"../../../../../../chunks/vec3.js";import{f as a}from"../../../../../../chunks/vec3f32.js";import{g as o,c as i,v as n}from"../../../../../../chunks/vec4.js";import{f as l}from"../../../../../../chunks/vec4f32.js";import{f as p}from"../../../../../../chunks/vec4f64.js";import{ColorMixModeEnum as h}from"../../../../layers/support/symbolColorUtils.js";import{ComponentTechniqueConfiguration as u,IntegratedMeshMode as c,ComponentTechnique as d}from"./ComponentTechnique.js";import{ComponentDataType as m}from"./shader/ComponentData.glsl.js";import{a as y}from"../../../../../../chunks/ComponentShader.glsl.js";import{VertexDiscardMode as v}from"./shader/VertexDiscardByOpacity.glsl.js";import{parameter as b,parameterBlock as T,MaterialBase as g,MaterialParameterBlock as f}from"../../../core/material/MaterialBase.js";import{RenderPassIdentifier as x,MaterialSubPass as M}from"../../../core/renderPasses/AllRenderPasses.js";import{ShaderOutput as O}from"../../../core/shaderLibrary/ShaderOutputOptions.js";import{NormalsDoubleSidedMode as P}from"../../../core/shaderLibrary/shading/Normals.glsl.js";import{defaultMaskAlphaCutoff as C}from"../../../core/shaderLibrary/util/AlphaDiscard.glsl.js";import{EllipsoidMode as q}from"../../../core/shaderLibrary/util/EllipsoidMode.js";import{AlphaDiscardMode as E,TransparencyPassType as w,CullFaceOptions as D}from"../../../lib/basicInterfaces.js";class N extends g{constructor(){super(...arguments),this.baseColor=l(1,1,1,1),this.usePBR=!1,this.hasParametersFromSource=!1,this.mrrFactors=a(1,1,.5),this.emissiveFactor=a(0,0,0),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null,this.overlayTexOffset=p(-1,-1,-1,-1),this.overlayTexScale=p(0,0,0,0),this.overlayColor=null,this.overlayHighlight=null,this.overlayNormal=null,this.objectOpacity=1,this.commonMaterialParameters=new R,this.componentParameters=new I,this.alphaCutoff=C,this.alphaDiscardMode=E.Opaque,this.isIntegratedMesh=!1,this.polygonOffsetEnabled=!1,this.ellipsoidMode=q.Earth,this.sceneHasOcludees=!1,this._techniqueConfig=new u}dispose(){this._technique=t(this._technique),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null}prepareTechnique(e,t,s){const a=this._techniqueConfig;if(a.hasVertexColors=s.colors,a.hasNormals=s.normals,a.vertexTextureCoordinates=s.textureCoordinates,a.usePBR=this.usePBR,a.hasMetalnessAndRoughnessTexture=r(this.metallicRoughnessTexture),a.hasEmissionTexture=r(this.emissionTexture),a.hasOcclusionTexture=r(this.occlusionTexture),a.hasNormalTexture=r(this.normalTexture),a.transparencyPassType=t.identifier===x.Material&&null!=t.transparencyPassType?t.transparencyPassType:w.NONE,a.multipassTerrainEnabled=t.identifier===x.Material&&null!=t.multipassTerrainParams&&t.multipassTerrainParams.multipassTerrainEnabled,a.cullAboveGround=t.identifier===x.Material&&null!=t.multipassTerrainParams&&t.multipassTerrainParams.cullAboveGround,a.ellipsoidMode=this.ellipsoidMode,this.dirty){a.componentData=this.componentParameters.type,a.cullFace=this.commonMaterialParameters.cullFace,a.doubleSidedMode=this.commonMaterialParameters.doubleSided?P.View:P.None,a.baseColorTexture=r(this.baseColorTexture),a.isSchematic=this.hasParametersFromSource&&!r(this.baseColorTexture);const e=this._computeWhichMaterialPass();a.blendingEnabled=e===A.Transparent||e===A.OpaqueAndTransparent,a.alphaDiscardMode=this.alphaDiscardMode,a.integratedMeshMode=this.isIntegratedMesh?this.overlayColor?this.overlayNormal?c.ColorOverlayWithWater:c.ColorOverlay:c.NoOverlay:c.None,a.polygonOffsetEnabled=this.polygonOffsetEnabled,this._setClean()}return a.slicePlaneEnabled=t.slicePlaneEnabled&&this.commonMaterialParameters.slicePlaneEnabled,t.identifier===x.ShadowMap?(a.output=O.Shadow,a.vertexDiscardMode=v.None):t.identifier===x.Highlight?(a.output=O.Highlight,a.vertexDiscardMode=v.None):(this._computeWhichMaterialPass()===A.OpaqueAndTransparent?a.vertexDiscardMode=t.transparent?v.Opaque:v.Transparent:a.vertexDiscardMode=v.None,a.output=k(t.subPass),t.subPass===M.Alpha&&(a.sceneHasOcludees=t.sceneHasOcludees),t.subPass===M.Color?(a.receiveAmbientOcclusion=t.ambientOcclusionEnabled,a.sceneHasOcludees=t.sceneHasOcludees,a.receiveShadows=t.shadowsEnabled,a.ssrEnabled=t.ssrParams.ssrEnabled):(a.receiveAmbientOcclusion=!1,a.receiveShadows=!1)),this._technique=e.releaseAndAcquire(d,a,this._technique),this._technique}submit(e,t){if(0===this.objectOpacity)return;const s=t.renderable.geometry,a=t.components,o=t.renderable.drawParameters,i=t.renderable.meta.cameraDepthSquared,n=a.geometryRanges,l=a.highlightRanges,p=a.defaultShadowMapRanges;switch(this._computeWhichMaterialPass()){case A.Opaque:e.materialOpaque.submitDraw(this,s,n,o,i);break;case A.Transparent:e.materialTransparent.submitDraw(this,s,n,o,i);break;case A.OpaqueAndTransparent:e.materialOpaque.submitDraw(this,s,n,o,i),e.materialTransparent.submitDraw(this,s,n,o,i);break;case A.IntegratedMesh:e.materialIntegratedMesh.submitDraw(this,s,n,o,i),this.overlayHighlight&&e.highlightIntegratedMesh.submitDraw(this,s,n,o,i)}const h=this.componentParameters.castShadows!==j.None;h&&e.shadowMap.submitDraw(this,s,n,o,i),r(l)&&(e.highlight.submitDraw(this,s,l,o,i),h&&e.highlightShadowMap.submitDraw(this,s,l,o,i)),h&&r(p)&&e.defaultShadowMap.submitDraw(this,s,p,o,i)}get attributeLocations(){return y}_computeWhichMaterialPass(){return this.isIntegratedMesh?A.IntegratedMesh:this.objectOpacity<1?A.Transparent:this.componentParameters.opaqueOverride===j.All?A.Opaque:this.baseColor[3]<1||this.alphaDiscardMode===E.Blend||this.alphaDiscardMode===E.MaskBlend?A.Transparent:this.componentParameters.transparent===j.None?A.Opaque:this.componentParameters.transparent===j.All?A.Transparent:A.OpaqueAndTransparent}}var S,A,j;e([b({vectorOps:n})],N.prototype,"baseColor",void 0),e([b()],N.prototype,"usePBR",void 0),e([b()],N.prototype,"hasParametersFromSource",void 0),e([b({vectorOps:s})],N.prototype,"mrrFactors",void 0),e([b({vectorOps:s})],N.prototype,"emissiveFactor",void 0),e([b({dispose:!0})],N.prototype,"baseColorTexture",void 0),e([b({dispose:!0})],N.prototype,"metallicRoughnessTexture",void 0),e([b({dispose:!0})],N.prototype,"emissionTexture",void 0),e([b({dispose:!0})],N.prototype,"occlusionTexture",void 0),e([b({dispose:!0})],N.prototype,"normalTexture",void 0),e([b({vectorOps:{equals:o,copy:i}})],N.prototype,"overlayTexOffset",void 0),e([b({vectorOps:{equals:o,copy:i}})],N.prototype,"overlayTexScale",void 0),e([b()],N.prototype,"overlayColor",void 0),e([b()],N.prototype,"overlayHighlight",void 0),e([b()],N.prototype,"overlayNormal",void 0),e([b()],N.prototype,"objectOpacity",void 0),e([T()],N.prototype,"commonMaterialParameters",void 0),e([T()],N.prototype,"componentParameters",void 0),e([b()],N.prototype,"alphaCutoff",void 0),e([b()],N.prototype,"alphaDiscardMode",void 0),e([b()],N.prototype,"isIntegratedMesh",void 0),e([b()],N.prototype,"polygonOffsetEnabled",void 0),e([b()],N.prototype,"ellipsoidMode",void 0),e([b()],N.prototype,"sceneHasOcludees",void 0),function(e){e[e.VERTEX=0]="VERTEX",e[e.GROUND=1]="GROUND",e[e.SCREEN_DERIVATIVE=2]="SCREEN_DERIVATIVE"}(S||(S={})),function(e){e[e.Opaque=0]="Opaque",e[e.Transparent=1]="Transparent",e[e.OpaqueAndTransparent=2]="OpaqueAndTransparent",e[e.IntegratedMesh=3]="IntegratedMesh"}(A||(A={}));class R extends f{constructor(){super(...arguments),this.doubleSided=!1,this.cullFace=D.Back,this.slicePlaneEnabled=!0}}e([b()],R.prototype,"doubleSided",void 0),e([b()],R.prototype,"cullFace",void 0),e([b()],R.prototype,"slicePlaneEnabled",void 0);class I extends f{constructor(){super(...arguments),this.externalColor=l(1,1,1,1),this.externalColorMixMode=h.Multiply,this.castShadows=j.All}get transparent(){return this.externalColor[3]<1?j.All:j.None}get opaqueOverride(){return this.externalColorMixMode===h.Replace&&1===this.externalColor[3]?j.All:j.None}get visible(){return this.externalColor[3]>0?j.All:j.None}get type(){return m.Uniform}}e([b({vectorOps:n})],I.prototype,"externalColor",void 0),e([b()],I.prototype,"externalColorMixMode",void 0),e([b()],I.prototype,"castShadows",void 0),function(e){e[e.All=0]="All",e[e.Some=1]="Some",e[e.None=2]="None"}(j||(j={}));class _ extends f{constructor(){super(...arguments),this.texture=null,this.transparent=j.None,this.opaqueOverride=j.None,this.castShadows=j.None}get type(){return m.Varying}}function k(e){switch(e){case M.Color:return O.Color;case M.Alpha:return O.Alpha;case M.Depth:return O.Depth;case M.Normal:return O.Normal}}e([b()],_.prototype,"texture",void 0),e([b()],_.prototype,"transparent",void 0),e([b()],_.prototype,"opaqueOverride",void 0),e([b()],_.prototype,"castShadows",void 0);export{R as CommonMaterialParameters,N as ComponentMaterial,j as ComponentParameterSummary,I as ComponentParametersUniform,_ as ComponentParametersVarying,S as ShadingNormalSource};
