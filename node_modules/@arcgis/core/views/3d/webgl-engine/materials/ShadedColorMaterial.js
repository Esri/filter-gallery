/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{n as e,s as t,a as r,b as i}from"../../../../chunks/vec3.js";import{c as s}from"../../../../chunks/vec3f64.js";import{center as a,scale as n}from"../../../../geometry/support/aaBoundingBox.js";import{BufferViewVec3f as o}from"../../../../geometry/support/buffer/BufferView.js";import{newLayout as u}from"../../support/buffer/InterleavedLayout.js";import{ShaderOutput as l}from"../core/shaderLibrary/ShaderOutputOptions.js";import{CullFaceOptions as c}from"../lib/basicInterfaces.js";import h from"../lib/GLMaterial.js";import{outputFromPass as p}from"../lib/GLMaterials.js";import{DefaultMaterialParameters as f,Material as m}from"../lib/Material.js";import{RenderSlot as d}from"../lib/RenderSlot.js";import{assert as b}from"../lib/Util.js";import{VertexAttribute as E}from"../lib/VertexAttribute.js";import{writeDefaultAttributes as g,writePosition as T}from"./internal/bufferWriterUtils.js";import{intersectTriangleGeometry as S}from"./internal/MaterialUtil.js";import{ShadedColorMaterialTechniqueConfiguration as A,ShadedColorMaterialVertexAttrLocations as P,ShadedColorMaterialTechnique as v}from"../shaders/ShadedColorMaterialTechnique.js";class F extends m{constructor(e){super(e,C),this.supportsEdges=!0,this.techniqueConfig=new A,this._vertexAttributeLocations=P}getTechniqueConfig(e,t){return this.techniqueConfig.output=e,this.techniqueConfig.cullFace=this.parameters.cullFace,this.techniqueConfig.slicePlaneEnabled=this.parameters.slicePlaneEnabled,this.techniqueConfig.transparent=this.parameters.transparent,this.techniqueConfig.writeDepth=this.parameters.writeDepth,this.techniqueConfig.screenSizeEnabled=this.parameters.screenSizeEnabled,this.techniqueConfig.shadingEnabled=this.parameters.shadingEnabled,this.techniqueConfig.transparencyPassType=t.transparencyPassType,this.techniqueConfig.multipassTerrainEnabled=t.multipassTerrainEnabled,this.techniqueConfig.cullAboveGround=t.cullAboveGround,this.techniqueConfig}getPassParameters(){return this.parameters}intersect(e,s,o,u,l,c,h){if(this.parameters.screenSizeEnabled){const o=e.vertexAttributes.get(E.OFFSET),p={applyToVertex:(e,s,a,n)=>{const l=t(j,o.data[3*n+0],o.data[3*n+1],o.data[3*n+2]),c=t(x,e,s,a);return r(l,l,this.parameters.screenSize*u.camera.computeRenderPixelSizeAt(l)),i(c,c,l),[c[0],c[1],c[2]]},applyToAabb:e=>{const t=a(e,j);return n(e,this.parameters.screenSize*u.camera.computeRenderPixelSizeAt(t))}};S(e,s,u,l,c,p,h)}else S(e,s,u,l,c,void 0,h)}requiresSlot(e,t){if(p(t)===l.Highlight)return e===d.OPAQUE_MATERIAL;let r=d.OPAQUE_MATERIAL;return this.parameters.transparent&&(r=this.parameters.writeDepth?d.TRANSPARENT_MATERIAL:d.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL),e===r||e===d.DRAPED_MATERIAL}createGLMaterial(e){return e.output===l.Color||e.output===l.Alpha||e.output===l.Highlight?new q(e):null}createBufferWriter(){return new O(this.parameters.screenSizeEnabled)}}class q extends h{updateParameters(e){return this.ensureTechnique(v,e)}beginSlot(e){return this.updateParameters(e)}bind(e,t){t.bindPass(this._material.getPassParameters(),e)}}const C={color:[1,1,1,1],shadingTint:[0,0,0,.25],shadingDirection:e(s(),[.5,-.5,-.5]),transparent:!1,writeDepth:!0,slicePlaneEnabled:!1,cullFace:c.None,screenSizeEnabled:!1,screenSize:14,shadingEnabled:!0,...f};class O{constructor(e){this.screenSizeEnabled=e;const t=u().vec3f(E.POSITION).vec3f(E.NORMAL);this.screenSizeEnabled&&t.vec3f(E.OFFSET),this.vertexBufferLayout=t}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return e.indices.get(E.POSITION).length}write(e,t,r,i){if(g(t,this.vertexBufferLayout,e.transformation,e.invTranspTransformation,r,i),this.screenSizeEnabled){if(!t.vertexAttributes.has(E.OFFSET))throw new Error(`${E.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);{const s=t.vertexAttributes.get(E.OFFSET),a=t.indices.get(E.OFFSET);b(3===s.size);const n=r.getField(E.OFFSET,o);if(!n)throw new Error("unable to acquire view for "+E.OFFSET);T(a,s.data,e.invTranspTransformation,n,i)}}}}const j=s(),x=s();export{F as ShadedColorMaterial};
