/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ShaderOutput as e}from"../core/shaderLibrary/ShaderOutputOptions.js";import{AnimationTimer as t}from"../lib/AnimationTimer.js";import{outputFromPass as r}from"../lib/GLMaterials.js";import{Material as i}from"../lib/Material.js";import{OITPolygonOffsetLimit as a}from"../lib/OrderIndependentTransparency.js";import{RenderSlot as n}from"../lib/RenderSlot.js";import{WaterGLMaterial as s}from"./WaterGLMaterial.js";import{WaterTechniqueConfiguration as o}from"./WaterTechnique.js";import{DefaultBufferWriter as h,PositionUVLayout as l}from"./internal/DefaultBufferWriter.js";import{intersectTriangleGeometry as p}from"./internal/MaterialUtil.js";import{defaultWaterMaterialParameters as u}from"./internal/waterMaterialUtils.js";class c extends i{constructor(e){super(e,u),this._techniqueConfig=new o,this.animation=new t}getTechniqueConfig(e,t){return this._techniqueConfig.output=e,this._techniqueConfig.writeDepth=this.parameters.writeDepth,this._techniqueConfig.receiveShadows=this.parameters.receiveShadows,this._techniqueConfig.slicePlaneEnabled=this.parameters.slicePlaneEnabled,this._techniqueConfig.transparent=this.parameters.transparent,this._techniqueConfig.useSSR=this.parameters.ssrEnabled,this._techniqueConfig.isDraped=this.parameters.isDraped,this._techniqueConfig.transparencyPassType=t.transparencyPassType,this._techniqueConfig.enableOffset=t.camera.relativeElevation<a,this._techniqueConfig.multipassTerrainEnabled=t.multipassTerrainEnabled,this._techniqueConfig.cullAboveGround=t.cullAboveGround,this._techniqueConfig}update(e){const t=Math.min(e.camera.relativeElevation,e.camera.distance);this.animation.enabled=Math.sqrt(this.parameters.waveTextureRepeat/this.parameters.waveStrength)*t<m;const r=this.animation.advance(e);return this.animation.enabled&&r}intersect(e,t,r,i,a,n,s){p(e,t,i,a,n,void 0,s)}requiresSlot(t,i){switch(r(i)){case e.Normal:return t===n.DRAPED_WATER;case e.Color:if(this.parameters.isDraped)return t===n.DRAPED_MATERIAL;break;case e.Highlight:return t===n.OPAQUE_MATERIAL||t===n.DRAPED_MATERIAL}let a=n.OPAQUE_MATERIAL;return this.parameters.transparent&&(a=this.parameters.writeDepth?n.TRANSPARENT_MATERIAL:n.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL),t===a}createGLMaterial(t){if(t.output===e.Color&&this.parameters.isDraped)return t.output=e.Draped,new s(t);switch(t.output){case e.Color:case e.Normal:case e.Highlight:case e.Alpha:return new s(t)}return null}createBufferWriter(){return new h(l)}}const m=35e3;export{c as WaterMaterial};
