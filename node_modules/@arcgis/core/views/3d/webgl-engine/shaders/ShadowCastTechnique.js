/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as r}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as i}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as e}from"../core/shaderTechnique/ShaderTechnique.js";import{parameter as t,ShaderTechniqueConfiguration as s}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as o}from"../lib/DefaultVertexAttributeLocations.js";import{blendingDefault as a}from"../lib/OrderIndependentTransparency.js";import{Program as n}from"../lib/Program.js";import{S as l,a as p,b as h}from"../../../../chunks/ShadowCast.glsl.js";import{BlendFactor as m,PrimitiveType as c}from"../../../webgl/enums.js";import{makePipelineState as u,defaultColorWriteParams as d,separateBlendingParams as f}from"../../../webgl/renderState.js";class g extends e{constructor(r,i){super(r,i,(()=>this.destroy()))}initializeProgram(r){const i=g.shader.get().build(this.configuration);return new n(r.rctx,i,o)}initializePipeline(r){switch(this.configuration.pass){case l.Accumulate:return u({blending:f(m.ONE,m.ONE,m.ONE,m.ONE),colorWrite:d,depthTest:null,depthWrite:null});case l.Visualize:case l.VisualizeCurrent:return u({blending:a,colorWrite:d,depthTest:null,depthWrite:null})}return u({})}bindPass(r){if(this.configuration.pass===l.Accumulate||this.configuration.pass===l.VisualizeCurrent){const i=r;this.program.bindTexture(i.linearDepthTexture,"depthMap"),i.shadowMap.bind(this.program),i.shadowMap.bindView(this.program,i.camera.center),this.program.setUniform2fv("nearFar",i.camera.nearFar),this.program.setUniformMatrix4fv("inverseViewMatrix",i.inverseViewMatrix),this.program.setUniform4fv("projInfo",i.projInfo),this.program.setUniform2fv("zScale",i.zScale)}else if(this.configuration.pass===l.Visualize){const i=r;if(this.program.bindTexture(i.shadowCastMap,"shadowCastMap"),this.program.setUniform1f("sampleScale",i.sampleScale),this.program.setUniform1f("opacityFromElevation",i.opacityFromElevation),this.program.setUniform4fv("uColor",i.color),this.configuration.visualization===p.Gradient&&this.configuration.bandsEnabled){const i=r;this.program.setUniform1f("bandSize",i.bandSize)}else if(this.configuration.visualization===p.Threshold){const i=r;this.program.setUniform1f("threshold",i.threshold)}}}get primitiveType(){return c.TRIANGLE_STRIP}}g.shader=new i(h,(()=>import("./ShadowCast.glsl.js")));class b extends s{constructor(){super(...arguments),this.pass=l.Accumulate,this.visualization=p.Gradient,this.bandsEnabled=!1}}r([t({count:l.COUNT})],b.prototype,"pass",void 0),r([t()],b.prototype,"visualization",void 0),r([t()],b.prototype,"bandsEnabled",void 0);export{g as ShadowCastTechnique,b as ShadowCastTechniqueConfiguration};
