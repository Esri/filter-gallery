/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{bindProjectionMatrix as r,bindView as e}from"../core/shaderLibrary/util/View.glsl.js";import{ReloadableShaderModule as i}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as t}from"../lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../lib/Program.js";import{S as s}from"../../../../chunks/SlicePlaneMaterial.glsl.js";import{BlendFactor as l,CompareFunction as m}from"../../../webgl/enums.js";import{makePipelineState as n,separateBlendingParams as d,defaultColorWriteParams as g}from"../../../webgl/renderState.js";class h extends o{initializeProgram(r){const e=h.shader.get().build();return new a(r.rctx,e,t)}bindPass(e,i){r(this.program,i.camera.projectionMatrix),this.program.setUniform4fv("backgroundColor",e.backgroundColor),this.program.setUniform4fv("gridColor",e.gridColor),this.program.setUniform1f("gridWidth",e.gridWidth)}bindDraw(r){e(this.program,r),this.program.rebindTextures()}initializePipeline(){return n({blending:d(l.ONE,l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA),depthTest:{func:m.LESS},colorWrite:g})}}h.shader=new i(s,(()=>import("./SlicePlaneMaterial.glsl.js")));export{h as SlicePlaneMaterialTechnique};
