/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as o}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as r}from"../core/shaderTechnique/ShaderTechnique.js";import{parameter as i,ShaderTechniqueConfiguration as t}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as n}from"../lib/DefaultVertexAttributeLocations.js";import{Program as a}from"../lib/Program.js";import{C as s,a as l}from"../../../../chunks/Compositing.glsl.js";import{BlendFactor as c}from"../../../webgl/enums.js";import{makePipelineState as p,simpleBlendingParams as h,defaultColorWriteParams as u,separateBlendingParams as d}from"../../../webgl/renderState.js";var m;!function(e){e[e.None=0]="None",e[e.Alpha=1]="Alpha",e[e.PremultipliedAlpha=2]="PremultipliedAlpha",e[e.COUNT=3]="COUNT"}(m||(m={}));class f extends r{initializeProgram(e){const o=f.shader.get().build(this.configuration);return new a(e.rctx,o,n)}initializePipeline(){if(this.configuration.function===s.TransparentToHUDVisibility)return p({colorWrite:{r:!1,g:!0,b:!1,a:!1}});switch(this.configuration.alphaMode){case m.None:return p({colorWrite:u});case m.Alpha:return p({blending:d(c.SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA,c.ONE_MINUS_SRC_ALPHA),colorWrite:u});default:return p({blending:h(c.ONE,c.ONE_MINUS_SRC_ALPHA),colorWrite:u})}}}f.shader=new o(l,(()=>import("./Compositing.glsl.js")));class g extends t{constructor(){super(...arguments),this.function=s.Standard,this.alphaMode=m.None,this.hasOpacityFactor=!1}}e([i({count:s.COUNT})],g.prototype,"function",void 0),e([i({count:m.COUNT})],g.prototype,"alphaMode",void 0),e([i()],g.prototype,"hasOpacityFactor",void 0);export{m as AlphaMode,f as CompositingTechnique,g as CompositingTechniqueConfiguration};
