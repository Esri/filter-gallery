/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{DoublePrecision as o}from"../../../core/shaderLibrary/util/DoublePrecision.glsl.js";import{glsl as e}from"../../../core/shaderModules/interfaces.js";import{VertexAttribute as t}from"../../../lib/VertexAttribute.js";function n(n,r){const a=n.vertex;a.uniforms.add("distanceFalloffFactor","float"),a.code.add(e`float distanceBasedPerspectiveFactor(float distance) {
return clamp(sqrt(distanceFalloffFactor / distance), 0.0, 1.0);
}`),a.uniforms.add("componentDataTex","sampler2D"),a.uniforms.add("componentDataTexInvDim","vec2"),n.attributes.add(t.COMPONENTINDEX,"float"),a.constants.add("componentColorFieldOffset","float",0),a.constants.add("componentOtherFieldOffset","float",1),a.constants.add("componentFieldCount","float",2),a.constants.add("lineWidthFractionFactor","float",8),a.constants.add("extensionLengthOffset","float",128),a.constants.add("componentTexWidth","float",4096),a.code.add(e`vec2 _componentTextureCoords(float componentIndex, float fieldOffset) {
float fieldIndex = componentFieldCount * componentIndex + fieldOffset;
float rowIndex = floor(fieldIndex / componentTexWidth);
float colIndex = mod(fieldIndex, componentTexWidth);
vec2 linearIndex = vec2(
(colIndex + 0.5) / componentTexWidth,
(rowIndex + 0.5) * componentDataTexInvDim.y
);
return linearIndex;
}
struct ComponentData {
vec4 color;
float lineWidth;
float extensionLength;
float type;
};
ComponentData readComponentData() {
vec2 colorIndex = _componentTextureCoords(componentIndex, componentColorFieldOffset);
vec2 otherIndex = _componentTextureCoords(componentIndex, componentOtherFieldOffset);
vec4 colorValue = texture2D(componentDataTex, colorIndex);
vec4 otherValue = texture2D(componentDataTex, otherIndex);
return ComponentData(
vec4(colorValue.rgb, colorValue.a * otherValue.w),
otherValue.x * (255.0 / lineWidthFractionFactor),
otherValue.y * 255.0 - extensionLengthOffset,
-(otherValue.z * 255.0) + 0.5
);
}`),r.legacy?a.code.add(e`vec3 _modelToWorldNormal(vec3 normal) {
return (model * vec4(normal, 0.0)).xyz;
}
vec3 _modelToViewNormal(vec3 normal) {
return (view * model * vec4(normal, 0.0)).xyz;
}`):(a.uniforms.add("transformNormalGlobalFromModel","mat3"),a.code.add(e`vec3 _modelToWorldNormal(vec3 normal) {
return transformNormalGlobalFromModel * normal;
}`)),r.silhouette?(n.attributes.add(t.NORMALA,"vec3"),n.attributes.add(t.NORMALB,"vec3"),a.code.add(e`vec3 worldNormal() {
return _modelToWorldNormal(normalize(normalA + normalB));
}`)):(n.attributes.add(t.NORMAL,"vec3"),a.code.add(e`vec3 worldNormal() {
return _modelToWorldNormal(normal);
}`)),r.legacy?a.code.add(e`vec3 worldFromModelPosition(vec3 position) {
return (model * vec4(position, 1.0)).xyz;
}
vec3 viewFromModelPosition(vec3 position) {
return (view * vec4(worldFromModelPosition(position), 1.0)).xyz;
}
vec4 projFromViewPosition(vec3 position) {
return proj * vec4(position, 1.0);
}`):(n.vertex.include(o,r),a.code.add(e`vec3 worldFromModelPosition(vec3 position) {
vec3 rotatedModelPosition = transformWorldFromModelRS * position;
vec3 transform_CameraRelativeFromModel = dpAdd(
transformWorldFromModelTL,
transformWorldFromModelTH,
-transformWorldFromViewTL,
-transformWorldFromViewTH
);
return transform_CameraRelativeFromModel + rotatedModelPosition;
}
vec3 viewFromModelPosition(vec3 position) {
return transformViewFromCameraRelativeRS * worldFromModelPosition(position);
}
vec4 projFromViewPosition(vec3 position) {
return transformProjFromView * vec4(position, 1.0);
}`)),a.code.add(e`float calculateExtensionLength(float extensionLength, float lineLength) {
return extensionLength / (log2(max(1.0, 256.0 / lineLength)) * 0.2 + 1.0);
}`)}function r(o){return o.mode===d.SKETCH||o.mode===d.MIXED}function a(o){return o.mode===d.SOLID||o.mode===d.MIXED}var d;!function(o){o[o.SOLID=0]="SOLID",o[o.SKETCH=1]="SKETCH",o[o.MIXED=2]="MIXED",o[o.COUNT=3]="COUNT"}(d||(d={}));export{n as EdgeUtil,d as EdgeUtilMode,r as usesSketchLogic,a as usesSolidLogic};
