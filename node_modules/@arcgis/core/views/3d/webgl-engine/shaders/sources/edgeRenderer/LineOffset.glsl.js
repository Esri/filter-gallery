/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{RgbaFloatEncoding as e}from"../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{glsl as t}from"../../../core/shaderModules/interfaces.js";import{usesSketchLogic as a,EdgeUtilMode as r}from"./EdgeUtil.glsl.js";import{UnpackAttributes as s}from"./UnpackAttributes.glsl.js";function l(l,c){const u=l.vertex;l.include(s,c);const o=l.fragment;switch(a(c)&&(u.uniforms.add("strokesTextureScale","vec2"),u.uniforms.add("strokesLog2Resolution","float"),u.uniforms.add("strokeVariants","float"),l.varyings.add("vStrokeUV","vec2"),o.uniforms.add("strokesTexture","sampler2D"),o.uniforms.add("strokesNormalizationScale","float"),u.code.add(t`void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {
vec2 sidenessNorm = unpackedAttributes.sidenessNorm;
float lineIndex = clamp(ceil(log2(lineLength)), 0.0, strokesLog2Resolution);
vStrokeUV = vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * strokeVariants + variantStroke + 0.5) * strokesTextureScale;
vStrokeUV.x += variantOffset;
}`),l.fragment.include(e),o.code.add(t`float calculateLineOffsetSketch() {
float offsetNorm = rgba2float(texture2D(strokesTexture, vStrokeUV));
return (offsetNorm - 0.5) * strokesNormalizationScale;
}
float calculateLinePressureSketch() {
return rgba2float(texture2D(strokesTexture, vStrokeUV + vec2(0.0, 0.5)));
}`)),c.mode){case r.SOLID:u.code.add(t`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}`),o.code.add(t`float calculateLineOffset() {
return 0.0;
}
float calculateLinePressure() {
return 1.0;
}`);break;case r.SKETCH:u.code.add(t`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)
{
calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);
}`),o.code.add(t`float calculateLineOffset() {
return calculateLineOffsetSketch();
}
float calculateLinePressure() {
return calculateLinePressureSketch();
}`);break;case r.MIXED:l.varyings.add("vType","float"),u.code.add(t`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)
{
vType = unpackedAttributes.type;
if (unpackedAttributes.type <= 0.0) {
calculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);
}
}`),o.code.add(t`float calculateLineOffset() {
if (vType <= 0.0) {
return calculateLineOffsetSketch();
}
else {
return 0.0;
}
}
float calculateLinePressure() {
if (vType <= 0.0) {
return calculateLinePressureSketch();
}
else {
return 1.0;
}
}`)}}export{l as LineOffset};
