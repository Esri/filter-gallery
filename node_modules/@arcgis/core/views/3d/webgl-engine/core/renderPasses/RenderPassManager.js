/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{isSome as s}from"../../../../../core/maybe.js";import{f as a,t as e,e as r}from"../../../../../chunks/mat3.js";import{c as t}from"../../../../../chunks/mat3f64.js";import{c as i}from"../../../../../chunks/mat4.js";import{c as h}from"../../../../../chunks/vec2.js";import{b as n,s as m,g as o,f as l}from"../../../../../chunks/vec3.js";import{c as P}from"../../../../../chunks/vec3f64.js";import{c as p}from"../../../../../chunks/vec4.js";import{d as _}from"../../../../../chunks/boundedPlane.js";import{MaterialPassesParameters as c,ShadowMapPassParameters as d,HighlightPassParameters as u,MaterialSubPass as T,RenderPassIdentifier as A}from"./AllRenderPasses.js";import{RenderPass as g,RenderPassSorting as f}from"./RenderPass.js";import{TwoVectorPosition as w}from"../util/TwoVectorPosition.js";import{union as R}from"../../lib/depthRange.js";import{RenderPass as E}from"../../lib/RenderPass.js";import{RenderSlot as M}from"../../lib/RenderSlot.js";class H{constructor(s,a){this.rctx=s,this.shaderTechniqueRepository=a,this.canRender=!0,this._materialPassParams=new c,this._shadowPassParams=new d,this._highlightPassParams=new u,this._systems=new Set,this._passes={materialOpaque:new g(s,this.shaderTechniqueRepository),materialTransparent:new g(s,this.shaderTechniqueRepository,f.BackToFront),materialIntegratedMesh:new g(s,this.shaderTechniqueRepository),shadowMap:new g(s,this.shaderTechniqueRepository),highlight:new g(s,this.shaderTechniqueRepository),highlightIntegratedMesh:new g(s,this.shaderTechniqueRepository),highlightShadowMap:new g(s,this.shaderTechniqueRepository),defaultShadowMap:new g(s,this.shaderTechniqueRepository)}}register(s){this._systems.add(s)}prepareRender(s){if(0!==this._systems.size){for(const s of Object.values(this._passes))s.prepareSubmit();this._systems.forEach((a=>a.submit(this._passes,{camera:s})));for(const s of Object.values(this._passes))s.finishSubmit();this.shaderTechniqueRepository.frameUpdate()}}render(s){if(0!==this._systems.size)switch(this._configure(s),s.slot){case M.OPAQUE_PLUGIN:switch(s.pass){case E.MATERIAL:return this._materialPassParams.subPass=T.Color,this._configureMaterialColorPass(s),this._passes.materialOpaque.dispatch(this._materialPassParams);case E.MATERIAL_DEPTH:return this._materialPassParams.subPass=T.Depth,this._passes.materialOpaque.dispatch(this._materialPassParams);case E.MATERIAL_NORMAL:return this._materialPassParams.subPass=T.Normal,this._passes.materialOpaque.dispatch(this._materialPassParams);case E.MATERIAL_HIGHLIGHT:return this._passes.highlight.dispatch(this._highlightPassParams);case E.MATERIAL_DEPTH_SHADOWMAP_ALL:return this._passes.shadowMap.dispatch(this._shadowPassParams);case E.MATERIAL_DEPTH_SHADOWMAP_HIGHLIGHT:return this._passes.highlightShadowMap.dispatch(this._shadowPassParams);case E.MATERIAL_DEPTH_SHADOWMAP_DEFAULT:return this._passes.defaultShadowMap.dispatch(this._shadowPassParams)}return;case M.TRANSPARENT_PLUGIN:switch(s.pass){case E.MATERIAL:return this._materialPassParams.subPass=T.Color,this._configureMaterialColorPass(s),this._passes.materialTransparent.dispatch(this._materialPassParams);case E.MATERIAL_ALPHA:return this._materialPassParams.subPass=T.Alpha,this._configureMaterialColorPass(s),this._passes.materialTransparent.dispatch(this._materialPassParams);case E.MATERIAL_DEPTH:return this._materialPassParams.subPass=T.Depth,this._passes.materialTransparent.dispatch(this._materialPassParams);case E.MATERIAL_NORMAL:return this._materialPassParams.subPass=T.Normal,this._passes.materialTransparent.dispatch(this._materialPassParams)}return;case M.INTEGRATED_MESH:switch(s.pass){case E.MATERIAL:return this._materialPassParams.subPass=T.Color,this._configureMaterialColorPass(s),this._materialPassParams.ssrParams=s.ssrParams,this._passes.materialIntegratedMesh.dispatch(this._materialPassParams);case E.MATERIAL_DEPTH:return this._materialPassParams.subPass=T.Depth,this._passes.materialIntegratedMesh.dispatch(this._materialPassParams);case E.MATERIAL_NORMAL:return this._materialPassParams.subPass=T.Normal,this._passes.materialIntegratedMesh.dispatch(this._materialPassParams);case E.MATERIAL_HIGHLIGHT:return this._passes.highlightIntegratedMesh.dispatch(this._highlightPassParams)}return}}notifyDirty(){this._context.requestRender()}slots(){return[M.OPAQUE_PLUGIN,M.TRANSPARENT_PLUGIN,M.INTEGRATED_MESH]}initializeRenderContext(s){this._context=s}uninitializeRenderContext(){}queryDepthRange(a){const e={near:1/0,far:-1/0};return this._systems.forEach((r=>{const t=r.queryShadowCasterDepthRange(a);s(t)&&R(e,t,e)})),e}get shadowCastingEnabled(){return this._materialPassParams.shadowsEnabled}set shadowCastingEnabled(s){this._materialPassParams.shadowsEnabled=s}get fillLightsEnabled(){return this._materialPassParams.hasFillLights}set fillLightsEnabled(s){this._materialPassParams.hasFillLights=s}get screenSpaceReflectionsEnabled(){return s(this._materialPassParams.ssrParams.ssrEnabled)}set screenSpaceReflectionsEnabled(s){this._materialPassParams.ssrParams.ssrEnabled=!!s}_configureMaterialColorPass(s){this._materialPassParams.bindShadowMap=a=>{s.shadowMap.bind(a);const e=this._materialPassParams.viewTransform;n(I,e.transformWorldFromViewTL,e.transformWorldFromViewTH),s.shadowMap.bindView(a,I)},this._materialPassParams.bindAmbientOcclusion=a=>s.ssaoHelper.bind(a,s.camera),this._materialPassParams.ambientOcclusionEnabled=!!s.ssaoHelper&&s.ssaoHelper.ready,this._materialPassParams.sceneHasOcludees=s.hasOccludees}_configure(s){const a=s.pass===E.MATERIAL_DEPTH_SHADOWMAP_ALL||s.pass===E.MATERIAL_DEPTH_SHADOWMAP_HIGHLIGHT||s.pass===E.MATERIAL_DEPTH_SHADOWMAP_DEFAULT?this._shadowPassParams:s.pass===E.MATERIAL_HIGHLIGHT?this._highlightPassParams:this._materialPassParams;this._updateParameters(s,a)}_updateParameters(s,t){const n=s.camera,P=n.viewInverseTransposeMatrix;m(I,P[3],P[7],P[11]),b.set(I),o(t.viewTransform.transformWorldFromViewTH,b.high),o(t.viewTransform.transformWorldFromViewTL,b.low),a(t.viewTransform.transformViewFromCameraRelativeRS,n.viewMatrix),i(t.viewTransform.transformProjFromView,n.projectionMatrix),t.identifier===A.Material?(this._materialPassParams.transparent=s.slot===M.TRANSPARENT_PLUGIN,this._materialPassParams.integratedMesh=s.slot===M.INTEGRATED_MESH,this._materialPassParams.lighting=s.scenelightingData,e(L,t.viewTransform.transformViewFromCameraRelativeRS),r(t.transformNormalViewFromGlobal,L),h(t.nearFar,n.nearFar)):t.identifier===A.ShadowMap?h(t.nearFar,n.nearFar):t.identifier===A.Highlight&&(t.highlightDepthTexture=s.highlightDepthTexture,p(t.viewport,n.fullViewport)),t.identifier!==A.Material&&t.identifier!==A.Highlight||(t.inverseViewport[0]=1/n.fullViewport[2],t.inverseViewport[1]=1/n.fullViewport[3]),_(s.sliceHelper.plane,t.slicePlane),l(t.slicePlane.origin,t.slicePlane.origin,I),t.slicePlaneEnabled=s.sliceHelper.isEnabled,this._materialPassParams.slot=s.slot,this._materialPassParams.transparencyPassType=s.transparencyPassType,this._materialPassParams.multipassTerrainParams=s.multipassTerrainParams}get needsHighlight(){return this._passes.highlight.count>0||this._passes.highlightIntegratedMesh.count>0}get needsTransparentPass(){return this._passes.materialTransparent.count>0}}const I=P(),L=t(),b=new w;export{H as RenderPassManager};
