/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ViewingMode as e}from"../../../../../ViewingMode.js";import{ScreenSizePerspective as r}from"../util/ScreenSizePerspective.glsl.js";import{glsl as t}from"../../shaderModules/interfaces.js";function l(l,c){const i=l.vertex.code;c.verticalOffsetEnabled?(l.vertex.uniforms.add("verticalOffset","vec4"),c.screenSizePerspectiveEnabled&&(l.include(r),l.vertex.uniforms.add("screenSizePerspectiveAlignment","vec4")),i.add(t`
    vec3 calculateVerticalOffset(vec3 worldPos, vec3 localOrigin) {
      float viewDistance = length((view * vec4(worldPos, 1.0)).xyz);
      ${c.viewingMode===e.Global?t`vec3 worldNormal = normalize(worldPos + localOrigin);`:t`vec3 worldNormal = vec3(0.0, 0.0, 1.0);`}
      ${c.screenSizePerspectiveEnabled?t`
          float cosAngle = dot(worldNormal, normalize(worldPos - cameraPosition));
          float verticalOffsetScreenHeight = screenSizePerspectiveScaleFloat(verticalOffset.x, abs(cosAngle), viewDistance, screenSizePerspectiveAlignment);`:t`
          float verticalOffsetScreenHeight = verticalOffset.x;`}
      // Screen sized offset in world space, used for example for line callouts
      float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * viewDistance, verticalOffset.z, verticalOffset.w);
      return worldNormal * worldOffset;
    }

    vec3 addVerticalOffset(vec3 worldPos, vec3 localOrigin) {
      return worldPos + calculateVerticalOffset(worldPos, localOrigin);
    }
    `)):i.add(t`vec3 addVerticalOffset(vec3 worldPos, vec3 localOrigin) { return worldPos; }`)}function c(e,r,t){if(!r.verticalOffset)return;const l=i(r.verticalOffset,t.camera.fovY,t.camera.fullViewport[3]),c=t.camera.pixelRatio||1;e.setUniform4f("verticalOffset",l.screenLength*c,l.perDistance,l.minWorldLength,l.maxWorldLength)}function i(e,r,t,l=o){return l.screenLength=e.screenLength,l.perDistance=Math.tan(.5*r)/(.5*t),l.minWorldLength=e.minWorldLength,l.maxWorldLength=e.maxWorldLength,l}const o={screenLength:0,perDistance:0,minWorldLength:0,maxWorldLength:0};export{l as VerticalOffset,c as bindVerticalOffsetUniforms,i as calculateVerticalOffsetFactors};
