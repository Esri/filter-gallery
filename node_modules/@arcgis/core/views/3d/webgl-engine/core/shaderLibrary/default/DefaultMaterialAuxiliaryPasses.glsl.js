/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ShaderOutput as o}from"../ShaderOutputOptions.js";import{Slice as r}from"../Slice.glsl.js";import{Transform as e}from"../Transform.glsl.js";import{NormalAttribute as t,NormalAttributeType as i}from"../attributes/NormalAttribute.glsl.js";import{TextureCoordinateAttribute as a}from"../attributes/TextureCoordinateAttribute.glsl.js";import{VertexNormal as l}from"../attributes/VertexNormal.glsl.js";import{OutputDepth as s}from"../output/OutputDepth.glsl.js";import{OutputHighlight as d}from"../output/OutputHighlight.glsl.js";import{VisualVariables as n}from"../shading/VisualVariables.glsl.js";import{DiscardOrAdjustAlpha as u}from"../util/AlphaDiscard.glsl.js";import{glsl as m}from"../../shaderModules/interfaces.js";function p(p,v){const c=p.vertex.code,f=p.fragment.code,g=v.hasModelTransformation;v.output!==o.Depth&&v.output!==o.Shadow||(p.include(e,{linearDepth:!0,hasModelTransformation:g}),p.include(a,v),p.include(n,v),p.include(s,v),p.include(r,v),p.vertex.uniforms.add("nearFar","vec2"),p.varyings.add("depth","float"),v.hasColorTexture&&p.fragment.uniforms.add("tex","sampler2D"),c.add(m`
      void main(void) {
        vpos = calculateVPos();
        vpos = subtractOrigin(vpos);
        vpos = addVerticalOffset(vpos, localOrigin);
        gl_Position = transformPositionWithDepth(proj, view, ${g?"model,":""} vpos, nearFar, depth);
        forwardTextureCoordinates();
      }
    `),p.include(u,v),f.add(m`
      void main(void) {
        discardBySlice(vpos);
        ${v.hasColorTexture?m`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}
        outputDepth(depth);
      }
    `)),v.output===o.Normal&&(p.include(e,{linearDepth:!1,hasModelTransformation:g}),p.include(t,v),p.include(l,v),p.include(a,v),p.include(n,v),v.hasColorTexture&&p.fragment.uniforms.add("tex","sampler2D"),p.vertex.uniforms.add("viewNormal","mat4"),p.varyings.add("vPositionView","vec3"),c.add(m`
      void main(void) {
        vpos = calculateVPos();
        vpos = subtractOrigin(vpos);
        ${v.normalType===i.Attribute?m`
        vNormalWorld = dpNormalView(vvLocalNormal(normalModel()));`:""}
        vpos = addVerticalOffset(vpos, localOrigin);
        gl_Position = transformPosition(proj, view, ${g?"model,":""} vpos);
        forwardTextureCoordinates();
      }
    `),p.include(r,v),p.include(u,v),f.add(m`
      void main() {
        discardBySlice(vpos);
        ${v.hasColorTexture?m`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}

        ${v.normalType===i.ScreenDerivative?m`
            vec3 normal = screenDerivativeNormal(vPositionView);`:m`
            vec3 normal = normalize(vNormalWorld);
            if (gl_FrontFacing == false) normal = -normal;`}
        gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);
      }
    `)),v.output===o.Highlight&&(p.include(e,{linearDepth:!1,hasModelTransformation:g}),p.include(a,v),p.include(n,v),v.hasColorTexture&&p.fragment.uniforms.add("tex","sampler2D"),c.add(m`
      void main(void) {
        vpos = calculateVPos();
        vpos = subtractOrigin(vpos);
        vpos = addVerticalOffset(vpos, localOrigin);
        gl_Position = transformPosition(proj, view, ${g?"model,":""} vpos);
        forwardTextureCoordinates();
      }
    `),p.include(r,v),p.include(u,v),p.include(d),f.add(m`
      void main() {
        discardBySlice(vpos);
        ${v.hasColorTexture?m`
        vec4 texColor = texture2D(tex, vuv0);
        discardOrAdjustAlpha(texColor);`:""}
        outputHighlight();
      }
    `))}export{p as DefaultMaterialAuxiliaryPasses};
