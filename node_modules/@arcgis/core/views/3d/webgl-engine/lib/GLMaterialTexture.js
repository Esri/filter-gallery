/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{releaseMaybe as t,isNone as e,isSome as i}from"../../../../core/maybe.js";import{isPromiseLike as r}from"../../../../core/promiseUtils.js";import{ResourceState as s}from"./basicInterfaces.js";import u from"./GLMaterial.js";class o extends u{constructor(t){super(t),this._numLoading=0,this._disposed=!1,this._textureRepository=t.textureRep,this._textureId=t.textureId,this._acquire(t.textureId,(t=>this._texture=t)),this._acquire(t.normalTextureId,(t=>this._textureNormal=t)),this._acquire(t.emissiveTextureId,(t=>this._textureEmissive=t)),this._acquire(t.occlusionTextureId,(t=>this._textureOcclusion=t)),this._acquire(t.metallicRoughnessTextureId,(t=>this._textureMetallicRoughness=t))}dispose(){this._texture=t(this._texture),this._textureNormal=t(this._textureNormal),this._textureEmissive=t(this._textureEmissive),this._textureOcclusion=t(this._textureOcclusion),this._textureMetallicRoughness=t(this._textureMetallicRoughness),this._disposed=!0}ensureResources(t){return 0===this._numLoading?s.LOADED:s.LOADING}updateTexture(i){(e(this._texture)||i!==this._texture.id)&&(this._texture=t(this._texture),this._textureId=i,this._acquire(this._textureId,(t=>this._texture=t)))}bindTextures(t){i(this._texture)&&t.bindTexture(this._texture.glTexture,"tex"),i(this._textureNormal)&&t.bindTexture(this._textureNormal.glTexture,"normalTexture"),i(this._textureEmissive)&&t.bindTexture(this._textureEmissive.glTexture,"texEmission"),i(this._textureOcclusion)&&t.bindTexture(this._textureOcclusion.glTexture,"texOcclusion"),i(this._textureMetallicRoughness)&&t.bindTexture(this._textureMetallicRoughness.glTexture,"texMetallicRoughness")}bindTextureScale(t){const e=i(this._texture)?this._texture.glTexture:null;i(e)&&e.descriptor.textureCoordinateScaleFactor?t.setUniform2fv("textureCoordinateScaleFactor",e.descriptor.textureCoordinateScaleFactor):t.setUniform2f("textureCoordinateScaleFactor",1,1)}_acquire(i,s){if(e(i))return void s(null);const u=this._textureRepository.acquire(i);if(r(u))return++this._numLoading,void u.then((e=>{if(this._disposed)return t(e),void s(null);s(e)})).finally((()=>--this._numLoading));s(u)}}export{o as default};
