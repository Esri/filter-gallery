/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../core/shaderTechnique/ShaderTechnique.js";import{parameter as s,ShaderTechniqueConfiguration as o}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as i}from"./DefaultVertexAttributeLocations.js";import{Program as a}from"./Program.js";import{S as u,a as l}from"../../../../chunks/SSAO.glsl.js";import{makePipelineState as n,defaultColorWriteParams as m}from"../../../webgl/renderState.js";class p extends t{initializeProgram(e){const r=p.shader.get(),t=this.configuration,s=(p.filterRadius+1)/2,o=1/(2*s*s),u=r.build({output:t.output,samples:p.samples,filterRadius:p.filterRadius,blurFalloff:o});return new a(e.rctx,u,i)}initializePipeline(){return n({colorWrite:m})}}p.shader=new r(l,(()=>import("../shaders/SSAO.glsl.js"))),p.samples=16,p.filterRadius=4;class c extends o{constructor(){super(...arguments),this.output=u.SSAO}}e([s({count:u.COUNT})],c.prototype,"output",void 0);export{p as SSAOTechnique,c as SSAOTechniqueConfiguration};
