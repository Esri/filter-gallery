/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../core/shaderTechnique/ShaderTechnique.js";import{parameter as o,ShaderTechniqueConfiguration as s}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as i}from"./DefaultVertexAttributeLocations.js";import{Program as a}from"./Program.js";import{S as n,a as u}from"../../../../chunks/SMAA.glsl.js";import{makePipelineState as c,defaultColorWriteParams as h}from"../../../webgl/renderState.js";class m extends t{initializeProgram(e){const r=m.shader.get(),t=this.configuration,o=r.build({output:t.output,threshold:.05,localConstrastAdaption:2,maxSearchSteps:8,maxDistanceAreaTex:16});return new a(e.rctx,o,i)}initializePipeline(){return c({colorWrite:h})}}m.shader=new r(u,(()=>import("../shaders/SMAA.glsl.js")));class l extends s{constructor(){super(...arguments),this.output=n.EdgeDetector}}e([o({count:n.COUNT})],l.prototype,"output",void 0);export{m as SMAATechnique,l as SMAATechniqueConfiguration};
