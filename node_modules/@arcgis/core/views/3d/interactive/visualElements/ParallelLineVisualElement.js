/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import e from"../../../../core/Handles.js";import{unwrap as t,isSome as r,isNone as s}from"../../../../core/maybe.js";import{createScreenPointArray as i}from"../../../../core/screenUtils.js";import{i as o,f as a,g as c,s as n,m as h}from"../../../../chunks/vec2.js";import{k as l,g as d,n as m,f as u,b as _}from"../../../../chunks/vec3.js";import{c as p,f}from"../../../../chunks/vec3f64.js";import{g,c as y}from"../../../../chunks/vec4.js";import{f as b}from"../../../../chunks/vec4f32.js";import{Object3DVisualElement as j}from"./Object3DVisualElement.js";import w from"../../webgl-engine/lib/GeometryUtil.js";import{RenderOccludedFlag as x}from"../../webgl-engine/lib/Material.js";import{VertexAttribute as G}from"../../webgl-engine/lib/VertexAttribute.js";import{RibbonLineMaterial as O}from"../../webgl-engine/materials/RibbonLineMaterial.js";class R extends j{constructor(t){super(t),this._handles=new e,this._location=p(),this._direction=f(1,0,0),this._width=1,this._offset=1,this._length=18,this._color=b(1,0,1,1),this._renderOccluded=x.OccludeAndTransparent,this.applyProps(t)}get location(){return this._location}set location(e){l(this._location,e)||(d(this._location,e),this._updateGeometry())}get direction(){return this._direction}set direction(e){l(this._direction,e)||(d(this._direction,e),this._updateGeometry())}setDirectionFromPoints(e,t){m(this._direction,u(this._direction,t,e)),this._updateGeometry()}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this._updateMaterial())}get offset(){return this._offset}set offset(e){e!==this._offset&&(this._offset=e,this._updateGeometry())}get length(){return this._length}set length(e){e!==this._length&&(this._length=e,this._updateGeometry())}get color(){return this._color}set color(e){g(e,this._color)||(y(this._color,e),this._updateMaterial())}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}createExternalResources(){const e=new O(this.materialParameters);this._handles.add(this.view.state.watch("camera",(()=>{this._updateGeometry()}))),this._externalResources={material:e}}destroyExternalResources(){this._handles.removeAll(),this._externalResources=null}createGeometries(e){const r=w.createPolylineGeometry([p(),p()]),s=w.createPolylineGeometry([p(),p()]),i=t(this._externalResources).material;e.addGeometry(r,i),e.addGeometry(s,i),this._updateVertices(e)}forEachExternalMaterial(e){r(this._externalResources)&&e(this._externalResources.material)}_updateMaterial(){if(s(this._externalResources))return;this._externalResources.material.setParameters(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,renderOccluded:this._renderOccluded}}_updateGeometry(){const e=this.object;s(e)||this._updateVertices(e)}_updateVertices(e){const t=this.view.state.camera;t.projectToScreen(this.location,V),_(P,this.location,this.direction),t.projectToScreen(P,v),o(v,a(v,v,V)),this._updateVertexAttributes(t,e,0,V,v,1),this._updateVertexAttributes(t,e,1,V,v,-1)}_updateVertexAttributes(e,t,r,s,i,o){const a=t.geometryRecords[r],l=a.geometry.getMutableAttribute(G.POSITION).data,d=c(A,n(A,i[1]*o,i[0]*-o),this.offset+this.width/2),m=h(M,h(M,h(M,s,c(M,i,this.length/2)),d),d),u=h(k,m,c(k,i,-this.length));e.unprojectFromScreen(m,P),l[0]=P[0],l[1]=P[1],l[2]=P[2],e.unprojectFromScreen(u,P),l[3]=P[0],l[4]=P[1],l[5]=P[2],t.geometryVertexAttrsUpdated(a)}}const P=p(),V=i(),v=i(),A=i(),M=i(),k=i();export{R as ParallelLineVisualElement};
