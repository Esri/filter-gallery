/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import t from"../../../../../Color.js";import e from"../../../../../core/Handles.js";import{unwrap as i}from"../../../../../core/maybe.js";import{u as a}from"../../../../../chunks/mat4.js";import{c as r}from"../../../../../chunks/mat4f64.js";import{s}from"../../../../../chunks/vec3.js";import{f as o}from"../../../../../chunks/vec3f64.js";import{sv3d as n,sm4d as l}from"../../../../../geometry/support/vectorStacks.js";import{getGraphicEffectiveElevationInfo as p}from"../../../../../support/elevationInfoUtils.js";import{Manipulator3D as c}from"../../Manipulator3D.js";import{screenToMapXYAtLocation as m}from"../dragEventPipeline3D.js";import{ManipulatorType as u}from"../ManipulatorType.js";import{colors as h}from"../settings.js";import{DISC_RADIUS as d,DISC_HEIGHT as _,GEOMETRY_SEGMENTS as f,DISC_COLLISION_RADIUS as g}from"./config.js";import{Manipulation as M}from"./Manipulation.js";import{createGraphicMoveDragPipeline as j}from"./moveUtils.js";import{SnapToScene as T}from"../snapping/SnapToScene.js";import{CullFaceOptions as S}from"../../../webgl-engine/lib/basicInterfaces.js";import v from"../../../webgl-engine/lib/GeometryUtil.js";import{RenderOccludedFlag as y}from"../../../webgl-engine/lib/Material.js";import{ColorMaterial as w}from"../../../webgl-engine/materials/ColorMaterial.js";import{createManipulatorDragEventPipeline as b,dragAtLocation as k,addScreenDelta as x}from"../../../../interactive/dragEventPipeline.js";import{ManipulatorStateFlags as E}from"../../../../interactive/interfaces.js";class A extends M{constructor(t){super(),this._handles=new e,this._snapToScene=new T,this._discMaterial=this._createMaterial(),this._discMaterialTransparent=this._createMaterial(.5),this._scale=1,this._radius=d,this._view=t.view,this._tool=t.tool,null!=t.snapToScene&&(this.snapToScene=t.snapToScene),null!=t.radius&&(this._radius=t.radius),this._createManipulator(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}destroy(){this._handles.destroy(),this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._tool=null,this._view=null,this._manipulator=null}forEachManipulator(t){t(this._manipulator,u.TRANSLATE_XY)}get displayScale(){return this._scale}set displayScale(t){this._scale=t,this._updateManipulatorTransform()}get snapToScene(){return this._snapToScene.enabled}set snapToScene(t){this._snapToScene.enabled=t}get radius(){return this._radius}set radius(t){t!==this._radius&&(this._radius=t,this._updateManipulator())}createGraphicDragPipeline(t,e,a){const r=e.graphic,s=p(r),o=i(r.geometry).spatialReference;return j(e,a,(e=>this.createDragPipeline(((i,a,r,s,o)=>e(i,t(i,a,r,s,o),r)),s,o,r)),this._view.state.viewingMode)}createDragPipeline(t,e,i,a){const r=this._view;return b(this._manipulator,((s,o,n,l,p)=>{const c=o.next(k(r,s.elevationAlignedLocation)).next(m(r,s.elevationAlignedLocation,e,i,a)).next(this._snapToScene.createDragEventPipelineStep(r,e),this._snapToScene.next).next((t=>({...t,manipulatorType:u.TRANSLATE_XY}))).next(x());t(s,c,n,l,p)}))}_updateManipulatorTransform(){const t=a(l.get(),s(n.get(),this.displayScale,this.displayScale,this.displayScale));this._manipulator.modelTransform=t}_createManipulator(){const t=this._view;this._manipulator=new c({view:t,worldSized:!1,autoScaleRenderObjects:!1,focusMultiplier:1,touchMultiplier:1,collisionType:{type:"disc",direction:o(0,0,1)},worldOriented:!0}),this._updateManipulator()}_updateManipulator(){const t=v.createCylinderGeometry(_,1,f,o(0,0,1),o(0,0,0)),e=a(r(),o(this._radius,this._radius,this._radius));this._manipulator.renderObjects=[{geometry:t,material:this._discMaterial,transform:e,stateMask:E.Focused},{geometry:t,material:this._discMaterialTransparent,transform:e,stateMask:E.Unfocused}],this._manipulator.radius=g*(this._radius/d)}_createMaterial(e=1){const i=t.toUnitRGBA(h.main);return i[3]*=e,new w({color:i,transparent:1!==e,cullFace:S.Back,renderOccluded:y.Transparent})}get test(){return{discManipulator:this._manipulator}}}export{A as MoveXYDiscManipulation};
