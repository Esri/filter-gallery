/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ForwardLinearDepth as e}from"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js";import{ShaderOutput as r}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js";import{Slice as i}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as a}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{OutputHighlight as o}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{ReadLinearDepth as t}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js";import{EvaluateAmbientLighting as n}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientLighting.glsl.js";import{EvaluateMainLighting as l}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateMainLighting.glsl.js";import{multipassTerrainTest as d}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{NormalUtils as s}from"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js";import{PBRMode as g}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{ReadShadowMap as v}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{Water as m}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js";import{WaterDistortion as c}from"../views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js";import{symbolAlphaCutoff as p}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{ColorConversion as u}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{glsl as h}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as w}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{VertexAttribute as f}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function b(b){const y=new w;return y.include(a,{linearDepth:!1}),y.attributes.add(f.POSITION,"vec3"),y.attributes.add(f.UV0,"vec2"),y.vertex.uniforms.add("proj","mat4").add("view","mat4").add("localOrigin","vec3"),y.vertex.uniforms.add("waterColor","vec4"),b.output!==r.Color&&b.output!==r.Alpha||(y.include(s,b),y.include(e,b),y.varyings.add("vuv","vec2"),y.varyings.add("vpos","vec3"),y.varyings.add("vnormal","vec3"),y.varyings.add("vtbnMatrix","mat3"),y.fragment.uniforms.add("localOrigin","vec3"),b.multipassTerrainEnabled&&y.varyings.add("depth","float"),y.vertex.code.add(h`
      void main(void) {
        if (waterColor.a < ${h.float(p)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vuv = uv0;
        vpos = position;

        vnormal = getLocalUp(vpos, localOrigin);
        vtbnMatrix = getTBNMatrix(vnormal);

        ${b.multipassTerrainEnabled?"depth = (view * vec4(vpos, 1.0)).z;":""}

        gl_Position = transformPosition(proj, view, vpos);
        ${b.output===r.Color?"forwardLinearDepth();":""}
      }
    `)),b.multipassTerrainEnabled&&(y.fragment.include(t),y.include(d,b)),b.output===r.Alpha&&(y.include(i,b),y.fragment.uniforms.add("waterColor","vec4"),y.fragment.code.add(h`
        void main() {
          discardBySlice(vpos);
          ${b.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}

          gl_FragColor = vec4(waterColor.a);
        }
      `)),b.output===r.Color&&(y.include(l),y.include(n,{pbrMode:g.Disabled,lightingSphericalHarmonicsOrder:2}),y.include(c,b),y.include(i,b),b.receiveShadows&&y.include(v,b),y.include(m,b),y.fragment.uniforms.add("waterColor","vec4").add("lightingMainDirection","vec3").add("lightingMainIntensity","vec3").add("lightingSpecularStrength","float").add("lightingEnvironmentStrength","float").add("cameraPosition","vec3").add("timeElapsed","float").add("view","mat4"),y.fragment.include(u),y.fragment.code.add(h`
      void main() {
        discardBySlice(vpos);
        ${b.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}
        vec3 localUp = vnormal;
        // the created normal is in tangent space
        vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);

        // we rotate the normal according to the tangent-bitangent-normal-Matrix
        vec3 n = normalize(vtbnMatrix * tangentNormalFoam.xyz);
        vec3 v = -normalize(vpos - cameraPosition);
        float shadow = ${b.receiveShadows?h`1.0 - readShadowMap(vpos, linearDepth)`:"1.0"};
        vec4 vPosView = view*vec4(vpos, 1.0);
        vec4 final = vec4(getSeaColor(n, v, lightingMainDirection, waterColor.rgb, lightingMainIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz, vpos + localOrigin), waterColor.w);

        // gamma correction
        gl_FragColor = delinearizeGamma(final);
        gl_FragColor = highlightSlice(gl_FragColor, vpos);
        ${b.oitEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
      }
    `)),b.output===r.Normal&&(y.include(s,b),y.include(c,b),y.include(i,b),y.varyings.add("vpos","vec3"),y.varyings.add("vuv","vec2"),y.vertex.code.add(h`
        void main(void) {
          if (waterColor.a < ${h.float(p)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vuv = uv0;
          vpos = position;

          gl_Position = transformPosition(proj, view, vpos);
        }
    `),y.fragment.uniforms.add("timeElapsed","float"),y.fragment.code.add(h`void main() {
discardBySlice(vpos);
vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);
tangentNormalFoam.xyz = normalize(tangentNormalFoam.xyz);
gl_FragColor = vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);
}`)),b.output===r.Draped&&(y.varyings.add("vpos","vec3"),y.vertex.code.add(h`
        void main(void) {
          if (waterColor.a < ${h.float(p)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vpos = position;
          gl_Position = transformPosition(proj, view, vpos);
        }
    `),y.fragment.uniforms.add("waterColor","vec4"),y.fragment.code.add(h`void main() {
gl_FragColor = waterColor;
}`)),b.output===r.Highlight&&(y.include(o),y.varyings.add("vpos","vec3"),y.vertex.code.add(h`
      void main(void) {
        if (waterColor.a < ${h.float(p)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vpos = position;
        gl_Position = transformPosition(proj, view, vpos);
      }
    `),y.include(i,b),y.fragment.code.add(h`void main() {
discardBySlice(vpos);
outputHighlight();
}`)),y}const y=Object.freeze({__proto__:null,build:b});export{y as W,b};
