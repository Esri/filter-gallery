/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ShaderOutput as e}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js";import{Slice as r}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as a}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{ReadLinearDepth as i}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js";import{multipassTerrainTest as o}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{defaultMaskAlphaCutoff as t}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{ColorConversion as d}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{glsl as l}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as s}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{VertexAttribute as n}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function g(g){const p=new s;return p.include(a,{linearDepth:!1}),p.vertex.uniforms.add("proj","mat4").add("view","mat4"),p.attributes.add(n.POSITION,"vec3"),p.attributes.add(n.UV0,"vec2"),p.varyings.add("vpos","vec3"),g.multipassTerrainEnabled&&p.varyings.add("depth","float"),p.vertex.uniforms.add("textureCoordinateScaleFactor","vec2"),p.vertex.code.add(l`
    void main(void) {
      vpos = position;
      ${g.multipassTerrainEnabled?"depth = (view * vec4(vpos, 1.0)).z;":""}
      vTexCoord = uv0 * textureCoordinateScaleFactor;
      gl_Position = transformPosition(proj, view, vpos);
    }
  `),p.include(r,g),g.multipassTerrainEnabled&&(p.fragment.include(i),p.include(o,g)),p.fragment.uniforms.add("tex","sampler2D"),p.fragment.uniforms.add("opacity","float"),p.varyings.add("vTexCoord","vec2"),g.output===e.Alpha?p.fragment.code.add(l`
    void main() {
      discardBySlice(vpos);
      ${g.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}

      float alpha = texture2D(tex, vTexCoord).a * opacity;
      if (alpha  < ${l.float(t)}) {
        discard;
      }

      gl_FragColor = vec4(alpha);
    }
    `):(p.fragment.include(d),p.fragment.code.add(l`
    void main() {
      discardBySlice(vpos);
      ${g.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}
      gl_FragColor = texture2D(tex, vTexCoord) * opacity;

      if (gl_FragColor.a < ${l.float(t)}) {
        discard;
      }

      gl_FragColor = highlightSlice(gl_FragColor, vpos);
      ${g.oitEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
    }
    `)),p}const p=Object.freeze({__proto__:null,build:g});export{p as I,g as b};
