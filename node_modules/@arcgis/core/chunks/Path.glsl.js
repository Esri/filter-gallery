/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ViewingMode as e}from"../views/ViewingMode.js";import{ForwardLinearDepth as a}from"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js";import{ShaderOutput as o}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js";import{Slice as i}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as r}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{PathVertexPosition as l}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/PathVertexPosition.glsl.js";import{OutputDepth as d}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js";import{OutputHighlight as n}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{ReadLinearDepth as t}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js";import{EvaluateAmbientOcclusion as s}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js";import{EvaluateSceneLighting as c}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js";import{multipassTerrainTest as m}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{Normals as g}from"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js";import{NormalUtils as v}from"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js";import{ReadShadowMap as p}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{ColorConversion as u}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{glsl as h}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as f}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";function b(b){const w=new f;return w.vertex.uniforms.add("proj","mat4").add("view","mat4").add("cameraPosition","vec3").add("localOrigin","vec3"),w.varyings.add("vpos","vec3"),w.include(l,b),b.output!==o.Color&&b.output!==o.Alpha||(w.include(r,{linearDepth:!1}),b.receiveShadows&&w.include(p,b),w.include(a,b),w.varyings.add("vnormal","vec3"),w.varyings.add("vcolor","vec4"),b.multipassTerrainEnabled&&w.varyings.add("depth","float"),w.vertex.code.add(h`
      void main() {
        vpos = calculateVPos();
        vnormal = normalize(localNormal());

        ${b.multipassTerrainEnabled?"depth = (view * vec4(vpos, 1.0)).z;":""}
        gl_Position = transformPosition(proj, view, vpos);

        ${b.output===o.Color?"forwardLinearDepth();":""}

        vcolor = getColor();
      }
    `)),b.multipassTerrainEnabled&&(w.fragment.include(t),w.include(m,b)),b.output===o.Alpha&&(w.include(i,b),w.fragment.uniforms.add("cameraPosition","vec3"),w.fragment.uniforms.add("localOrigin","vec3"),w.fragment.uniforms.add("opacity","float"),w.fragment.code.add(h`
      void main() {
        discardBySlice(vpos);
        ${b.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}
        float combinedOpacity = vcolor.a * opacity;
        gl_FragColor = vec4(combinedOpacity);
      }
    `)),b.output===o.Color&&(w.include(i,b),w.include(c,b),w.include(s,b),b.receiveShadows&&w.include(p,b),w.include(g,b),w.fragment.uniforms.add("cameraPosition","vec3").add("localOrigin","vec3").add("ambient","vec3").add("diffuse","vec3").add("specular","vec3").add("opacity","float"),w.fragment.include(u),w.fragment.code.add(h`
      void main() {
        discardBySlice(vpos);
        ${b.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}

        shadingParams.viewDirection = normalize(vpos - cameraPosition);
        shadingParams.normalView = vnormal;
        vec3 normal = shadingNormal(shadingParams);
        float ssao = evaluateAmbientOcclusionInverse();

        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);
        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;
        ${b.receiveShadows?"float shadow = readShadowMap(vpos, linearDepth);":b.viewingMode===e.Global?"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);":"float shadow = 0.0;"}
        vec3 albedo = vcolor.rgb * max(ambient, diffuse); // combine the old material parameters into a single one
        float combinedOpacity = vcolor.a * opacity;
        albedo += 0.25 * specular; // don't completely ignore specular for now

        vec3 shadedColor = evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight);
        gl_FragColor = vec4(shadedColor, combinedOpacity);
        gl_FragColor = highlightSlice(gl_FragColor, vpos);
        ${b.oitEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}
      }
    `)),b.output!==o.Depth&&b.output!==o.Shadow||(w.include(r,{linearDepth:!0}),w.vertex.uniforms.add("nearFar","vec2"),w.varyings.add("depth","float"),w.vertex.code.add(h`void main() {
vpos = calculateVPos();
gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);
}`),w.include(i,b),w.include(d,b),w.fragment.uniforms.add("timeElapsed","float"),w.fragment.code.add(h`void main() {
discardBySlice(vpos);
outputDepth(depth);
}`)),b.output===o.Normal&&(w.include(r,{linearDepth:!1}),w.include(v,b),w.vertex.uniforms.add("viewNormal","mat4"),w.varyings.add("vnormal","vec3"),w.vertex.code.add(h`void main(void) {
vpos = calculateVPos();
vnormal = normalize((viewNormal * vec4(localNormal(), 1.0)).xyz);
gl_Position = transformPosition(proj, view, vpos);
}`),w.include(i,b),w.fragment.uniforms.add("waterColor","vec4"),w.fragment.code.add(h`void main() {
discardBySlice(vpos);
vec3 normal = normalize(vnormal);
if (gl_FrontFacing == false) normal = -normal;
gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);
}`)),b.output===o.Highlight&&(w.include(r,{linearDepth:!1}),w.include(v,b),w.vertex.uniforms.add("viewNormal","mat4"),w.varyings.add("vnormal","vec3"),w.vertex.code.add(h`void main(void) {
vpos = calculateVPos();
gl_Position = transformPosition(proj, view, vpos);
}`),w.include(i,b),w.include(n),w.fragment.code.add(h`void main() {
discardBySlice(vpos);
outputHighlight();
}`)),w}const w=Object.freeze({__proto__:null,build:b});export{w as P,b};
