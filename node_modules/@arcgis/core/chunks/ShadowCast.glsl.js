/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ScreenSpacePass as e}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.js";import{ReadLinearDepth as a}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js";import{ReadShadowMap as r}from"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js";import{CameraSpace as o}from"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js";import{RgbaFloatEncoding as t}from"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js";import{glsl as s}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as i}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";var d,n;!function(e){e[e.Accumulate=0]="Accumulate",e[e.Visualize=1]="Visualize",e[e.VisualizeCurrent=2]="VisualizeCurrent",e[e.COUNT=3]="COUNT"}(d||(d={})),function(e){e[e.Gradient=0]="Gradient",e[e.Threshold=1]="Threshold"}(n||(n={}));const l=255,c=1/l;function u(u){const h=new i;h.fragment.include(t),h.fragment.include(a),h.include(o),h.include(e);const{pass:p}=u;if(p===d.Visualize){const{visualization:e,bandsEnabled:a}=u;h.fragment.constants.add("inverseSampleValue","float",l),h.fragment.uniforms.add("shadowCastMap","sampler2D"),h.fragment.uniforms.add("sampleScale","float"),h.fragment.uniforms.add("opacityFromElevation","float");const r=e===n.Gradient,o=e===n.Threshold;h.fragment.uniforms.add("uColor","vec4"),r?a&&h.fragment.uniforms.add("bandSize","float"):o&&h.fragment.uniforms.add("threshold","float"),h.fragment.code.add(s`
      void main(void) {
        vec4 record = texture2D(shadowCastMap, uv);
        float pixelSamples = record.r * inverseSampleValue;

        if (pixelSamples < 1.0) {
          discard;
        }

        float strength = pixelSamples * sampleScale;

        ${o?s`
            if (strength <= threshold) {
              discard;
            }`:""}

        ${r&&a?s`strength = ceil(strength / bandSize) * bandSize;`:""}

        gl_FragColor = vec4(uColor.xyz, uColor.a * opacityFromElevation ${r?s`* strength`:""});
      }
    `)}else p!==d.Accumulate&&p!==d.VisualizeCurrent||(h.include(r),h.fragment.uniforms.add("depthMap","sampler2D"),h.fragment.uniforms.add("inverseViewMatrix","mat4"),h.fragment.uniforms.add("nearFar","vec2"),p===d.Accumulate?h.fragment.constants.add("sampleValue","float",c):h.fragment.constants.add("shadowColor","vec4",[0,0,0,.8]),h.fragment.code.add(s`
      void main(void) {

        float depth = rgba2float(texture2D(depthMap, uv));
        // 0.0 is the clear value of depthMap, which means nothing has been drawn there and we should discard
        if (depth == 0.0) {
          discard;
        }

        float currentPixelDepth = linearDepthFromFloat(depth, nearFar);

        if (-currentPixelDepth > nearFar.y || -currentPixelDepth < nearFar.x) {
          discard;
        }

        vec4 currentPixelPos = vec4(reconstructPosition(gl_FragCoord.xy, currentPixelDepth), 1.0);
        vec4 worldSpacePos = inverseViewMatrix * currentPixelPos;

        mat4 shadowMatrix;
        float linearDepth = -currentPixelDepth;
        int i = chooseCascade(linearDepth, shadowMatrix);

        if (i >= numCascades) {
          discard;
        }

        vec3 lvpos = lightSpacePosition(worldSpacePos.xyz, shadowMatrix);

        // vertex completely outside? -> no shadow
        if (lvpos.z >= 1.0 || lvpos.x < 0.0 || lvpos.x > 1.0 || lvpos.y < 0.0 || lvpos.y > 1.0) {
          discard;
        }

        vec2 uvShadow = cascadeCoordinates(i, lvpos);

        float depthShadow = readShadowMapDepth(uvShadow, shadowMapTex);
        bool shadow = depthShadow < lvpos.z;

        if (!shadow) {
          discard;
        }

        gl_FragColor = ${p===d.Accumulate?s`vec4(sampleValue)`:s`shadowColor`};
      }
    `));return h}const h=Object.freeze({__proto__:null,get ShadowCastPass(){return d},get ShadowCastVisualization(){return n},shadowCastMaxSamples:l,build:u});export{d as S,n as a,h as b,u as c,l as s};
