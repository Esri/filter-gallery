/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{glsl as e}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as i}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{VertexAttribute as t}from"../views/3d/webgl-engine/lib/VertexAttribute.js";var r;function a(a){const u=new i,{mode:d,isAttributeDriven:o}=a;return u.attributes.add(t.POSITION,"vec3"),u.attributes.add(t.UV0,"vec2"),a.isAttributeDriven&&(u.attributes.add(t.FEATUREATTRIBUTE,"float"),u.varyings.add("attributeValue","float")),u.varyings.add("unitCirclePos","vec2"),u.vertex.uniforms.add("radius","float"),u.vertex.uniforms.add("proj","mat4"),u.vertex.uniforms.add("view","mat4"),u.vertex.code.add(e`
    void main() {
      unitCirclePos = uv0;

      vec4 posProj = proj * (view * vec4(${t.POSITION}, 1.0));
      vec4 quadOffset = vec4(unitCirclePos * radius, 0.0, 0.0);

      ${o?e`attributeValue = ${t.FEATUREATTRIBUTE};`:""}
      gl_Position = posProj + quadOffset;
    }
  `),d===r.KernelDensity?u.fragment.code.add(e`
      void main() {
        float radiusRatioSquared = dot(unitCirclePos, unitCirclePos);
        if (radiusRatioSquared > 1.0) {
          discard;
        }

        float oneMinusRadiusRatioSquared = 1.0 - radiusRatioSquared;
        float density = oneMinusRadiusRatioSquared * oneMinusRadiusRatioSquared ${o?e` * attributeValue`:""};
        gl_FragColor = vec4(density);
      }
    `):d===r.GaussianBlur&&(u.fragment.uniforms.add("kernel","sampler2D"),u.fragment.code.add(e`
    void main() {
      float radiusRatioSquared = dot(unitCirclePos, unitCirclePos);
      if (radiusRatioSquared > 1.0) {
        discard;
      }

      vec2 uv = abs(unitCirclePos);
      vec2 uvX = vec2(uv.x, 0.5);
      vec2 uvY = vec2(uv.y, 0.5);
      float intensity = texture2D(kernel, uvX).r * texture2D(kernel, uvY).r${o?e` * attributeValue`:""};
      gl_FragColor = vec4(intensity);
    }
  `)),u}!function(e){e[e.GaussianBlur=0]="GaussianBlur",e[e.KernelDensity=1]="KernelDensity"}(r||(r={}));const u=Object.freeze({__proto__:null,get HeatmapMode(){return r},build:a});export{r as H,u as a,a as b};
