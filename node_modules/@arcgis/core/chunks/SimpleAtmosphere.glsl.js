/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{Transform as e}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{glsl as o}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as i}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{VertexAttribute as t}from"../views/3d/webgl-engine/lib/VertexAttribute.js";var r;function n(n){const a=new i;if(n.geometry===r.Underground)a.attributes.add(t.POSITION,"vec2"),a.varyings.add("color","vec4"),a.vertex.uniforms.add("lightingMainDirection","vec3").add("cameraPosition","vec3").add("undergroundFadeAlpha","float"),a.vertex.code.add(o`void main(void) {
float ndotl = dot(normalize(cameraPosition), lightingMainDirection);
float lighting = max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));
color = vec4(vec3(lighting), undergroundFadeAlpha);
gl_Position = vec4(position.xy, 1.0, 1.0);
}`),a.fragment.code.add(o`void main() {
gl_FragColor = color;
}`);else{a.include(e,{linearDepth:!1}),a.attributes.add(t.POSITION,"vec3"),a.varyings.add("vtc","vec2"),a.varyings.add("falloff","float");const i=n.geometry===r.Cylinder;a.vertex.uniforms.add("proj","mat4").add("view","mat4").add("lightingMainDirection","vec3"),i||(a.varyings.add("innerFactor","float"),a.vertex.uniforms.add("silCircleCenter","vec3").add("silCircleV1","vec3").add("silCircleV2","vec3").add("texV","vec2").add("innerScale","float"));const l=6.2831853,d=1/128;a.vertex.code.add(o`
		void main(void) {
      ${i?o`
      vec3 pos = position;
      float ndotl = lightingMainDirection.z;
      vtc = vec2(0.0, position.z + 0.05);`:o`
      innerFactor = clamp(-position.z, 0.0, 1.0);
      float scale = position.y * (1.0 + innerFactor * innerScale);
      float phi = position.x * ${o.float(l*d)} + 1.0;
      vec3 pos =  (silCircleCenter + sin(phi) * silCircleV1 + cos(phi) * silCircleV2) * scale;
      float ndotl = dot(normalize(position.y > 0.0 ? pos: silCircleCenter), lightingMainDirection);
      vtc.x = position.x  * ${o.float(d)};
      vtc.y = texV.x * (1.0 - position.z) + texV.y * position.z;
      `}
      falloff = max(0.0, smoothstep(-1.0, 0.8, 2.0 * ndotl));

		  gl_Position = transformPosition(proj, view, pos);
		  gl_Position.z = gl_Position.w; // project atmosphere onto the far plane
    }
	  `),a.fragment.uniforms.add("tex","sampler2D"),i||a.fragment.uniforms.add("altitudeFade","float"),a.fragment.code.add(o`
		void main() {
			vec4 atmosphereColor = texture2D(tex, vtc) * falloff;
      ${i?o`gl_FragColor = atmosphereColor;`:o`
			vec4 innerColor = vec4(atmosphereColor.rgb, 1.0 - altitudeFade);
			gl_FragColor = mix(atmosphereColor, innerColor, smoothstep(0.0, 1.0, innerFactor));
      `}
    }`)}return a}!function(e){e[e.Cone=0]="Cone",e[e.Cylinder=1]="Cylinder",e[e.Underground=2]="Underground",e[e.COUNT=3]="COUNT"}(r||(r={}));const a=Object.freeze({__proto__:null,get SimpleAtmosphereGeometry(){return r},build:n});export{r as S,a,n as b};
