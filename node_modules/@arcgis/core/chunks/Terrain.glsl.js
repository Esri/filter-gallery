/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ShaderOutput as e}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js";import{Slice as r}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as o}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{VertexTangent as a}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexTangent.glsl.js";import{OutputDepth as i}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js";import{OutputHighlight as l}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{EvaluateSceneLighting as t}from"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js";import{NormalUtils as n}from"../views/3d/webgl-engine/core/shaderLibrary/shading/NormalUtils.glsl.js";import{PBRMode as s}from"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{OverlayMode as v,Overlay as d}from"../views/3d/webgl-engine/core/shaderLibrary/terrain/Overlay.glsl.js";import{Skirts as c}from"../views/3d/webgl-engine/core/shaderLibrary/terrain/Skirts.glsl.js";import{TerrainTexture as g}from"../views/3d/webgl-engine/core/shaderLibrary/terrain/TerrainTexture.glsl.js";import{HeaderComment as m}from"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js";import{glsl as p}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as u}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{VertexAttribute as h}from"../views/3d/webgl-engine/lib/VertexAttribute.js";function w(w){const y=new u;if(y.include(m,{name:"Terrain Shader",output:w.output}),y.include(c),y.attributes.add(h.POSITION,"vec3"),y.attributes.add(h.UV0,"vec2"),y.vertex.uniforms.add("proj","mat4").add("view","mat4").add("origin","vec3").add("skirtScale","float"),y.fragment.uniforms.add("origin","vec3"),w.output===e.Color){y.include(o,{linearDepth:!1}),y.include(n,w),y.include(g,w),y.include(t,w);const e=w.overlayMode!==v.Disabled,i=w.overlayMode===v.EnabledWithWater;e&&y.include(d,{pbrMode:s.Water,useCustomDTRExponentForWater:!1,ssrEnabled:w.ssrEnabled,highStepCount:w.highStepCount}),i&&y.include(a,w),y.varyings.add("vnormal","vec3"),y.varyings.add("vpos","vec3"),y.vertex.uniforms.add("viewNormal","mat4"),w.receiveShadows&&y.varyings.add("linearDepth","float"),w.tileBorders&&y.varyings.add("vuv","vec2"),w.atmosphere&&(y.vertex.uniforms.add("lightingMainDirection","vec3"),y.varyings.add("wnormal","vec3"),y.varyings.add("wlight","vec3")),w.screenSizePerspective&&(y.vertex.uniforms.add("screenSizePerspective","vec4"),y.varyings.add("screenSizeDistanceToCamera","float"),y.varyings.add("screenSizeCosAngle","float")),y.vertex.code.add(p`
      void main(void) {
        vpos = position;
        vnormal = getLocalUp(vpos, origin);

        vec2 uv = uv0;
        vpos = applySkirts(uv, vpos, vnormal, skirtScale);
        ${w.atmosphere?p`
        wnormal = normalize((viewNormal * vec4(normalize(vpos + origin), 1.0)).xyz);
        wlight = normalize((view  * vec4(lightingMainDirection, 1.0)).xyz);`:""}
        ${w.tileBorders?p`vuv = uv;`:""}
        ${w.screenSizePerspective?p`
        vec3 viewPos = (view * vec4(vpos, 1.0)).xyz;
        screenSizeDistanceToCamera = length(viewPos);
        vec3 viewSpaceNormal = (viewNormal * vec4(normalize(vpos + origin), 1.0)).xyz;
        screenSizeCosAngle = abs(viewSpaceNormal.z);`:""}
        gl_Position = transformPosition(proj, view, vpos);
        ${w.receiveShadows?p`linearDepth = gl_Position.w;`:""}
        forwardTextureCoordinates(uv);
        ${e?p`setOverlayVTC(uv);`:""}
        ${i?p`forwardVertexTangent(vnormal);`:p``}
      }
    `),y.extensions.add("GL_OES_standard_derivatives"),y.extensions.add("GL_EXT_shader_texture_lod"),y.include(r,w),y.include(t,w),y.fragment.uniforms.add("cameraPosition","vec3").add("viewDirection","vec3").add("ssaoTex","sampler2D").add("viewportPixelSz","vec4"),w.screenSizePerspective&&y.fragment.uniforms.add("screenSizePerspective","vec4"),i&&(y.fragment.uniforms.add("ovWaterTex","sampler2D"),y.fragment.uniforms.add("view","mat4")),y.fragment.code.add(p`const float sliceOpacity = 0.2;
float lum(vec3 c) {
return (min(min(c.r, c.g), c.b) + max(max(c.r, c.g), c.b)) * 0.5;
}`),y.fragment.code.add(p`
      void main() {
        ${w.receiveShadows?p`float shadow = readShadowMap(vpos, linearDepth);`:p`float shadow = 0.0;`}
        float vndl = dot(normalize(vnormal), lightingMainDirection);

        float ssao = viewportPixelSz.w < .0 ? 1.0 : texture2D(ssaoTex, (gl_FragCoord.xy - viewportPixelSz.xy) * viewportPixelSz.zw).a;
        vec4 tileColor = getTileColor();
        ${e?p`
            vec4 overlayColorOpaque = getOverlayColor(ovColorTex, vtcOverlay);
            vec4 overlayColor = overlayOpacity * overlayColorOpaque;
            vec4 groundColor = tileColor;
            tileColor = tileColor * (1.0 - overlayColor.a) + overlayColor;`:""}
        if (rejectBySlice(vpos)) {
          tileColor *= sliceOpacity;
        }
        ${w.atmosphere?p`
            float ndotl = clamp(vndl, 0.0, 1.0);
            vec3 atm = vec3(clamp(1.0 - dot(-viewDirection, wnormal), 0.0, 1.0));
            atm *= clamp(1.0 - lum(tileColor.rgb) * 1.5, 0.0, 1.0); //avoid atmosphere on bright base maps
            atm *= clamp(ndotl * 2.0, 0.0, 1.0); // avoid atmosphere on dark side of the globe
            atm *= tileColor.a; // premultiply with tile alpha`:""}

        vec3 albedo = ${w.atmosphere?p`atm + tileColor.rgb;`:p`tileColor.rgb;`}
        vec3 normal = normalize(vnormal);

        // heuristic shading function used in the old terrain, now used to add ambient lighting
        float additionalAmbientScale = smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));
        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;

        gl_FragColor = vec4(evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight), tileColor.a);
        ${i?p`
            vec4 overlayWaterMask = getOverlayColor(ovWaterTex, vtcOverlay);
            float waterNormalLength = length(overlayWaterMask);
            if (waterNormalLength > 0.95) {
              mat3 tbnMatrix = mat3(tbnTangent, tbnBiTangent, vnormal);
              vec4 waterOverlayColor = vec4(overlayColor.w > 0.0 ? overlayColorOpaque.xyz/overlayColor.w : vec3(1.0), overlayColor.w);
              vec4 viewPosition = view*vec4(vpos, 1.0);
              vec4 waterColorLinear = getOverlayWaterColor(overlayWaterMask, waterOverlayColor, -normalize(vpos - cameraPosition), shadow, vnormal, tbnMatrix, viewPosition.xyz,  vpos + origin);
              vec4 waterColorNonLinear = delinearizeGamma(vec4(waterColorLinear.xyz, 1.0));
              // un-gamma the ground color to mix in linear space
              gl_FragColor = mix(groundColor, waterColorNonLinear, waterColorLinear.w);
            }`:""}
        ${w.screenSizePerspective?p`
          float perspectiveScale = screenSizePerspectiveScaleFloat(1.0, screenSizeCosAngle, screenSizeDistanceToCamera, screenSizePerspective);
          if (perspectiveScale <= 0.25) {
            gl_FragColor = mix(gl_FragColor, vec4(1.0, 0.0, 0.0, 1.0), perspectiveScale * 4.0);
          }
          else if (perspectiveScale <= 0.5) {
            gl_FragColor = mix(gl_FragColor, vec4(0.0, 0.0, 1.0, 1.0), (perspectiveScale - 0.25) * 4.0);
          }
          else if (perspectiveScale >= 0.99) {
            gl_FragColor = mix(gl_FragColor, vec4(0.0, 1.0, 0.0, 1.0), 0.2);
          }
          else {
            gl_FragColor = mix(gl_FragColor, vec4(1.0, 0.0, 1.0, 1.0), (perspectiveScale - 0.5) * 2.0);
          }`:""}
        ${w.tileBorders?p`
            vec2 dVuv = fwidth(vuv);
            vec2 edgeFactors = smoothstep(vec2(0.0), 1.5 * dVuv, min(vuv, 1.0 - vuv));
            float edgeFactor = 1.0 - min(edgeFactors.x, edgeFactors.y);
            gl_FragColor = mix(gl_FragColor, vec4(1.0, 0.0, 0.0, 1.0), edgeFactor);`:""}
        gl_FragColor = highlightSlice(gl_FragColor, vpos);
      }
    `)}return w.output!==e.Depth&&w.output!==e.Shadow||(y.include(o,{linearDepth:!0}),y.include(i,{output:w.output}),y.include(n,w),y.varyings.add("linearDepth","float"),y.vertex.uniforms.add("nearFar","vec2"),y.vertex.code.add(p`void main(void) {
vec3 normal = getLocalUp(position, origin);
vec2 uv = uv0;
vec3 vpos = applySkirts(uv, position, normal.xyz, skirtScale);
gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);
}`),y.fragment.code.add(p`void main() {
outputDepth(linearDepth);
}`)),w.output===e.Normal&&(y.include(o,{linearDepth:!1}),y.include(n,w),y.varyings.add("vnormal","vec3"),y.varyings.add("vpos","vec3"),y.vertex.uniforms.add("viewNormal","mat4"),y.vertex.code.add(p`void main(void) {
vec3 normal = getLocalUp(position, origin);
vec2 uv = uv0;
vpos = applySkirts(uv, position, normal, skirtScale);
gl_Position = transformPosition(proj, view, vpos);
vnormal = normalize((viewNormal * vec4(normal, 1.0)).xyz);
}`),y.fragment.code.add(p`void main() {
vec3 normal = normalize(vnormal);
if (gl_FrontFacing == false) {
normal = -normal;
}
gl_FragColor = vec4(vec3(0.5) + 0.5 * normal, 0.0);
}`)),w.output===e.Highlight&&(y.include(o,{linearDepth:!1}),y.include(n,w),y.include(d,{pbrMode:s.Disabled}),y.vertex.code.add(p`void main() {
vec3 vnormal = getLocalUp(position, origin);
vec2 uv = uv0;
vec3 vpos = applySkirts(uv, position, vnormal, skirtScale);
setOverlayVTC(uv);
gl_Position = transformPosition(proj, view, vpos);
}`),y.include(l),y.fragment.code.add(p`void main() {
vec4 overlayColor = getCombinedOverlayColor();
if (overlayColor.a == 0.0) {
gl_FragColor = vec4(0.0);
return;
}
outputHighlight();
}`)),y}const y=Object.freeze({__proto__:null,build:w});export{y as T,w as b};
