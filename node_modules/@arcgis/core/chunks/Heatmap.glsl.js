/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ScreenSpacePass as e}from"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.js";import{DiscardOrAdjustAlpha as r}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{glsl as i}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as t}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{AlphaDiscardMode as n}from"../views/3d/webgl-engine/lib/basicInterfaces.js";import{H as s}from"./HeatmapDensity.glsl.js";function a(a){const o=new t,{mode:d}=a;return o.include(e),o.include(r,{alphaDiscardMode:n.Blend}),o.fragment.uniforms.add("densityMap","sampler2D"),o.fragment.uniforms.add("tex","sampler2D"),o.fragment.uniforms.add("densityNormalizer","float"),o.fragment.uniforms.add("minDensity","float"),d===s.KernelDensity&&o.fragment.uniforms.add("densityMultiplier","float"),o.fragment.code.add(i`
    void main() {
      float density = texture2D(densityMap, uv).r${d===s.KernelDensity?i` * densityMultiplier`:""};
      float densityRatio = (density - minDensity) * densityNormalizer;

      vec4 color = texture2D(tex, vec2(clamp(densityRatio, 0.0, 1.0), 0.5));

      discardOrAdjustAlpha(color);
      gl_FragColor = color;
    }
  `),o}const o=Object.freeze({__proto__:null,build:a,get HeatmapMode(){return s}});export{o as H,a as b};
