/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{ShaderOutput as e}from"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js";import{Slice as t}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{Transform as o}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{VertexColor as r}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js";import{OutputDepth as a}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js";import{OutputHighlight as i}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{ReadLinearDepth as n}from"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js";import{multipassTerrainTest as l}from"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js";import{symbolAlphaCutoff as d}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{ColorConversion as c}from"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js";import{glsl as s}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{ShaderBuilder as p}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{VertexAttribute as v}from"../views/3d/webgl-engine/lib/VertexAttribute.js";import{Style as g}from"../views/3d/webgl-engine/materials/PatternStyle.js";const u=.70710678118,m=u,f=.08715574274;function h(h){const b=new p;h.draped||b.extensions.add("GL_OES_standard_derivatives");const y=h.output===e.Depth;b.include(o,{linearDepth:y}),b.include(r,h),b.vertex.uniforms.add("proj","mat4"),b.vertex.uniforms.add("view","mat4"),y&&(b.include(a,h),b.vertex.uniforms.add("nearFar","vec2"),b.varyings.add("linearDepth","float")),h.draped?b.vertex.uniforms.add("worldToScreenRatio","float"):(b.vertex.uniforms.add("worldToScreenPerDistanceRatio","float"),b.vertex.uniforms.add("cameraPosition","vec3"),b.attributes.add(v.BOUNDINGRECT,"mat3")),b.attributes.add(v.POSITION,"vec3"),b.attributes.add(v.UVMAPSPACE,"vec4"),b.varyings.add("vpos","vec3"),b.varyings.add("vuv","vec2"),h.multipassTerrainEnabled&&b.varyings.add("depth","float");const x=h.style===g.ForwardDiagonal||h.style===g.BackwardDiagonal||h.style===g.DiagonalCross;return x&&b.vertex.code.add(s`
      const mat2 rotate45 = mat2(${s.float(u)}, ${s.float(-m)},
                                 ${s.float(m)}, ${s.float(u)});
    `),h.draped||(b.vertex.code.add(s`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {
float projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);
return center + halfVector * clamp(projectedLength, -1.0, 1.0);
}`),b.vertex.code.add(s`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {
float d = dot(planeNormal, planePoint);
float t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);
return rayOrigin + t * rayDir;
}`),b.vertex.code.add(s`
      float boundingRectDistanceToCamera() {
        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);
        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);
        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);
        vec3 n = normalize(cross(halfU, halfV));

        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);

        float viewAngle = dot(viewDir, n);
        float minViewAngle = ${s.float(f)};

        if (abs(viewAngle) < minViewAngle) {
          // view direction is (almost) parallel to plane -> clamp it to min angle
          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;
          viewDir = normalize(viewDir + normalComponent * n);
        }

        // intersect view direction with infinite plane that contains bounding rect
        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);

        // clip to bounds by projecting to u and v line segments individually
        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);
        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);

        // use to calculate the closest point to camera on bounding rect
        vec3 closestPoint = uProjected + vProjected - center;

        return length(closestPoint - cameraPosition);
      }
    `)),b.vertex.code.add(s`
    vec2 scaledUV() {
      vec2 uv = uvMapSpace.xy ${x?" * rotate45":""};
      vec2 uvCellOrigin = uvMapSpace.zw ${x?" * rotate45":""};

      ${h.draped?"":s`
            float distanceToCamera = boundingRectDistanceToCamera();
            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;
          `}

      // Logarithmically discretize ratio to avoid jittering
      float step = 0.1;
      float discreteWorldToScreenRatio = log(worldToScreenRatio);
      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;
      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);

      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${s.float(h.patternSpacing)});
      return uvOffset + (uv * discreteWorldToScreenRatio);
    }
  `),b.vertex.code.add(s`
    void main(void) {
      vuv = scaledUV();
      vpos = position;
      ${h.multipassTerrainEnabled?"depth = (view * vec4(vpos, 1.0)).z;":""}
      forwardNormalizedVertexColor();
      gl_Position = ${y?s`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);`:s`transformPosition(proj, view, vpos);`}
    }
  `),b.include(t,h),b.fragment.include(c),b.fragment.uniforms.add("uColor","vec4"),h.draped&&b.fragment.uniforms.add("texelSize","float"),h.output===e.Highlight&&b.include(i),h.multipassTerrainEnabled&&(b.fragment.include(n),b.include(l,h)),h.output!==e.Highlight&&(b.fragment.code.add(s`
      const float lineWidth = ${s.float(h.lineWidth)};
      const float spacing = ${s.float(h.patternSpacing)};
      const float spacingINV = ${s.float(1/h.patternSpacing)};

      float coverage(float p, float txlSize) {
        p = mod(p, spacing);

        float halfTxlSize = txlSize / 2.0;

        float start = p - halfTxlSize;
        float end = p + halfTxlSize;

        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;
        coverage -= min(lineWidth, mod(start, spacing));
        coverage -= max(lineWidth - mod(end, spacing), 0.0);

        return coverage / txlSize;
      }
    `),h.draped||b.fragment.code.add(s`const int maxSamples = 5;
float sample(float p) {
vec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));
float fwidth = dxdy.x + dxdy.y;
ivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));
vec2 invSamples = 1.0 / vec2(samples);
float accumulator = 0.0;
for (int j = 0; j < maxSamples; j++) {
if(j >= samples.y) {
break;
}
for (int i = 0; i < maxSamples; i++) {
if(i >= samples.x) {
break;
}
vec2 step = vec2(i,j) * invSamples - 0.5;
accumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);
}
}
accumulator /= float(samples.x * samples.y);
return accumulator;
}`)),b.fragment.code.add(s`
    void main() {
      discardBySlice(vpos);
      ${h.multipassTerrainEnabled?"terrainDepthTest(gl_FragCoord, depth);":""}
      vec4 color = ${h.attributeColor?"vColor * uColor;":"uColor;"}
      color = highlightSlice(color, vpos);

      ${h.output!==e.Highlight?s`color.a *= ${w(h)};`:""}

      if (color.a < ${s.float(d)}) {
        discard;
      }

      ${h.output===e.Alpha?s`gl_FragColor = vec4(color.a);`:""}

      ${h.output===e.Color?s`gl_FragColor = color; ${h.oitEnabled?"gl_FragColor = premultiplyAlpha(gl_FragColor);":""}`:""}
      ${h.output===e.Highlight?s`outputHighlight();`:""}
      ${h.output===e.Depth?s`outputDepth(linearDepth);`:""};
    }
  `),b}function w(e){function t(t){return e.draped?s`coverage(vuv.${t}, texelSize)`:s`sample(vuv.${t})`}switch(e.style){case g.ForwardDiagonal:case g.Horizontal:return t("y");case g.BackwardDiagonal:case g.Vertical:return t("x");case g.DiagonalCross:case g.Cross:return s`
        1.0 - (1.0 - ${t("x")}) * (1.0 - ${t("y")})
      `;default:return"0.0"}}const b=Object.freeze({__proto__:null,build:h});export{b as P,h as b};
