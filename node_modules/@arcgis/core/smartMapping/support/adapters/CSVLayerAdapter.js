/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Error.js";import{unwrap as r}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/set.js";import{subclass as i}from"../../../core/accessorSupport/decorators/subclass.js";import{createGenerateRendererClassBreaks as s,createGenerateRendererUniqueValues as o}from"../../../rest/support/generateRendererUtils.js";import{getDataValues as a,mergeWhereClauses as n}from"../../statistics/support/utils.js";import{WorkerClient as l}from"../../statistics/support/WorkerClient.js";import{getFieldsList as u}from"../utils.js";import c from"./FeatureLayerAdapter.js";import{ensureFeaturesJSON as p}from"./support/utils.js";function m(e){return"esri.rest.support.ClassBreaksDefinition"===e.declaredClass}function d(e){return"esri.rest.support.UniqueValueDefinition"===e.declaredClass}let f=class extends c{constructor(e){super(e)}async _createGenerateRendererResult(e,r,i,n,l){const u=null==e?void 0:e.features;if(!(null==u?void 0:u.length))throw new t("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const c=p(u);let f=null;if("percent-of-total"===n){if(f=(await this.workerClient.summaryStatistics({field:r},c)).sum,null==f)throw new t("csv-layer-adapter:invalid","invalid normalizationTotal")}if(m(l)){const e=(await a({field:r,normalizationType:n,normalizationField:i,normalizationTotal:f},c)).filter((e=>Number.isFinite(e)));return s({definition:l,values:e,normalizationTotal:f})}if(d(l)){const e=(await a({field:r},c)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return o(e)}}generateRenderer(e,t){const r=e.classificationDefinition;let i=null,s=null,o=null;m(r)?(i=r.classificationField,s=r.normalizationField,o=r.normalizationType):d(r)&&(i=r.attributeField);const a=this.layer;return u({field:i,normalizationField:s}).then((l=>{const u=a.createQuery();return u.returnGeometry=!1,u.outFields=l,u.where=n(u.where,e.where),a.queryFeatures(u,{signal:t}).then((e=>this._createGenerateRendererResult(e,i,s,o,r)))}))}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=l.getInstance(),await this.workerClient.open(r(r(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};f=e([i("esri.smartMapping.support.adapters.CSVLayerAdapter")],f);const h=f;export{h as default};
