/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import{pickRandom as t}from"../../../core/arrayUtils.js";import a from"../../../core/Error.js";import r from"../../../core/Logger.js";import{unwrap as i}from"../../../core/maybe.js";import{timeout as s,eachAlways as n,throwIfAborted as o}from"../../../core/promiseUtils.js";import{whenFalseOnce as l}from"../../../core/watchUtils.js";import{property as u}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{toQuantizationTransform as c,quantizePoint as p}from"../../../geometry/support/quantizationUtils.js";import{isWrappable as h,getInfo as d}from"../../../geometry/support/spatialReferenceUtils.js";import{isHostedAgolService as y}from"../../../layers/support/arcgisLayerUrl.js";import{kebabDict as f}from"../../../layers/support/fieldType.js";import{isStringField as F,isNumericField as g,isDateField as w}from"../../../layers/support/fieldUtils.js";import S from"../../../rest/support/GenerateRendererParameters.js";import v from"../../../rest/support/QuantizationParameters.js";import x from"../../../rest/support/StatisticDefinition.js";import _ from"../../../rest/support/UniqueValueDefinition.js";import{getArcadeForPredominantCategory as z,getSQLForPredominantCategoryName as q}from"../../statistics/support/predominanceUtils.js";import{summaryStatistics as V,uniqueValues as T,histogram as E,classBreaks as L}from"../../statistics/support/statsWorker.js";import{getRangeExpr as j,getSQLFilterForNormalization as Q,mergeWhereClauses as M}from"../../statistics/support/utils.js";import{WorkerClient as C}from"../../statistics/support/WorkerClient.js";import{getFieldsList as b}from"../utils.js";import P from"./LayerAdapter.js";import{ensureFeaturesJSON as N,msSinceUnixEpochSQL as B,getFieldExpr as k,getSummaryStatisticsFromFeatureSet as I,getViewInfoParams as O,getMissingFields as R,getUniqueValuesFromFeatureSet as D,getHistogramFromFeatureSet as G,generateBinParams as J,calculateHeatmapStats as U,getPredominantCategoriesFromUVInfos as A}from"./support/utils.js";import{processSummaryStatisticsResult as W,isNullCountSupported as $,statisticTypes as H,createUVResult as Z,getEqualIntervalBins as K,createClassBreaksDefinition as X,resolveCBResult as Y}from"../../../statistics/utils.js";import ee from"../../../tasks/GenerateRendererTask.js";import te from"../../../geometry/Point.js";const ae=r.getLogger("esri.smartMapping.support.adapters.FeatureLayerAdapter"),re=5,ie=10,se=2e4,ne=4e5;let oe=class extends P{constructor(e){super(e)}destroy(){var e;this._hasLocalSource=null,null==(e=this.workerClient)||e.destroy()}_isStatsSupportedOnService(){const e=this.layer;return!e.get("capabilities.query.supportsStatistics")||"multipatch"===this.geometryType&&!y(e.url)&&e.version<10.5?Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support statistics query")):Promise.resolve()}async _waitForLayerViewUpdate(e){if(!e)throw new a("feature-layer-adapter:insufficient-data","layerView is required to fetch the features");const t=new AbortController,r=l(e,"updating",t.signal);await s(r,5e3,t).catch((e=>{throw ae.warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeaturesFromMemory(e,t,a,r){const i=this.layer,s="json"===r;if(this._hasLocalSource){const e=await i.queryFeatures(t);return s?N(e.features):e.features}if(await this._waitForLayerViewUpdate(e),s&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:r}=await e.queryFeaturesJSON(t,{signal:a});return r}const n=await e.queryFeatures(t,{signal:a});return s?N(n.features):n.features}_fetchFeaturesFromService(e,t){return this.layer.queryFeatures(e,{signal:t}).then((e=>e.features))}_fetchFeaturesJSONFromService(e,t){return this._fetchFeaturesFromService(e,t).then(N)}_fetchFeaturesForStats(e,t){return b({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t)))}_summaryStatsFromGenRend(e){const t=e.normalizationType,a=e.normalizationField;return this.classBreaks({field:e.field,numClasses:re,classificationMethod:"standard-deviation",standardDeviationInterval:.25,normalizationType:t,normalizationField:"field"===t?a:void 0,minValue:e.minValue,maxValue:e.maxValue,signal:e.signal}).then((e=>{let t,a,r;if(e.classBreakInfos.some((e=>(e.hasAvg&&(t=e),!!t))),t){const e=t.maxValue-t.minValue;a=t.minValue+e/2,r=4*e}const i={min:e.minValue,max:e.maxValue,avg:a,stddev:r};return W(i)}))}_getSummaryStatsQuery(e,t){const{field:a,normalizationType:r,normalizationField:i,normalizationTotal:s,minValue:n,maxValue:o}=e,l=this.supportsSQLExpression&&t?B(this,a):e.sqlExpression,u=k({field:a,normalizationType:r,normalizationField:i,normalizationTotal:s,layer:this}),m=l||u,c=m?j(m,n,o):null,p=Q({field:a,normalizationField:i,normalizationType:r}),h=M(e.sqlWhere,p),d=M(h,c),y=$({normalizationField:i,normalizationType:r,sqlExpression:l,supportsSQLExpression:this.supportsSQLExpression,minValue:n,maxValue:o}),f=F(this.getField(a)),g=H.filter((e=>"nullcount"===e?y:!f||"count"===e)),w=this.layer.createQuery();return w.where=M(w.where,d),w.sqlFormat=l?"standard":null,w.outStatistics=g.map((e=>{const t=new x;let a=null,r=null,i=`${e}_value`;return"variance"===e?(a="var",r=m):"nullcount"===e?(a="count",r=this.layer.objectIdField,i="totalcount_value"):"median"===e?(a="percentile-continuous",r=m,t.statisticParameters={value:.5}):(a=e,r=m),t.statisticType=a,t.onStatisticField=r,t.outStatisticFieldName=i,t})),w}async _summaryStatsFromServiceQuery(e,t){await this._isStatsSupportedOnService(),"percent-of-total"===e.normalizationType&&(e.normalizationTotal=await this._getNormalizationTotal(e.field,e.normalizationType));const a=this._getSummaryStatsQuery(e,t),r=await this.layer.queryFeatures(a,{signal:e.signal}),i=I(r,t);return W(i)}async _summaryStatsFromClientQuery(e,t){const a=this._getSummaryStatsQuery(e,t),r=await this.layer.queryFeatures(a,{signal:e.signal}),i=I(r,t);return W(i)}async _getNormalizationTotalFromMemory(e,t,r){const{featuresJSON:i,graphics:s,layerView:n,query:o}=t,l=(!i&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:r}):i?await this.workerClient.summaryStatistics({field:e},i):await V({attribute:{field:e},features:s})).sum;if(null==l)throw new a("feature-layer-adapter:invalid","invalid normalizationTotal");return l}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:m,query:c}=await this._processStatsFromMemoryParams(e);return i&&a&&(l||u)&&(o.fieldType=null!=t&&t.type?f.toJSON(t.type):null,o.viewInfoParams=O(a)),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:m,query:c},n)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(c,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):V({attribute:o,features:u})}async _processStatsFromMemoryParams(e){const t=e.features;if(null!=t&&t.length){return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:t}:{featuresJSON:t}}const{view:r,field:i,normalizationField:s,valueExpression:n,signal:o}=e;let l=null,u=null,m=null,c=null;if(r)try{l=await r.whenLayerView(this.layer),u="querySummaryStatistics"in l&&"function"==typeof l.querySummaryStatistics}catch{u=!1}if(u)try{await this._waitForLayerViewUpdate(l);const e=await b({field:i,normalizationField:s,valueExpression:n});(await R(this,e,l)).length?u=!1:(m=this.layer.createQuery(),m.outFields=e,m.returnGeometry=!1),l.suspended&&(u=!1)}catch{u=!1}var p;if(!u&&(c=await this._fetchFeaturesForStats({field:i,valueExpression:n,normalizationField:s,view:r,signal:o},"json"),null==(p=c)||!p.length))throw new a("feature-layer-adapter:insufficient-data","No features are available to calculate statistics");return{layerView:l,query:m,featuresJSON:c}}_uvFromGenRenderer(e,t){const a=e.field,r=new _;r.attributeField=a;const i=new S;return i.classificationDefinition=r,this.generateRenderer(i,e.signal).then((e=>{const t={},r=this.getField(a);return e.uniqueValues.forEach((e=>{let a=e.value;null!=a&&""!==a&&("string"!=typeof a||""!==a.trim()&&"<null>"!==a.toLowerCase())||(a=null),null==t[a]?t[a]={count:e.count,data:g(r)&&a?Number(a):a}:t[a].count=t[a].count+e.count})),{count:t}})).then((a=>Z(a,t,e.returnAllCodedValues)))}_getUVQuery(e){const t=e.field,a=e.sqlExpression,r="countOF"+(t||"Expr"),i=new x;i.statisticType="count",i.onStatisticField=a?"1":t,i.outStatisticFieldName=r;const s=this.layer.createQuery();return s.where=M(s.where,e.sqlWhere),s.sqlFormat=a?"standard":null,s.outStatistics=[i],s.groupByFieldsForStatistics=[t||a],s}_uvFromServiceQuery(e,t){return this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(this._getUVQuery(e),{signal:e.signal}))).then((t=>D(t,this,e.field,e.view,null,e.signal))).then((a=>Z(a,t,e.returnAllCodedValues)))}async _uvFromClientQuery(e,t){const{signal:a}=e,r=this._getUVQuery(e),i=await this.layer.queryFeatures(r,{signal:a}),s=await D(i,this,e.field,e.view,null,a);return Z(s,t,e.returnAllCodedValues)}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m}=await this._processStatsFromMemoryParams(e),c={field:r,valueExpression:i,domain:t,returnAllCodedValues:s};return i&&a&&o&&(c.viewInfoParams=O(a)),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,c,{signal:n}):o?this.workerClient.uniqueValues(c,o):T({attribute:c,features:l})}_calcBinsSQL(e,t,a){const r=[],i=t.length;return t.forEach(((t,s)=>{const[n,o]=t;let l=null;l=0!==s||a?s!==i-1||a?M(`${e} >= ${n}`,`${e} ${s===i-1?" <= ":" < "} ${o}`):`${e} >= ${n}`:`${e} < ${o}`,r.push("WHEN ("+l+") THEN "+(s+1))})),["CASE",r.join(" "),"ELSE 0","END"].join(" ")}_getNormalizationTotal(e,t,a){return e&&"percent-of-total"===t?this.summaryStatistics({field:e,signal:a}).then((e=>e.sum)):Promise.resolve(null)}_getQueryParamsForExpr(e,t){const a=e.valueExpression||e.sqlExpression,r=e.signal;if(!a){const{field:a,normalizationType:i,normalizationField:s}=e,n=a?this.getField(a):null,o=w(n),l={field:a,normalizationType:i,normalizationField:s,normalizationTotal:t,layer:this};return{sqlExpression:o?B(this,a):k(l),sqlWhere:o?null:e.sqlWhere||Q({field:a,normalizationType:i,normalizationField:s}),signal:r}}return{valueExpression:e.valueExpression,sqlExpression:e.sqlExpression,sqlWhere:e.sqlWhere,signal:r}}_getDataRange(e,t,a){return null!=t&&null!=a?Promise.resolve({min:t,max:a}):this.summaryStatistics(e).then((e=>({min:e.min,max:e.max})))}_histogramForExpr(e){return this._getNormalizationTotal(e.field,e.normalizationType,e.signal).then((t=>{const a=this._getQueryParamsForExpr(e,t);return this._getDataRange(a,e.minValue,e.maxValue).then((r=>{const{min:i,max:s}=r,n=e.numBins||ie,o=K(i,s,n),l=this._calcBinsSQL(a.sqlExpression,o,null!=e.minValue&&null!=e.maxValue),u=new x({statisticType:"count",outStatisticFieldName:"countOFExpr",onStatisticField:"1"}),m=this.layer.createQuery();return m.where=M(m.where,a.sqlWhere),m.sqlFormat="standard",m.outStatistics=[u],m.groupByFieldsForStatistics=[l],m.orderByFields=[l],this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(m,{signal:a.signal}))).then((e=>G(e,i,s,n,t)))}))}))}_histogramForField(e){let t=null;return t=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new a("feature-layer-adapter:insufficient-data","Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),t.then((t=>this._getBins({min:t.min,max:t.max},e.field,e.numBins,e.view,e.signal)))}_getBins(e,t,a=ie,r,i){const{min:s,max:n,normTotal:o,excludeZerosExpr:l}=e,u=e.intervals||K(s,n,a),m=e.sqlExpr||t;return this._queryBins(u,m,l,r,i).then((e=>({bins:e.map(((e,t)=>({minValue:u[t][0],maxValue:u[t][1],count:e.value}))),minValue:s,maxValue:n,normalizationTotal:o})))}_queryBins(e,t,a,r,i){const s=[],o=e.length;for(let n=0;n<o;n++){const r=M(a,M(t+" >= "+e[n][0],null!==e[n][1]?t+(n===o-1?" <= ":" < ")+e[n][1]:""));s.push(r)}return n(s.map((e=>this.queryFeatureCount({whereClause:e,view:r,signal:i}))))}_binParamsFromGenRend(e,t){const{field:a,normalizationType:r,normalizationField:i,signal:s}=e,n=Q({field:a,normalizationType:r,normalizationField:i}),o=new S({classificationDefinition:X({field:a,normalizationType:r,normalizationField:i,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numBins||ie}),where:M(n,t)});return this.generateRenderer(o,s).then((e=>{const{normalizationTotal:t,classBreaks:s}=e;return J({field:a,normalizationType:r,normalizationField:i,normalizationTotal:t,classBreaks:s,where:n,layer:this})}))}async _histogramFromMemory(e){const{view:t,field:a,signal:r}=e,{featuresJSON:i,graphics:s,layerView:n,query:o}=await this._processStatsFromMemoryParams(e),l={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&i&&(l.viewInfoParams=O(t)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:i,graphics:s,layerView:n,query:o},r)),!i&&!s&&n&&"queryHistogram"in n?n.queryHistogram(o,l,{signal:r}):i?this.workerClient.histogram(l,i):E({attribute:l,features:s})}_classBreaksFromGenRend(e){const{field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,signal:s}=e,n=Q({field:t,normalizationType:a,normalizationField:r}),o=k({field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,layer:this}),l=j(o,e.minValue,e.maxValue),u=X({field:t,normalizationType:a,normalizationField:r,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numClasses||re}),m=new S;return m.classificationDefinition=u,m.where=M(n,l),this.generateRenderer(m,s).then((t=>Y(t,e.classificationMethod)))}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:a}=e,r=e.numClasses||re,i=[],s=(a-t)/r;for(let l=0;l<r;l++){const e=t+l*s;i.push({minValue:e,maxValue:e+s})}i[r-1].maxValue=a;const n={classBreaks:i,normalizationTotal:e.normalizationTotal},o=Y(n,e.classificationMethod);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{view:t,field:a,signal:r}=e,{featuresJSON:i,graphics:s,layerView:n,query:o}=await this._processStatsFromMemoryParams(e),l={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&i&&(l.viewInfoParams=O(t)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:i,graphics:s,layerView:n,query:o},r)),!i&&!s&&n&&"queryClassBreaks"in n?n.queryClassBreaks(o,l,{signal:r}):i?this.workerClient.classBreaks(l,i):L({attribute:l,features:s})}async _heatmapStatsFromMemory(e,t){const{blurRadius:r,field:i,view:s,signal:n}=e,o=new v({extent:s.extent,tolerance:"2d"===s.type?s.state.resolution:1}),l=this._quantizeFeatures(e.features||await this._fetchFeaturesForStats({field:i,view:s,returnGeometry:!0,signal:n}),o,s);if(!l||!l.length)return{count:0,min:null,max:null,avg:null,stddev:null};const u=U(l,r,t,i,s.size[0],s.size[1]);if(u)return{count:u.count,min:u.min,max:u.max,avg:u.mean,stddev:u.stdDev};throw new a("feature-layer-adapter:invalid","unable to calculate heatmap statistics")}_quantizeFeatures(e,t,a){const r=c(t),{spatialReference:s,size:n}=a,o=h(s)?d(s):null,l=o?Math.round((o.valid[1]-o.valid[0])/r.scale[0]):null;return e.map((e=>{const t=new te(i(e.geometry));return p(r,t,t,t.hasZ,t.hasM),e.geometry=o?this._wrapPoint(t,l,n[0]):t,e}))}_wrapPoint(e,t,a){return e.x<0?e.x+=t:e.x>a&&(e.x-=t),e}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}summaryStatistics(e){const{field:t,normalizationType:r,sqlExpression:i,view:s,features:n,useFeaturesInView:l}=e,u=t?this.getField(t):null,m=w(u),c=e.valueExpression||i,p=c&&!i,h=this._hasLocalSource||n||l,d=s&&"3d"===s.type;if(h||p)return p||n||l||d?this._summaryStatsFromMemory(e,u):this._summaryStatsFromClientQuery(e,m);if(!this.supportsSQLExpression&&(m||c||"natural-log"===r||"square-root"===r))return Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries"));return(r&&!this.supportsSQLExpression?this._summaryStatsFromGenRend(e):this._summaryStatsFromServiceQuery(e,m)).catch((()=>(o(e.signal),this._summaryStatsFromMemory(e,u))))}uniqueValues(e){const{field:t,valueExpression:a,sqlExpression:r,features:i,useFeaturesInView:s,signal:n}=e,l=(t?this.getField(t):null)&&this.getFieldDomain(t),u=a&&(!r||!this.supportsSQLExpression),m=this._hasLocalSource||i||s||u,c=e.view,p=c&&"3d"===c.type;return m?u||i||s||p?this._uvFromMemory(e,l):this._uvFromClientQuery(e,l):this._uvFromServiceQuery(e,l).catch((t=>(o(n),e.field?this._uvFromGenRenderer(e,l):t))).catch((()=>(o(n),p?this._uvFromMemory(e,l):this._uvFromClientQuery(e,l))))}histogram(e){const{field:t,normalizationType:r,normalizationField:i,classificationMethod:s,view:n,signal:o}=e,l=t?this.getField(t):null,u=w(l),m=e.valueExpression||e.sqlExpression,c=m&&!e.sqlExpression,p=this._hasLocalSource||e.features||e.useFeaturesInView||c,h=this.supportsSQLExpression,d=!s||"equal-interval"===s,y=e.minValue,f=e.maxValue,F=null!=y&&null!=f,g=e.numBins||ie;return p?this._histogramFromMemory(e):(m||h)&&d?h||!m&&"natural-log"!==r&&"square-root"!==r?this._histogramForExpr(e):Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries")):u&&d?Promise.reject(new a("feature-layer-adapter:not-supported","Normalization and date field are not allowed when layer does not support standardized SQL expression for queries")):r||!d?this._binParamsFromGenRend(e).then((s=>{if(!F)return this._getBins(s,t,g,n,o);if(y>s.max||f<s.min)throw new a("histogram:insufficient-data","Range defined by 'minValue' and 'maxValue' does not intersect available data range of the field");if(d)return this._getBins({min:y,max:f,sqlExpr:s.sqlExpr,excludeZerosExpr:s.excludeZerosExpr},t,g,n,o);{const a={field:t,normalizationType:r,normalizationField:i,normalizationTotal:s.normTotal,layer:this},l=k(a),u=j(l,y,f);return this._binParamsFromGenRend(e,u).then((e=>this._getBins(e,t,g,n,o)))}})):this._histogramForField(e)}classBreaks(e){const t=!1!==e.analyzeData,a=this._hasLocalSource||e.features||e.useFeaturesInView||e.valueExpression;if(t&&a)return this._classBreaksFromMemory(e);return(t?this._classBreaksFromGenRend(e):this._classBreaksFromInterpolation(e)).catch((()=>(o(e.signal),this._classBreaksFromMemory(e))))}queryFeatureCount(e){if(this._hasLocalSource)return Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support count query"));const t=this.layer,r=t.createQuery();return r.where=M(r.where,e.whereClause),t.queryFeatureCount(r,{signal:e.signal})}generateRenderer(e,t){const r=this.layer;if(this._hasLocalSource||r.version<10.1)return Promise.reject(new a("feature-layer-adapter:not-supported","Layer does not support generateRenderer operation (requires ArcGIS Server version 10.1+)"));const i=new ee({url:r.parsedUrl.path,source:r.dynamicDataSource,gdbVersion:r.gdbVersion}),s=r.createQuery();return e.where=M(e.where,s.where),i.execute(e,{signal:t})}heatmapStatistics(e){const{field:t,fieldOffset:a,view:r,signal:i}=e;return(t&&null==a?this.summaryStatistics({field:t,view:r,signal:i}):Promise.resolve(null)).then((t=>{let r=a||0;if(t){const{count:e,min:a,max:i}=t;e?a===i&&0===a?r=1:i<=0?r="abs":a<0&&(r=-1.01*a):r=1}return this._heatmapStatsFromMemory(e,r).then((e=>({...e,summaryStatistics:t,fieldOffset:r})))}))}async predominantCategories(e){if(!this._hasLocalSource&&!this.supportsSQLExpression)throw new a("feature-layer-adapter:not-supported","Layer does not support advanced SQL expressions and standardized queries");const{fields:t,view:r,signal:i}=e,s=z(t),n=q(t),o=r&&this._hasLocalSource?await this._uvFromMemory({valueExpression:s,view:r,signal:i}):await this._uvFromServiceQuery({sqlExpression:n.expression,valueExpression:s,signal:i});return A(o.uniqueValueInfos,t)}async getSampleFeatures(e,a){const{view:r,sampleSize:i,requiredFields:s,returnGeometry:n,signal:l}=e,u=this.layer.createQuery(),m=1,c="json"===a;u.outSpatialReference=e.spatialReference||r&&r.spatialReference,u.returnGeometry=!!n,u.outFields=s;let p=[],h=!1;if(r)try{const e=await r.whenLayerView(this.layer);if(h=!(await R(this,s,e)).length,h&&(p=await this._fetchFeaturesFromMemory(e,u,l,a),p.length&&i>0&&i<=p.length))return t(p,i,m)}catch(d){o(l)}try{if(this._hasLocalSource)return h?p:c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);const a=await this.queryFeatureCount({view:r,signal:l}),s=this.layer.capabilities.query.maxRecordCount;let n=-1===i?a:i;if(n=s&&n>s?s:n,a<=p.length||p.length>=s)return p;const o=r.extent.width/r.width/r.scale*ne;if(u.maxAllowableOffset=e.resolution||o,a<=n)return c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);if(a<=se){const e=await this.layer.queryObjectIds();return u.objectIds=t(e,n,m),c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}return this.layer.get("capabilities.query.supportsPagination")&&(u.num=Math.min(n,se)),c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}catch(d){return o(l),p}}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.get("capabilities.query.supportsSqlExpression"),this._hasLocalSource=!t.url&&!!t.source,this.hasQueryEngine=this._hasLocalSource,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=C.getInstance(),await this.workerClient.open(i(i(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([u({constructOnly:!0})],oe.prototype,"layer",void 0),oe=e([m("esri.smartMapping.support.adapters.FeatureLayerAdapter")],oe);const le=oe;export{le as default};
