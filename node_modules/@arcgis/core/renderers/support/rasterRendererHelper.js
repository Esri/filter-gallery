/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import e from"../../Color.js";import"../../rasterRenderers.js";import{isSome as t,unwrap as n}from"../../core/maybe.js";import{getMetersPerUnitForSR as r}from"../../core/unitUtils.js";import a from"../../layers/support/Field.js";import l from"../../layers/support/RasterInfo.js";import o from"../FlowRenderer.js";import i from"./AuthoringInfo.js";import s from"./ClassBreakInfo.js";import{PREDEFINED_JSON_COLOR_RAMPS as u,convertColorRampToColormap as m}from"./colorRampUtils.js";import c from"./UniqueValueInfo.js";import f from"../../rest/support/AlgorithmicColorRamp.js";import d from"../../rest/support/ClassBreaksDefinition.js";import{createGenerateRendererClassBreaks as p}from"../../rest/support/generateRendererUtils.js";import b from"../../rest/support/MultipartColorRamp.js";import h from"../RasterStretchRenderer.js";import v from"../UniqueValueRenderer.js";import g from"../RasterColormapRenderer.js";import y from"../RasterShadedReliefRenderer.js";import C from"../ClassBreaksRenderer.js";import w from"../VectorFieldRenderer.js";const x=.25,M=b.fromJSON({type:"multipart",colorRamps:[{fromColor:[0,0,255],toColor:[0,255,255]},{fromColor:[0,255,255],toColor:[255,255,0]},{fromColor:[255,255,0],toColor:[255,0,0]}]}),T=b.fromJSON(u[0]),R=new Set(["scientific","standard-time","vector-uv","vector-magdir","vector-u","vector-v","vector-magnitude","vector-direction"]);function j(e,n){const{attributeTable:r,colormap:a}=e;if(Q(e)){const n=Z(e);if(t(n))return n}if(t(a)){const n=U(e);if(t(n))return n}if(t(r)){const n=q(e);if(t(n))return n}return I(e,n)}function k(e){const t=["raster-stretch"];return W(e)&&t.push("raster-colormap"),z(e)&&t.push("unique-value"),J(e)&&t.push("class-breaks"),A(e)&&t.push("raster-shaded-relief"),Q(e)&&t.push("vector-field"),X(e)&&t.push("flow"),t}function V(e,t,n){const r=["nearest","bilinear","cubic","majority"].find((e=>e===(null==n?void 0:n.toLowerCase())));if("Map"===t)return null!=r?r:"bilinear";if("standard-time"===e.dataType)return null!=r?r:"nearest";return"thematic"===e.dataType||e.attributeTable||e.colormap?"nearest"===r||"majority"===r?r:"nearest":null!=r?r:"bilinear"}function I(e,r){var a,l,o,i;e=S(e,null==r?void 0:r.variableName);const{bandCount:s}=e;let{bandIds:u,stretchType:m}=r||{};null!=(a=u)&&a.some((e=>e>=s))&&(u=null);let c=n(e.statistics),f=n(e.histograms);var d;s>1?(u=null!=(d=u)&&d.length?u:L(e),c=null==c?null:u.map((e=>c[e])),f=null==f?null:u.map((e=>f[e]))):u=[0];null==m&&(m=O(e));let p=!1;switch(m){case"none":p=!1;break;case"percent-clip":p=!(null!=(l=f)&&l.length);break;default:p=!(null!=(o=c)&&o.length)}const{dataType:b}=e,v=1===(null==(i=u)?void 0:i.length)&&R.has(b)?M:null,g=new h({stretchType:m,dynamicRangeAdjustment:p,colorRamp:v,outputMin:0,outputMax:255,gamma:1===u.length?[1]:[1,1,1],useGamma:!1});return"percent-clip"===m?g.maxPercent=g.minPercent=x:"standard-deviation"===m&&(g.numberOfStandardDeviations=2),!p&&(t(e.multidimensionalInfo)||null!=r&&r.includeStatisticsInStretch)&&("percent-clip"===m?g.histograms=f:"min-max"!==m&&"standard-deviation"!==m||(g.statistics=c)),g}function S(e,r){if(null==r)return e;let a=n(e.statistics),o=n(e.histograms);const{multidimensionalInfo:i}=e;if(r&&t(i)){const{statistics:e,histograms:t}=i.variables.find((e=>e.name===r));null!=e&&e.length&&(a=e),null!=t&&t.length&&(o=t)}return l.fromJSON({...e.toJSON(),statistics:a,histograms:o})}function L(e){const t=e.bandCount;if(1===t)return null;if(2===t)return[0];const n=e.keyProperties&&e.keyProperties.BandProperties;let r;if(n&&n.length===t){const{red:e,green:t,blue:a,nir:l}=E(n);null!=e&&null!=t&&null!=a?r=[e,t,a]:null!=l&&null!=e&&null!=t&&(r=[l,e,t])}return!r&&t>=3&&(r=[0,1,2]),r}function B(e,t){var n;const r=e.keyProperties&&e.keyProperties.BandProperties;return(t=null!=(n=t)&&n.length?t:Array.from(Array(e.bandCount).keys())).map((t=>r&&r.length===e.bandCount&&r[t]&&r[t].BandName||"band_"+(t+1)))}function E(e){const t={};for(let r=0;r<e.length;r++){var n;const a=e[r],l=null==(n=a.BandName)?void 0:n.toLowerCase();if("red"===l)t.red=r;else if("green"===l)t.green=r;else if("blue"===l)t.blue=r;else if("nearinfrared"===l||"nearinfrared_1"===l||"nir"===l)t.nir=r;else if(a.WavelengthMax&&a.WavelengthMin){const e=a.WavelengthMin,n=a.WavelengthMax;null==t.blue&&e>=410&&e<=480&&n>=480&&n<=540?t.blue=r:null==t.green&&e>=490&&e<=560&&n>=560&&n<=610?t.green=r:null==t.red&&e>=595&&e<=670&&n>=660&&n<=730?t.red=r:null==t.nir&&e>=700&&e<=860&&n>=800&&n<=950&&(t.nir=r)}}return t}function O(e){let n="percent-clip";const{pixelType:r,dataType:a,histograms:l,statistics:o}=e;return"u8"!==r||"processed"!==a&&t(l)&&t(o)?"u8"===r||"elevation"===a||R.has(a)?n="min-max":t(l)?n="percent-clip":t(o)&&(n="min-max",n="min-max"):n="none",n}function q(n,r,a,l){if(!z(n,r))return null;const{attributeTable:o,statistics:s}=n,u=F(o,r),f=P(o,"red"),d=P(o,"green"),p=P(o,"blue"),b=new i,h=[],g=new Set,y=!!(f&&d&&p);if(t(o))o.features.forEach((t=>{const n=t.attributes[u.name];if(!g.has(t.attributes[u.name])&&null!=n){g.add(n);const r=y&&("single"===f.type||"double"===f.type)&&("single"===d.type||"double"===d.type)&&("single"===p.type||"double"===p.type)&&!o.features.some((e=>e.attributes[f.name]>1||e.attributes[d.name]>1||e.attributes[p.name]>1)),a=r?255:1;h.push(new c({value:t.attributes[u.name],label:t.attributes[u.name]+"",symbol:{type:"simple-fill",style:"solid",outline:null,color:new e(y?[t.attributes[f.name]*a,t.attributes[d.name]*a,t.attributes[p.name]*a,1]:[0,0,0,0])}}))}}));else if(null!=s&&s[0])for(let t=s[0].min;t<=s[0].max;t++)h.push(new c({value:t,label:t.toString(),symbol:{type:"simple-fill",style:"solid",outline:null,color:new e([0,0,0,0])}}));if(h.sort(((e,t)=>e.value&&"string"==typeof e.value.valueOf()?0:e.value>t.value?1:-1)),!y){const t=m(T,h.length);h.forEach(((n,r)=>n.symbol.color=new e(t[r].slice(1,4)))),b.colorRamp=T}if(a||l){const t=a||m(l,h.length).map((e=>e.slice(1)));h.forEach(((n,r)=>n.symbol.color=new e(t[r]))),b.colorRamp=l}return new v({field:u.name,uniqueValueInfos:h,authoringInfo:b})}function F(e,n,r){let l;return t(e)?(l=n?e.fields.find((e=>n.toLowerCase()===e.name.toLowerCase())):N(e.fields),l||(r||(l=e.fields.find((e=>"string"===e.type))),l||(l=P(e,"value")))):l=new a({name:"value"}),l}function N(e){let t;for(let n=0;n<e.length;n++){const r=e[n].name.toLowerCase();if("string"===e[n].type){if(r.startsWith("class")){t=e[n];break}null==t&&(r.endsWith("name")||r.endsWith("type"))&&(t=e[n])}}return t}function P(e,n){return t(e)?e.fields.find((e=>e.name.toLowerCase()===n)):null}function z(e,n){const{attributeTable:r,bandCount:a}=e;if(!t(r)&&H(e))return!0;if(!t(r)||a>1)return!1;if(n){if(null==r.fields.find((e=>e.name.toLowerCase()===n.toLowerCase())))return!1}return!0}function W(e){const{bandCount:n,colormap:r}=e;return t(r)&&r.length&&1===n}function U(e){if(!W(e))return null;let r;const{attributeTable:a,colormap:l}=e;if(t(a)){const e=P(a,"value"),t=F(a,null,!0);"string"===t.type&&(r={},a.features.forEach((n=>{const a=n.attributes;r[a[e.name]]=t?a[t.name]:a[e.name]})))}return g.createFromColormap(n(l),r)}function A(e){return"elevation"===e.dataType}function D(e,t){var n;if(!A(e))return null;const{extent:a}=e,l=a.width*r(a.spatialReference);return t=null!=(n=t)?n:"multi-directional",new y({hillshadeType:t,scalingType:l>5e6?"adjusted":"none"})}function J(e){const{attributeTable:n,bandCount:r}=e;return 1===r&&(t(n)||t(e.histograms))}function _(e,n){e=S(e,null==n?void 0:n.variableName);const{attributeTable:r}=e;if(!J(e))return null;const a=t(e.histograms)?e.histograms[0]:null,l=isFinite(null==n?void 0:n.numClasses)?n.numClasses:5,o=new i({classificationMethod:null==n?void 0:n.classificationMethod,colorRamp:null==n?void 0:n.colorRamp});let u=(null==n?void 0:n.field)||"value";const c=[],f=[],b=1e3,h=t(r),v=h&&r.fields.find((e=>"count"===e.name.toLowerCase())),g=h&&r.fields.find((e=>e.name.toLowerCase()===u.toLowerCase()));if(g){u=g.name;const e=r.features.length;let t=0;r.features.forEach((n=>t+=(v?n.attributes[v.name]:50)/e)),r.features.forEach((n=>{const r=n.attributes[g.name],a=v?n.attributes[v.name]:50;if(a>0){f.push(a);const n=Math.max(1,Math.round(a/e/t*b));for(let e=0;e<n;e++)c.push(r)}}))}else{const{pixelType:t}=e,n=(a.max-a.min)/a.size,l=t.indexOf("s")>-1||t.indexOf("u")>-1,o=l&&1===n?Math.floor(a.min+.5):a.min,i=l&&1===n?Math.floor(a.max-.5):a.max,s=a.size;let u,m=0;a.counts.forEach((e=>m+=e/s)),a.counts.forEach(((e,t)=>{if(e>0){f.push(e);const l=Math.max(1,Math.round(e/s/m*b));u=h?r.features[t].attributes[g.name]:0===t?o:t===s-1?i:a.min+n*(t+.5);for(let e=0;e<l;e++)c.push(u)}}))}const y=(null==n?void 0:n.classificationMethod)||"natural-breaks";let w=null==n?void 0:n.definedInterval;"defined-interval"!==y||w||(w=G(e,g,l));const x=p({values:c,valueFrequency:f,normalizationTotal:null,definition:new d({classificationMethod:y,breakCount:l,definedInterval:w})});let T=null==n?void 0:n.colors;if(!T){const e=(null==n?void 0:n.colorRamp)||M;o.colorRamp=e;const t=m(e,x.classBreaks.length,!0);T=t.map((e=>e.slice(1)))}const R=x.classBreaks.map(((e,t)=>new s({minValue:e.minValue,maxValue:e.maxValue,label:e.label,symbol:{type:"simple-fill",color:T[t]}})));return new C({field:u,classBreakInfos:R,authoringInfo:o})}function G(e,n,r){let a=0,l=0;if(t(e.attributeTable)){const t=e.attributeTable;a=l=t.features[0].attributes[n.name],t.features.forEach((e=>{const t=e.attributes[n.name];t<a&&(a=t),t>l&&(l=t)}))}else if(t(e.histograms)){const t=e.histograms;a=t[0].min,l=t[0].max}return(l-a)/r}function H(e){var t,n,r;return["u8","s8"].indexOf(e.pixelType)>-1&&null!=(null==(t=e.statistics)||null==(n=t[0])?void 0:n.min)&&null!=(null==(r=e.statistics[0])?void 0:r.max)&&1===e.bandCount}function K(t){const n=[];for(let r=0;r<t.length-1;r++)n[r]=new f({algorithm:"hsv",fromColor:t[r],toColor:t[r+1]||new e({r:255,g:255,b:255,a:1})});if(t.length>2){return new b({colorRamps:n})}return n[0]}function Q(e){const{dataType:t}=e;return"vector-uv"===t||"vector-magdir"===t}function X(e){const{dataType:t}=e;return"vector-uv"===t||"vector-magdir"===t}const Y=new Map([["m/s","meter-per-second"],["km/h","kilometer-per-hour"],["knots","knots"],["ft/s","feet-per-second"],["mph","mile-per-hour"]]);function Z(e){if(!Q(e))return null;let n;if(t(e.statistics)&&e.statistics.length&&("vector-magdir"===e.dataType||"vector-uv"===e.dataType)){const{minMagnitude:t,maxMagnitude:r}=ne(e.dataType,e.statistics);n=[{type:"size",field:"Magnitude",minSize:10,maxSize:40,minDataValue:t,maxDataValue:r}]}const r=t(e.multidimensionalInfo)?Y.get(e.multidimensionalInfo.variables[0].unit):null,a=new w({visualVariables:n,inputUnit:r,rotationType:"geographic"});return a.visualVariables=[...a.sizeVariables,...a.rotationVariables],a}function $(e){var t;return{color:null==(t=e.symbolLayers[0].material)?void 0:t.color,type:"esriSFS",style:"esriSFSSolid"}}function ee(e){if("uniqueValue"===e.type){var t;const n=e.uniqueValueInfos,r=n[0].symbol;return null!=r&&null!=(t=r.symbolLayers)&&t.length&&(e.uniqueValueInfos=n.map((e=>({value:e.value,label:e.label,symbol:e.symbol?$(e.symbol):null})))),e}if("classBreaks"===e.type){var n;const t=e.classBreakInfos,r=t[0].symbol;return null!=r&&null!=(n=r.symbolLayers)&&n.length&&(e.classBreakInfos=t.map((e=>({classMinValue:e.classMinValue,classMaxValue:e.classMaxValue,label:e.label,symbol:e.symbol?$(e.symbol):null})))),e}return e}function te(e){if(!X(e))return null;let n;if(t(e.statistics)&&e.statistics.length>0&&("vector-magdir"===e.dataType||"vector-uv"===e.dataType)){const{minMagnitude:t,maxMagnitude:r}=ne(e.dataType,e.statistics);n=[{type:"color",field:"Magnitude",stops:[{value:t,color:"#1020C0"},{value:r,color:"#C02010"}]}]}return new o({visualVariables:n})}function ne(e,t){let n,r;if("vector-magdir"===e)n=t[0].min,r=t[0].max;else{const e=t[0].min,a=t[0].max,l=t[1].min,o=t[1].max;n=0,r=Math.max(Math.abs(e),Math.abs(l),Math.abs(a),Math.abs(o))}return{minMagnitude:n,maxMagnitude:r}}export{_ as createClassBreaksRenderer,K as createColorRamp,U as createColormapRenderer,j as createDefaultRenderer,te as createFlowRenderer,D as createShadedReliefRenderer,I as createStretchRenderer,q as createUVRenderer,Z as createVectorFieldRenderer,ne as estimateMagnitudeRange,B as getBandNames,F as getClassField,L as getDefaultBandCombination,V as getDefaultInterpolation,G as getDefinedInterval,P as getField,k as getSupportedRendererTypes,E as getWellKnownBandIndexes,J as isClassBreaksSupported,W as isColormapRendererSupported,X as isFlowRendererSupported,A as isShadedReliefRendererSupported,H as isSingleBand8BitRasterWithStats,z as isUVRendererSupported,Q as isVectorFieldRendererSupported,ee as normalizeRendererJSON};
