/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import t from"./ImmutableArray.js";import{i as s,j as i,f as r,u as e,w as n,x as o,y as a,t as u,z as c,d as l,o as f,A as h,a as b}from"../chunks/languageUtils.js";import{all as m,resolve as y}from"../core/promiseUtils.js";import d from"../geometry/Geometry.js";function w(t,e=!1){if(null==t)return null;if(i(t))return u(t);if(s(t))return c(t);if(r(t))return l(t);if(f(t))return h(t);if(b(t)){const s=[];for(const i of t)s.push(w(i,e));return s}const n=new g;n.immutable=!1;for(const s of Object.keys(t)){const i=t[s];void 0!==i&&n.setField(s,w(i,e))}return n.immutable=e,n}class g{constructor(t){this.declaredClass="esri.arcade.Dictionary",this.attributes=null,this.plain=!1,this.immutable=!0,this.attributes=t instanceof g?t.attributes:null==t?{}:t}field(t){const s=t.toLowerCase(),i=this.attributes[t];if(void 0!==i)return i;for(const r in this.attributes)if(r.toLowerCase()===s)return this.attributes[r];throw new Error("Field not Found : "+t)}setField(t,s){if(this.immutable)throw new Error("Dictionary is Immutable");const i=t.toLowerCase();if(void 0===this.attributes[t]){for(const t in this.attributes)if(t.toLowerCase()===i)return void(this.attributes[t]=s);this.attributes[t]=s}else this.attributes[t]=s}hasField(t){const s=t.toLowerCase();if(void 0!==this.attributes[t])return!0;for(const i in this.attributes)if(i.toLowerCase()===s)return!0;return!1}keys(){let t=[];for(const s in this.attributes)t.push(s);return t=t.sort(),t}castToText(){let n="";for(const o in this.attributes){""!==n&&(n+=",");const a=this.attributes[o];null==a?n+=JSON.stringify(o)+":null":s(a)||i(a)||r(a)?n+=JSON.stringify(o)+":"+JSON.stringify(a):a instanceof d||a instanceof t||a instanceof Array?n+=JSON.stringify(o)+":"+e(a):a instanceof Date?n+=JSON.stringify(o)+":"+JSON.stringify(a):null!==a&&"object"==typeof a&&void 0!==a.castToText&&(n+=JSON.stringify(o)+":"+a.castToText())}return"{"+n+"}"}static convertObjectToArcadeDictionary(t,s=!0){const i=new g;i.immutable=!1;for(const r in t){const s=t[r];void 0!==s&&i.setField(r.toString(),w(s))}return i.immutable=s,i}static convertJsonToArcade(t,s=!1){return w(t,s)}castAsJson(t=null){const s={};for(let i in this.attributes){const r=this.attributes[i];void 0!==r&&(null!=t&&t.keyTranslate&&(i=t.keyTranslate(i)),s[i]=n(r,t))}return s}castDictionaryValueAsJsonAsync(t,s,i,r=null,e){return o(i,r,e).then((i=>(t[s]=i,i)))}castAsJsonAsync(t=null,s=null){const i={},r=[];for(let e in this.attributes){const o=this.attributes[e];null!=s&&s.keyTranslate&&(e=s.keyTranslate(e)),void 0!==o&&(a(o)||o instanceof d||o instanceof Date?i[e]=n(o,s):r.push(this.castDictionaryValueAsJsonAsync(i,e,o,t,s)))}return r.length>0?m(r).then((()=>i)):y(i)}}export{g as default};
