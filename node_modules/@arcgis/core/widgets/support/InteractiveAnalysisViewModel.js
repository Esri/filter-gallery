/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as s}from"../../chunks/tslib.es6.js";import e from"../../core/Handles.js";import{isSome as i,destroyMaybe as t,abortMaybe as n,isNone as a,applySome as o}from"../../core/maybe.js";import{createTask as r,throwIfAborted as l,isAbortError as c,isAborted as h}from"../../core/promiseUtils.js";import{watch as y,syncAndInitial as w,whenOnce as p}from"../../core/reactiveUtils.js";import{property as d}from"../../core/accessorSupport/decorators/property.js";import"../../core/arrayUtils.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{subclass as _}from"../../core/accessorSupport/decorators/subclass.js";import{InteractiveToolViewModel as m}from"./InteractiveToolViewModel.js";let V=class extends m{constructor(s={}){super(s),this.analysisView=null,this._reconnectViewTask=null,this._analysisBaseHandles=new e,this._parentChangeFromReconnect=!1;const t=null==s?void 0:s.analysis;i(t)?this.analysis=t:(this._set("analysis",this.constructAnalysis()),this._set("isAnalysisOwner",!0))}normalizeCtorArgs(s){const{analysis:e,...i}=s;return i}initialize(){this._analysisBaseHandles.add([y((()=>({analysis:this.analysis,parent:o(this.analysis,(({parent:s})=>s))})),(({parent:s})=>{this._parentChangeFromReconnect||s===this.view||this._set("isAnalysisOwner",!1);const e=!this._parentChangeFromReconnect;this._parentChangeFromReconnect=!1,e&&this._scheduleViewReconnect()})),y((()=>({view:this.view,ready:i(this.view)&&this.view.ready,supported:this.supported})),(({view:s},{view:e})=>{s!==e&&this._disconnectFromView(e),this._scheduleViewReconnect()}),w),y((()=>this.analysis.isEditable),((s,e)=>{a(this.analysisView)||(s&&!e&&a(this.tool)?this.createTool():!s&&e&&i(this.tool)&&!this.tool.active&&this.removeTool())}))]),this.analysis.visible=this.visible}destroy(){this._analysisBaseHandles=t(this._analysisBaseHandles),this._reconnectViewTask=n(this._reconnectViewTask),this._disconnectFromView(this.view),i(this.analysis)&&(this.isAnalysisOwner?(this.analysis.destroy(),this._set("analysis",null)):this.analysis.visible=!0)}set analysis(s){s!==this._get("analysis")&&(this._disconnectFromView(this.view),this._setExternalAnalysis(s),this._scheduleViewReconnect())}get ready(){return i(this.analysisView)&&!this.connectingToView}get connectingToView(){return i(this._reconnectViewTask)}get isAnalysisOwner(){return this._get("isAnalysisOwner")}async start(){this.clear(),this.ready||await p((()=>this.ready)),this.createTool({interactive:!0})}onConnectToAnalysisView(s){}onDisconnectFromAnalysisView(){}_scheduleViewReconnect(){this._reconnectViewTask=n(this._reconnectViewTask);const s=r((async e=>{try{await this._reconnectView(e)}catch(i){if(l(e),!c(i))return void this.logger.warn("Failed to use analysis in view model",i);throw i}finally{s===this._reconnectViewTask&&(this._reconnectViewTask=null)}}));this._reconnectViewTask=s}async _reconnectView(s){const{view:e}=this,t=i(e)&&e.ready&&this.supported,n=this.analysis;if(this._disconnectFromView(e),t&&!a(e)&&!a(n)){if(this.isAnalysisOwner){if(i(n.parent))return void this.logError("expected owned analysis to have null parent when connecting to view");this._parentChangeFromReconnect=!0,e.analyses.add(n)}this.analysisView=await e.whenAnalysisView(n),h(s)?this._disconnectFromView(e):(this.onConnectToAnalysisView(this.analysisView),!this.analysis.visible&&this.isAnalysisOwner||this.createTool())}}_disconnectFromView(s){i(s)&&this.isAnalysisOwner&&(this._parentChangeFromReconnect=!0,s.analyses.remove(this.analysis)),this.analysisView=null,this.onDisconnectFromAnalysisView(),this.removeTool()}_setExternalAnalysis(s){if(i(this.analysis)&&!this.isAnalysisOwner&&(this.analysis.visible=!0),this._set("analysis",s),this._set("isAnalysisOwner",!1),this._parentChangeFromReconnect=!1,!s.isEditable){const e=s.nonEditableMessage;this.logger.warn(`The assigned ${s.type} analysis object will not be editable in the view. ${e}`)}}};s([d({nonNullable:!0})],V.prototype,"analysis",null),s([d()],V.prototype,"analysisView",void 0),s([d()],V.prototype,"ready",null),s([d()],V.prototype,"connectingToView",null),s([d({readOnly:!0})],V.prototype,"isAnalysisOwner",null),s([d()],V.prototype,"_reconnectViewTask",void 0),V=s([_("esri.widgets.support.InteractiveAnalysisViewModel")],V);export{V as InteractiveAnalysisViewModel};
