/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{OriginId as t}from"./PropertyOrigin.js";import{trackAccess as s,runTracked as e,trackExplicitDependencies as i,runUntracked as r}from"./tracking.js";import{Flags as n}from"./tracking/Flags.js";import{ObservationHandle as l}from"./tracking/ObservationHandle.js";class o{constructor(t,s,e){this.properties=t,this.propertyName=s,this.metadata=e,this._observers=null,this._accessed=null,this._handles=null,this.flags=n.Dirty|(e.nonNullable?n.NonNullable:0)|(e.hasOwnProperty("value")?n.HasDefaultValue:0)|(void 0===e.get?n.DepTrackingInitialized:0)|(void 0===e.dependsOn?n.AutoTracked:0)}destroy(){this._accessed=null,this._observers=null,this._clearObservationHandles()}getComputed(){s(this);const l=this.properties.store,o=this.propertyName,a=this.flags,h=l.get(o);if(a&n.Computing)return h;if(~a&n.Dirty&&l.has(o))return h;this.flags|=n.Computing;const d=this.properties.host;let c;a&n.AutoTracked?c=e(this,this.metadata.get,d):(i(d,this),c=this.metadata.get.call(d)),l.set(o,c,t.COMPUTED);const u=l.get(o);return u===h?this.flags&=~n.Dirty:r(this.commit,this),this.flags&=~n.Computing,u}onObservableAccessed(t){t!==this&&(null===this._accessed&&(this._accessed=[]),this._accessed.includes(t)||this._accessed.push(t))}onTrackingEnd(){this._clearObservationHandles(),this.flags|=n.DepTrackingInitialized;const t=this._accessed;if(null===t)return;let s=this._handles;null===s&&(s=this._handles=[]);for(let e=0;e<t.length;++e)s.push(t[e].observe(this));t.length=0}observe(t){return null===this._observers&&(this._observers=[]),this._observers.includes(t)||this._observers.push(t),new l(this._observers,t)}notifyChange(){this.onInvalidated(),this.onCommitted()}invalidate(){this.onInvalidated()}onInvalidated(){~this.flags&n.Overriden&&(this.flags|=n.Dirty);const t=this._observers;if(null!==t)for(let s=0;s<t.length;++s)t[s].onInvalidated()}commit(){this.flags&=~n.Dirty,this.onCommitted()}onCommitted(){if(null===this._observers)return;const t=this._observers.slice();for(let s=0;s<t.length;++s)t[s].onCommitted()}_clearObservationHandles(){const t=this._handles;if(null!==t){for(let s=0;s<t.length;++s)t[s].remove();t.length=0}}}export{o as Property};
