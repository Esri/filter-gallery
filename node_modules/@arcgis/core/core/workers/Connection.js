/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{handlesGroup as e}from"../handleUtils.js";import t from"../Logger.js";import{isPromiseLike as s,throwIfAborted as i}from"../promiseUtils.js";import n from"./RemoteClient.js";const r=t.getLogger("esri.core.workers.Connection");class l{constructor(){this._clients=new Array,this._clientPromises=new Array,this._clientIdx=0}destroy(){this.close()}get closed(){return!this._clients||!this._clients.length}open(e,t){return new Promise(((r,l)=>{let o=!0;const h=e=>{i(t.signal),o&&(o=!1,e())};this._clients.length=e.length,this._clientPromises.length=e.length;for(let i=0;i<e.length;++i){const o=e[i];s(o)?this._clientPromises[i]=o.then((e=>(this._clients[i]=new n(e,t),h(r),this._clients[i])),(()=>(h(l),null))):(this._clients[i]=new n(o,t),this._clientPromises[i]=Promise.resolve(this._clients[i]),h(r))}}))}broadcast(e,t,s){const i=new Array(this._clientPromises.length);for(let n=0;n<this._clientPromises.length;++n){const r=this._clientPromises[n];i[n]=r.then((i=>i.invoke(e,t,s)))}return i}close(){for(const e of this._clientPromises)e.then((e=>e.close()));this._clients.length=0,this._clientPromises.length=0}getAvailableClient(){let e;for(let t=0;t<this._clients.length;++t){const s=this._clients[t];if(s){if(!s.isBusy())return Promise.resolve(s)}else e=e||[],e.push(this._clientPromises[t])}return e?Promise.race(e):(this._clientIdx=(this._clientIdx+1)%this._clients.length,Promise.resolve(this._clients[this._clientIdx]))}invoke(e,t,s){let i=null;if(Array.isArray(s)?(r.warn("invoke()","The transferList parameter is deprecated, use the options object instead"),i={transferList:s}):i=s,this.closed)return Promise.reject(new Error("Connection closed"));return this.getAvailableClient().then((s=>s.invoke(e,t,i)))}on(t,s){return Promise.all(this._clientPromises).then((()=>e(this._clients.map((e=>e.on(t,s))))))}openPorts(){return new Promise((e=>{const t=new Array(this._clientPromises.length);let s=t.length;for(let i=0;i<this._clientPromises.length;++i){this._clientPromises[i].then((n=>{t[i]=n.openPort(),0==--s&&e(t)}))}}))}get test(){return{numClients:this._clients.length}}}export{l as default};
