/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../core/Error.js";import r from"../core/has.js";import{isSome as o,isNone as s}from"../core/maybe.js";import{whenOrAbort as i}from"../core/promiseUtils.js";import{property as u}from"../core/accessorSupport/decorators/property.js";import"../core/arrayUtils.js";import"../core/accessorSupport/ensureType.js";import{subclass as n}from"../core/accessorSupport/decorators/subclass.js";import{DataLayerSource as a}from"../layers/support/source/DataLayerSource.js";import{executeAttachmentQuery as c}from"../rest/query/executeAttachmentQuery.js";import{executeForCount as p}from"../rest/query/executeForCount.js";import{executeForExtent as m}from"../rest/query/executeForExtent.js";import{executeForIds as f}from"../rest/query/executeForIds.js";import{executeRawQueryJSON as l}from"../rest/query/executeQueryJSON.js";import{executeRawQueryPBF as h}from"../rest/query/executeQueryPBF.js";import{executeRelationshipQuery as d,executeRelationshipQueryForCount as y}from"../rest/query/executeRelationshipQuery.js";import{executeTopFeaturesQuery as F}from"../rest/query/executeTopFeaturesQuery.js";import{executeForTopIds as S}from"../rest/query/executeForTopIds.js";import{executeForTopExtents as j}from"../rest/query/executeForTopExtents.js";import{executeForTopCount as D}from"../rest/query/executeForTopCount.js";import x from"../rest/support/FeatureSet.js";import O from"../rest/support/Query.js";import b from"../rest/support/RelationshipQuery.js";import q from"./Task.js";let g=class extends q{constructor(e){super(e),this.dynamicDataSource=null,this.fieldsIndex=null,this.format="json",this.gdbVersion=null,this.infoFor3D=null,this.sourceSpatialReference=null}execute(e,t){return this.executeJSON(e,t).then((r=>this.featureSetFromJSON(e,r,t)))}async executeJSON(e,t){var o;const s={...this.requestOptions,...t},i=this._normalizeQuery(e),u=null!=(null==(o=e.outStatistics)?void 0:o[0]),n=r("featurelayer-pbf-statistics"),a=!u||n;let c;if("pbf"===this.format&&a)try{c=await h(this.url,i,s)}catch(p){if("query:parsing-pbf"!==p.name)throw p;this.format="json"}return"json"!==this.format&&a||(c=await l(this.url,i,s)),this._normalizeFields(c.fields),c}async featureSetFromJSON(e,t,r){if(!(this._queryIs3DObjectFormat(e)&&o(this.infoFor3D)&&t.features&&t.features.length))return x.fromJSON(t);const{meshFeatureSetFromJSON:s}=await i(import("../rest/support/meshFeatureSet.js"),r);return s(e,this.infoFor3D,t)}executeForCount(e,t){const r={...this.requestOptions,...t},o=this._normalizeQuery(e);return p(this.url,o,r)}executeForExtent(e,t){const r={...this.requestOptions,...t},o=this._normalizeQuery(e);return m(this.url,o,r)}executeForIds(e,t){const r={...this.requestOptions,...t},o=this._normalizeQuery(e);return f(this.url,o,r)}executeRelationshipQuery(e,t){e=b.from(e);const r={...this.requestOptions,...t};return(this.gdbVersion||this.dynamicDataSource)&&((e=e.clone()).gdbVersion=e.gdbVersion||this.gdbVersion,e.dynamicDataSource=e.dynamicDataSource||this.dynamicDataSource),d(this.url,e,r)}executeRelationshipQueryForCount(e,t){e=b.from(e);const r={...this.requestOptions,...t};return(this.gdbVersion||this.dynamicDataSource)&&((e=e.clone()).gdbVersion=e.gdbVersion||this.gdbVersion,e.dynamicDataSource=e.dynamicDataSource||this.dynamicDataSource),y(this.url,e,r)}executeAttachmentQuery(e,t){const r={...this.requestOptions,...t};return c(this.url,e,r)}executeTopFeaturesQuery(e,t){const r={...this.requestOptions,...t};return F(this.parsedUrl,e,this.sourceSpatialReference,r)}executeForTopIds(e,t){const r={...this.requestOptions,...t};return S(this.parsedUrl,e,r)}executeForTopExtents(e,t){const r={...this.requestOptions,...t};return j(this.parsedUrl,e,r)}executeForTopCount(e,t){const r={...this.requestOptions,...t};return D(this.parsedUrl,e,r)}_normalizeQuery(e){let r=O.from(e);if(r.sourceSpatialReference=r.sourceSpatialReference||this.sourceSpatialReference,(this.gdbVersion||this.dynamicDataSource)&&(r=r===e?r.clone():r,r.gdbVersion=e.gdbVersion||this.gdbVersion,r.dynamicDataSource=e.dynamicDataSource?a.from(e.dynamicDataSource):this.dynamicDataSource),o(this.infoFor3D)&&this._queryIs3DObjectFormat(e)){r=r===e?r.clone():r,r.formatOf3DObjects=null;for(const e of this.infoFor3D.queryFormats){if("3D_glb"===e.id){r.formatOf3DObjects=e.id;break}"3D_gltf"!==e.id||r.formatOf3DObjects||(r.formatOf3DObjects=e.id)}if(!r.formatOf3DObjects)throw new t("query:unsupported-3d-query-formats","Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");if(s(r.outFields)||!r.outFields.includes("*")){r=r===e?r.clone():r,s(r.outFields)&&(r.outFields=[]);const{originX:t,originY:o,originZ:i,translationX:u,translationY:n,translationZ:a,scaleX:c,scaleY:p,scaleZ:m,rotationX:f,rotationY:l,rotationZ:h,rotationDeg:d}=this.infoFor3D.transformFieldRoles;r.outFields.push(t,o,i,u,n,a,c,p,m,f,l,h,d)}}return r}_normalizeFields(e){if(o(this.fieldsIndex)&&o(e))for(const t of e){const e=this.fieldsIndex.get(t.name);e&&Object.assign(t,e.toJSON())}}_queryIs3DObjectFormat(e){return o(this.infoFor3D)&&e.returnGeometry&&"xyFootprint"!==e.multipatchOption&&!e.outStatistics}};e([u({type:a})],g.prototype,"dynamicDataSource",void 0),e([u()],g.prototype,"fieldsIndex",void 0),e([u()],g.prototype,"format",void 0),e([u()],g.prototype,"gdbVersion",void 0),e([u()],g.prototype,"infoFor3D",void 0),e([u()],g.prototype,"sourceSpatialReference",void 0),g=e([n("esri.tasks.QueryTask")],g);const Q=g;export{Q as default};
