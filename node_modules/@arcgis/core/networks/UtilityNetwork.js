/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import r from"../request.js";import{property as t}from"../core/accessorSupport/decorators/property.js";import"../core/arrayUtils.js";import"../core/has.js";import"../core/accessorSupport/ensureType.js";import{subclass as o}from"../core/accessorSupport/decorators/subclass.js";import a from"./Network.js";import n from"./support/NamedTraceConfiguration.js";import s from"./support/TerminalConfiguration.js";let i=class extends a{constructor(e){super(e),this.sharedNamedTraceConfigurations=[],this.type="utility"}get serviceTerritoryFeatureLayerId(){var e;return null==(e=this.dataElement)?void 0:e.serviceTerritoryFeatureLayerId}get rulesTableId(){var e;return null==(e=this.sourceJSON)?void 0:e.systemLayers.rulesTableId}get rulesTableUrl(){return this.sourceJSON?`${this.featureServiceUrl}/${this.rulesTableId}`:null}get subnetworksTableId(){var e;return null==(e=this.sourceJSON)?void 0:e.systemLayers.subnetworksTableId}get subnetworksTableUrl(){return this.sourceJSON?`${this.featureServiceUrl}/${this.subnetworksTableId}`:null}get terminalConfigurations(){var e;return(null==(e=this.dataElement)?void 0:e.terminalConfigurations.map((e=>s.fromJSON(e))))||[]}get domainNetworkNames(){var e;return(null==(e=this.dataElement)?void 0:e.domainNetworks.map((e=>e.domainNetworkName)))||[]}async load(e){return this.addResolvingPromise(super.load(e)),this.addResolvingPromise(this._loadNamedTraceConfigurationsFromNetwork(e)),this}getTerminalConfiguration(e){let r=null,t=null;const o=e.layer;let a=null;if("feature"!==(null==o?void 0:o.type))return null;if(a=o.layerId,null===a)return null;const n=e.attributes;if(null==n)return null;for(const s of Object.keys(n))"ASSETGROUP"===s.toUpperCase()&&(r=e.getAttribute(s)),"ASSETTYPE"===s.toUpperCase()&&(t=e.getAttribute(s));if(!this.dataElement)return null;let i=null;const l=this.dataElement.domainNetworks;for(const s of l){var u;const e=null==(u=s.junctionSources)?void 0:u.find((e=>e.layerId===a));if(e){var d;const o=null==(d=e.assetGroups)?void 0:d.find((e=>e.assetGroupCode===r));if(o){var c;const e=null==(c=o.assetTypes)?void 0:c.find((e=>e.assetTypeCode===t));if(e){i=e.terminalConfigurationId;break}}}}if(null!=i){const e=this.dataElement.terminalConfigurations,r=null==e?void 0:e.find((e=>e.terminalConfigurationId===i));return r?s.fromJSON(r):null}return null}getTierNames(e){var r;const t=null==(r=this.dataElement)?void 0:r.domainNetworks.find((r=>r.domainNetworkName===e));return(null==t?void 0:t.tiers.map((e=>e.name)))||[]}async _loadNamedTraceConfigurationsFromNetwork(e){var r;if(0===(null==(r=this.sharedNamedTraceConfigurations)?void 0:r.length))return;const t=this.sharedNamedTraceConfigurations.map((e=>e.globalId)),o=await this._fetchTraceConfigData(this.networkServiceUrl,t,e);for(const a of this.sharedNamedTraceConfigurations){const e=null==o?void 0:o.find((e=>e.globalId===a.globalId));e&&a.read(e,{origin:"service"})}}_fetchTraceConfigData(e,t,o){return r(`${e}/traceConfigurations/query`,{responseType:"json",query:{globalIds:JSON.stringify(t),f:"json"},...o}).then((e=>e.data.traceConfigurations))}};e([t({type:[n],json:{origins:{"web-map":{read:{source:"traceConfigurations"},write:{target:"traceConfigurations"}},service:{read:{source:"traceConfigurations"}}},read:!1}})],i.prototype,"sharedNamedTraceConfigurations",void 0),e([t({type:["utility"],readOnly:!0,json:{read:!1,write:!1}})],i.prototype,"type",void 0),e([t({readOnly:!0})],i.prototype,"serviceTerritoryFeatureLayerId",null),e([t({readOnly:!0})],i.prototype,"rulesTableId",null),e([t({readOnly:!0})],i.prototype,"rulesTableUrl",null),e([t({readOnly:!0})],i.prototype,"subnetworksTableId",null),e([t({readOnly:!0})],i.prototype,"subnetworksTableUrl",null),e([t({readOnly:!0})],i.prototype,"terminalConfigurations",null),e([t({readOnly:!0})],i.prototype,"domainNetworkNames",null),i=e([o("esri.networks.UtilityNetwork")],i);const l=i;export{l as default};
