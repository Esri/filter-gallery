/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
import e from"../request.js";import r from"../core/Error.js";import{isSome as t}from"../core/maybe.js";import{getDeepValue as o}from"../core/object.js";import{removeTrailingSlash as s}from"../core/urlUtils.js";import{asValidOptions as a,parseUrl as l}from"./utils.js";import n from"./support/NetworkServiceDescription.js";function i(e,r,t,o){o[t]=[r.length,r.length+e.length],e.forEach((e=>{r.push(e.geometry)}))}function d(e,r){for(let t=0;t<r.length;t++){const o=e[r[t]];if(o&&o.length)for(const e of o)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function u(e,r){for(let o=0;o<r.length;o++){const s=e[r[o]];if(s&&s.length)for(const e of s)if(t(e)&&e.hasZ)return!0}return!1}async function f(t,o,s){if(!t)throw new r("network-service:missing-url","Url to Network service is missing");const l=a({f:"json",token:o},s),{data:i}=await e(t,l);i.supportedTravelModes||(i.supportedTravelModes=[]);for(let e=0;e<i.supportedTravelModes.length;e++)i.supportedTravelModes[e].id||(i.supportedTravelModes[e].id=i.supportedTravelModes[e].itemId);const d=i.currentVersion>=10.4?c(t,o,s):p(t,s),{defaultTravelMode:u,supportedTravelModes:f}=await d;return i.defaultTravelMode=u,i.supportedTravelModes=f,n.fromJSON(i)}async function p(r,t){var n,i;const d=a({f:"json"},t),{data:u}=await e(r.replace(/\/rest\/.*$/i,"/info"),d);if(!u||!u.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};const{owningSystemUrl:f}=u,p=s(f)+"/sharing/rest/portals/self",{data:c}=await e(p,d),v=o("helperServices.routingUtilities.url",c);if(!v)return{supportedTravelModes:[],defaultTravelMode:null};const m=l(f),T=/\/solve$/i.test(m.path)?"Route":/\/solveclosestfacility$/i.test(m.path)?"ClosestFacility":"ServiceAreas",M=a({f:"json",serviceName:T},t),h=s(v)+"/GetTravelModes/execute",w=await e(h,M),g=[];let y=null;if(null!=w&&null!=(n=w.data)&&null!=(i=n.results)&&i.length){const e=w.data.results;for(const r of e){var j;if("supportedTravelModes"===r.paramName){if(null!=(j=r.value)&&j.features)for(const{attributes:e}of r.value.features)if(e){const r=JSON.parse(e.TravelMode);g.push(r)}}else"defaultTravelMode"===r.paramName&&(y=r.value)}}return{supportedTravelModes:g,defaultTravelMode:y}}async function c(t,o,l){try{const r=a({f:"json",token:o},l),n=s(t)+"/retrieveTravelModes",{data:{supportedTravelModes:i,defaultTravelMode:d}}=await e(n,r);return{supportedTravelModes:i,defaultTravelMode:d}}catch(n){throw new r("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:n})}}export{i as collectGeometries,d as dropZValuesOffInputGeometry,f as fetchServiceDescription,u as isInputGeometryZAware};
